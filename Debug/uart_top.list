
uart_top.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010830  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d44  08010a30  08010a30  00011a30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011774  08011774  00013418  2**0
                  CONTENTS
  4 .ARM          00000008  08011774  08011774  00012774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801177c  0801177c  00013418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801177c  0801177c  0001277c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011780  08011780  00012780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000418  20000000  08011784  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047b0  20000418  08011b9c  00013418  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004bc8  08011b9c  00013bc8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00013418  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026be4  00000000  00000000  00013446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000588d  00000000  00000000  0003a02a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e48  00000000  00000000  0003f8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001770  00000000  00000000  00041700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e60f  00000000  00000000  00042e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002852e  00000000  00000000  0007147f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010c89b  00000000  00000000  000999ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a6248  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000092c8  00000000  00000000  001a628c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  001af554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000418 	.word	0x20000418
 800021c:	00000000 	.word	0x00000000
 8000220:	08010a18 	.word	0x08010a18

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000041c 	.word	0x2000041c
 800023c:	08010a18 	.word	0x08010a18

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	@ 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_ldivmod>:
 8000688:	b97b      	cbnz	r3, 80006aa <__aeabi_ldivmod+0x22>
 800068a:	b972      	cbnz	r2, 80006aa <__aeabi_ldivmod+0x22>
 800068c:	2900      	cmp	r1, #0
 800068e:	bfbe      	ittt	lt
 8000690:	2000      	movlt	r0, #0
 8000692:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000696:	e006      	blt.n	80006a6 <__aeabi_ldivmod+0x1e>
 8000698:	bf08      	it	eq
 800069a:	2800      	cmpeq	r0, #0
 800069c:	bf1c      	itt	ne
 800069e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80006a2:	f04f 30ff 	movne.w	r0, #4294967295
 80006a6:	f000 b9ed 	b.w	8000a84 <__aeabi_idiv0>
 80006aa:	f1ad 0c08 	sub.w	ip, sp, #8
 80006ae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006b2:	2900      	cmp	r1, #0
 80006b4:	db09      	blt.n	80006ca <__aeabi_ldivmod+0x42>
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	db1a      	blt.n	80006f0 <__aeabi_ldivmod+0x68>
 80006ba:	f000 f885 	bl	80007c8 <__udivmoddi4>
 80006be:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c6:	b004      	add	sp, #16
 80006c8:	4770      	bx	lr
 80006ca:	4240      	negs	r0, r0
 80006cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	db1b      	blt.n	800070c <__aeabi_ldivmod+0x84>
 80006d4:	f000 f878 	bl	80007c8 <__udivmoddi4>
 80006d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006e0:	b004      	add	sp, #16
 80006e2:	4240      	negs	r0, r0
 80006e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e8:	4252      	negs	r2, r2
 80006ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006ee:	4770      	bx	lr
 80006f0:	4252      	negs	r2, r2
 80006f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006f6:	f000 f867 	bl	80007c8 <__udivmoddi4>
 80006fa:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000702:	b004      	add	sp, #16
 8000704:	4240      	negs	r0, r0
 8000706:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800070a:	4770      	bx	lr
 800070c:	4252      	negs	r2, r2
 800070e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000712:	f000 f859 	bl	80007c8 <__udivmoddi4>
 8000716:	f8dd e004 	ldr.w	lr, [sp, #4]
 800071a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800071e:	b004      	add	sp, #16
 8000720:	4252      	negs	r2, r2
 8000722:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000726:	4770      	bx	lr

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295
 8000738:	f04f 30ff 	movne.w	r0, #4294967295
 800073c:	f000 b9a2 	b.w	8000a84 <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9d08      	ldr	r5, [sp, #32]
 80007ce:	460c      	mov	r4, r1
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d14e      	bne.n	8000872 <__udivmoddi4+0xaa>
 80007d4:	4694      	mov	ip, r2
 80007d6:	458c      	cmp	ip, r1
 80007d8:	4686      	mov	lr, r0
 80007da:	fab2 f282 	clz	r2, r2
 80007de:	d962      	bls.n	80008a6 <__udivmoddi4+0xde>
 80007e0:	b14a      	cbz	r2, 80007f6 <__udivmoddi4+0x2e>
 80007e2:	f1c2 0320 	rsb	r3, r2, #32
 80007e6:	4091      	lsls	r1, r2
 80007e8:	fa20 f303 	lsr.w	r3, r0, r3
 80007ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80007f0:	4319      	orrs	r1, r3
 80007f2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007fa:	fa1f f68c 	uxth.w	r6, ip
 80007fe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000802:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000806:	fb07 1114 	mls	r1, r7, r4, r1
 800080a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800080e:	fb04 f106 	mul.w	r1, r4, r6
 8000812:	4299      	cmp	r1, r3
 8000814:	d90a      	bls.n	800082c <__udivmoddi4+0x64>
 8000816:	eb1c 0303 	adds.w	r3, ip, r3
 800081a:	f104 30ff 	add.w	r0, r4, #4294967295
 800081e:	f080 8112 	bcs.w	8000a46 <__udivmoddi4+0x27e>
 8000822:	4299      	cmp	r1, r3
 8000824:	f240 810f 	bls.w	8000a46 <__udivmoddi4+0x27e>
 8000828:	3c02      	subs	r4, #2
 800082a:	4463      	add	r3, ip
 800082c:	1a59      	subs	r1, r3, r1
 800082e:	fa1f f38e 	uxth.w	r3, lr
 8000832:	fbb1 f0f7 	udiv	r0, r1, r7
 8000836:	fb07 1110 	mls	r1, r7, r0, r1
 800083a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800083e:	fb00 f606 	mul.w	r6, r0, r6
 8000842:	429e      	cmp	r6, r3
 8000844:	d90a      	bls.n	800085c <__udivmoddi4+0x94>
 8000846:	eb1c 0303 	adds.w	r3, ip, r3
 800084a:	f100 31ff 	add.w	r1, r0, #4294967295
 800084e:	f080 80fc 	bcs.w	8000a4a <__udivmoddi4+0x282>
 8000852:	429e      	cmp	r6, r3
 8000854:	f240 80f9 	bls.w	8000a4a <__udivmoddi4+0x282>
 8000858:	4463      	add	r3, ip
 800085a:	3802      	subs	r0, #2
 800085c:	1b9b      	subs	r3, r3, r6
 800085e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000862:	2100      	movs	r1, #0
 8000864:	b11d      	cbz	r5, 800086e <__udivmoddi4+0xa6>
 8000866:	40d3      	lsrs	r3, r2
 8000868:	2200      	movs	r2, #0
 800086a:	e9c5 3200 	strd	r3, r2, [r5]
 800086e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000872:	428b      	cmp	r3, r1
 8000874:	d905      	bls.n	8000882 <__udivmoddi4+0xba>
 8000876:	b10d      	cbz	r5, 800087c <__udivmoddi4+0xb4>
 8000878:	e9c5 0100 	strd	r0, r1, [r5]
 800087c:	2100      	movs	r1, #0
 800087e:	4608      	mov	r0, r1
 8000880:	e7f5      	b.n	800086e <__udivmoddi4+0xa6>
 8000882:	fab3 f183 	clz	r1, r3
 8000886:	2900      	cmp	r1, #0
 8000888:	d146      	bne.n	8000918 <__udivmoddi4+0x150>
 800088a:	42a3      	cmp	r3, r4
 800088c:	d302      	bcc.n	8000894 <__udivmoddi4+0xcc>
 800088e:	4290      	cmp	r0, r2
 8000890:	f0c0 80f0 	bcc.w	8000a74 <__udivmoddi4+0x2ac>
 8000894:	1a86      	subs	r6, r0, r2
 8000896:	eb64 0303 	sbc.w	r3, r4, r3
 800089a:	2001      	movs	r0, #1
 800089c:	2d00      	cmp	r5, #0
 800089e:	d0e6      	beq.n	800086e <__udivmoddi4+0xa6>
 80008a0:	e9c5 6300 	strd	r6, r3, [r5]
 80008a4:	e7e3      	b.n	800086e <__udivmoddi4+0xa6>
 80008a6:	2a00      	cmp	r2, #0
 80008a8:	f040 8090 	bne.w	80009cc <__udivmoddi4+0x204>
 80008ac:	eba1 040c 	sub.w	r4, r1, ip
 80008b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008b4:	fa1f f78c 	uxth.w	r7, ip
 80008b8:	2101      	movs	r1, #1
 80008ba:	fbb4 f6f8 	udiv	r6, r4, r8
 80008be:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008c2:	fb08 4416 	mls	r4, r8, r6, r4
 80008c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008ca:	fb07 f006 	mul.w	r0, r7, r6
 80008ce:	4298      	cmp	r0, r3
 80008d0:	d908      	bls.n	80008e4 <__udivmoddi4+0x11c>
 80008d2:	eb1c 0303 	adds.w	r3, ip, r3
 80008d6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008da:	d202      	bcs.n	80008e2 <__udivmoddi4+0x11a>
 80008dc:	4298      	cmp	r0, r3
 80008de:	f200 80cd 	bhi.w	8000a7c <__udivmoddi4+0x2b4>
 80008e2:	4626      	mov	r6, r4
 80008e4:	1a1c      	subs	r4, r3, r0
 80008e6:	fa1f f38e 	uxth.w	r3, lr
 80008ea:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ee:	fb08 4410 	mls	r4, r8, r0, r4
 80008f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008f6:	fb00 f707 	mul.w	r7, r0, r7
 80008fa:	429f      	cmp	r7, r3
 80008fc:	d908      	bls.n	8000910 <__udivmoddi4+0x148>
 80008fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000902:	f100 34ff 	add.w	r4, r0, #4294967295
 8000906:	d202      	bcs.n	800090e <__udivmoddi4+0x146>
 8000908:	429f      	cmp	r7, r3
 800090a:	f200 80b0 	bhi.w	8000a6e <__udivmoddi4+0x2a6>
 800090e:	4620      	mov	r0, r4
 8000910:	1bdb      	subs	r3, r3, r7
 8000912:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000916:	e7a5      	b.n	8000864 <__udivmoddi4+0x9c>
 8000918:	f1c1 0620 	rsb	r6, r1, #32
 800091c:	408b      	lsls	r3, r1
 800091e:	fa22 f706 	lsr.w	r7, r2, r6
 8000922:	431f      	orrs	r7, r3
 8000924:	fa20 fc06 	lsr.w	ip, r0, r6
 8000928:	fa04 f301 	lsl.w	r3, r4, r1
 800092c:	ea43 030c 	orr.w	r3, r3, ip
 8000930:	40f4      	lsrs	r4, r6
 8000932:	fa00 f801 	lsl.w	r8, r0, r1
 8000936:	0c38      	lsrs	r0, r7, #16
 8000938:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800093c:	fbb4 fef0 	udiv	lr, r4, r0
 8000940:	fa1f fc87 	uxth.w	ip, r7
 8000944:	fb00 441e 	mls	r4, r0, lr, r4
 8000948:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800094c:	fb0e f90c 	mul.w	r9, lr, ip
 8000950:	45a1      	cmp	r9, r4
 8000952:	fa02 f201 	lsl.w	r2, r2, r1
 8000956:	d90a      	bls.n	800096e <__udivmoddi4+0x1a6>
 8000958:	193c      	adds	r4, r7, r4
 800095a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800095e:	f080 8084 	bcs.w	8000a6a <__udivmoddi4+0x2a2>
 8000962:	45a1      	cmp	r9, r4
 8000964:	f240 8081 	bls.w	8000a6a <__udivmoddi4+0x2a2>
 8000968:	f1ae 0e02 	sub.w	lr, lr, #2
 800096c:	443c      	add	r4, r7
 800096e:	eba4 0409 	sub.w	r4, r4, r9
 8000972:	fa1f f983 	uxth.w	r9, r3
 8000976:	fbb4 f3f0 	udiv	r3, r4, r0
 800097a:	fb00 4413 	mls	r4, r0, r3, r4
 800097e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000982:	fb03 fc0c 	mul.w	ip, r3, ip
 8000986:	45a4      	cmp	ip, r4
 8000988:	d907      	bls.n	800099a <__udivmoddi4+0x1d2>
 800098a:	193c      	adds	r4, r7, r4
 800098c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000990:	d267      	bcs.n	8000a62 <__udivmoddi4+0x29a>
 8000992:	45a4      	cmp	ip, r4
 8000994:	d965      	bls.n	8000a62 <__udivmoddi4+0x29a>
 8000996:	3b02      	subs	r3, #2
 8000998:	443c      	add	r4, r7
 800099a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800099e:	fba0 9302 	umull	r9, r3, r0, r2
 80009a2:	eba4 040c 	sub.w	r4, r4, ip
 80009a6:	429c      	cmp	r4, r3
 80009a8:	46ce      	mov	lr, r9
 80009aa:	469c      	mov	ip, r3
 80009ac:	d351      	bcc.n	8000a52 <__udivmoddi4+0x28a>
 80009ae:	d04e      	beq.n	8000a4e <__udivmoddi4+0x286>
 80009b0:	b155      	cbz	r5, 80009c8 <__udivmoddi4+0x200>
 80009b2:	ebb8 030e 	subs.w	r3, r8, lr
 80009b6:	eb64 040c 	sbc.w	r4, r4, ip
 80009ba:	fa04 f606 	lsl.w	r6, r4, r6
 80009be:	40cb      	lsrs	r3, r1
 80009c0:	431e      	orrs	r6, r3
 80009c2:	40cc      	lsrs	r4, r1
 80009c4:	e9c5 6400 	strd	r6, r4, [r5]
 80009c8:	2100      	movs	r1, #0
 80009ca:	e750      	b.n	800086e <__udivmoddi4+0xa6>
 80009cc:	f1c2 0320 	rsb	r3, r2, #32
 80009d0:	fa20 f103 	lsr.w	r1, r0, r3
 80009d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009d8:	fa24 f303 	lsr.w	r3, r4, r3
 80009dc:	4094      	lsls	r4, r2
 80009de:	430c      	orrs	r4, r1
 80009e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009e4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009e8:	fa1f f78c 	uxth.w	r7, ip
 80009ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80009f0:	fb08 3110 	mls	r1, r8, r0, r3
 80009f4:	0c23      	lsrs	r3, r4, #16
 80009f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009fa:	fb00 f107 	mul.w	r1, r0, r7
 80009fe:	4299      	cmp	r1, r3
 8000a00:	d908      	bls.n	8000a14 <__udivmoddi4+0x24c>
 8000a02:	eb1c 0303 	adds.w	r3, ip, r3
 8000a06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a0a:	d22c      	bcs.n	8000a66 <__udivmoddi4+0x29e>
 8000a0c:	4299      	cmp	r1, r3
 8000a0e:	d92a      	bls.n	8000a66 <__udivmoddi4+0x29e>
 8000a10:	3802      	subs	r0, #2
 8000a12:	4463      	add	r3, ip
 8000a14:	1a5b      	subs	r3, r3, r1
 8000a16:	b2a4      	uxth	r4, r4
 8000a18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000a20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a24:	fb01 f307 	mul.w	r3, r1, r7
 8000a28:	42a3      	cmp	r3, r4
 8000a2a:	d908      	bls.n	8000a3e <__udivmoddi4+0x276>
 8000a2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a34:	d213      	bcs.n	8000a5e <__udivmoddi4+0x296>
 8000a36:	42a3      	cmp	r3, r4
 8000a38:	d911      	bls.n	8000a5e <__udivmoddi4+0x296>
 8000a3a:	3902      	subs	r1, #2
 8000a3c:	4464      	add	r4, ip
 8000a3e:	1ae4      	subs	r4, r4, r3
 8000a40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a44:	e739      	b.n	80008ba <__udivmoddi4+0xf2>
 8000a46:	4604      	mov	r4, r0
 8000a48:	e6f0      	b.n	800082c <__udivmoddi4+0x64>
 8000a4a:	4608      	mov	r0, r1
 8000a4c:	e706      	b.n	800085c <__udivmoddi4+0x94>
 8000a4e:	45c8      	cmp	r8, r9
 8000a50:	d2ae      	bcs.n	80009b0 <__udivmoddi4+0x1e8>
 8000a52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a5a:	3801      	subs	r0, #1
 8000a5c:	e7a8      	b.n	80009b0 <__udivmoddi4+0x1e8>
 8000a5e:	4631      	mov	r1, r6
 8000a60:	e7ed      	b.n	8000a3e <__udivmoddi4+0x276>
 8000a62:	4603      	mov	r3, r0
 8000a64:	e799      	b.n	800099a <__udivmoddi4+0x1d2>
 8000a66:	4630      	mov	r0, r6
 8000a68:	e7d4      	b.n	8000a14 <__udivmoddi4+0x24c>
 8000a6a:	46d6      	mov	lr, sl
 8000a6c:	e77f      	b.n	800096e <__udivmoddi4+0x1a6>
 8000a6e:	4463      	add	r3, ip
 8000a70:	3802      	subs	r0, #2
 8000a72:	e74d      	b.n	8000910 <__udivmoddi4+0x148>
 8000a74:	4606      	mov	r6, r0
 8000a76:	4623      	mov	r3, r4
 8000a78:	4608      	mov	r0, r1
 8000a7a:	e70f      	b.n	800089c <__udivmoddi4+0xd4>
 8000a7c:	3e02      	subs	r6, #2
 8000a7e:	4463      	add	r3, ip
 8000a80:	e730      	b.n	80008e4 <__udivmoddi4+0x11c>
 8000a82:	bf00      	nop

08000a84 <__aeabi_idiv0>:
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	460b      	mov	r3, r1
 8000a92:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	78fa      	ldrb	r2, [r7, #3]
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 faf7 	bl	8001090 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 fb12 	bl	80010d0 <SX1278_hw_SPIReadByte>
 8000aac:	4603      	mov	r3, r0
 8000aae:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 faaf 	bl	800101a <SX1278_hw_SetNSS>
	return tmp;
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b082      	sub	sp, #8
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
 8000ace:	460b      	mov	r3, r1
 8000ad0:	70fb      	strb	r3, [r7, #3]
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2100      	movs	r1, #0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 fa9c 	bl	800101a <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	78fb      	ldrb	r3, [r7, #3]
 8000ae8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	4619      	mov	r1, r3
 8000af0:	4610      	mov	r0, r2
 8000af2:	f000 facd 	bl	8001090 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	78ba      	ldrb	r2, [r7, #2]
 8000afc:	4611      	mov	r1, r2
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 fac6 	bl	8001090 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2101      	movs	r1, #1
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 fa85 	bl	800101a <SX1278_hw_SetNSS>
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 8000b18:	b590      	push	{r4, r7, lr}
 8000b1a:	b087      	sub	sp, #28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	607a      	str	r2, [r7, #4]
 8000b22:	461a      	mov	r2, r3
 8000b24:	460b      	mov	r3, r1
 8000b26:	72fb      	strb	r3, [r7, #11]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 8000b2c:	7abb      	ldrb	r3, [r7, #10]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d927      	bls.n	8000b82 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f000 fa6e 	bl	800101a <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	7afa      	ldrb	r2, [r7, #11]
 8000b44:	4611      	mov	r1, r2
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 faa2 	bl	8001090 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	75fb      	strb	r3, [r7, #23]
 8000b50:	e00c      	b.n	8000b6c <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	6819      	ldr	r1, [r3, #0]
 8000b56:	7dfb      	ldrb	r3, [r7, #23]
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	18d4      	adds	r4, r2, r3
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	f000 fab7 	bl	80010d0 <SX1278_hw_SPIReadByte>
 8000b62:	4603      	mov	r3, r0
 8000b64:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 8000b66:	7dfb      	ldrb	r3, [r7, #23]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	75fb      	strb	r3, [r7, #23]
 8000b6c:	7dfa      	ldrb	r2, [r7, #23]
 8000b6e:	7abb      	ldrb	r3, [r7, #10]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d3ee      	bcc.n	8000b52 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2101      	movs	r1, #1
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 fa4d 	bl	800101a <SX1278_hw_SetNSS>
 8000b80:	e000      	b.n	8000b84 <SX1278_SPIBurstRead+0x6c>
		return;
 8000b82:	bf00      	nop
	}
}
 8000b84:	371c      	adds	r7, #28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd90      	pop	{r4, r7, pc}

08000b8a <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b086      	sub	sp, #24
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	60f8      	str	r0, [r7, #12]
 8000b92:	607a      	str	r2, [r7, #4]
 8000b94:	461a      	mov	r2, r3
 8000b96:	460b      	mov	r3, r1
 8000b98:	72fb      	strb	r3, [r7, #11]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8000b9e:	7abb      	ldrb	r3, [r7, #10]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d929      	bls.n	8000bf8 <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 fa35 	bl	800101a <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	7afb      	ldrb	r3, [r7, #11]
 8000bb6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4610      	mov	r0, r2
 8000bc0:	f000 fa66 	bl	8001090 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	75fb      	strb	r3, [r7, #23]
 8000bc8:	e00b      	b.n	8000be2 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	6818      	ldr	r0, [r3, #0]
 8000bce:	7dfb      	ldrb	r3, [r7, #23]
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	f000 fa5a 	bl	8001090 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000bdc:	7dfb      	ldrb	r3, [r7, #23]
 8000bde:	3301      	adds	r3, #1
 8000be0:	75fb      	strb	r3, [r7, #23]
 8000be2:	7dfa      	ldrb	r2, [r7, #23]
 8000be4:	7abb      	ldrb	r3, [r7, #10]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d3ef      	bcc.n	8000bca <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2101      	movs	r1, #1
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f000 fa12 	bl	800101a <SX1278_hw_SetNSS>
 8000bf6:	e000      	b.n	8000bfa <SX1278_SPIBurstWrite+0x70>
		return;
 8000bf8:	bf00      	nop
	}
}
 8000bfa:	3718      	adds	r7, #24
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f000 f90d 	bl	8000e28 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8000c0e:	200f      	movs	r0, #15
 8000c10:	f000 fa84 	bl	800111c <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f000 f917 	bl	8000e48 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	f04f 0100 	mov.w	r1, #0
 8000c28:	04d9      	lsls	r1, r3, #19
 8000c2a:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8000c2e:	04d0      	lsls	r0, r2, #19
 8000c30:	4a6f      	ldr	r2, [pc, #444]	@ (8000df0 <SX1278_config+0x1f0>)
 8000c32:	f04f 0300 	mov.w	r3, #0
 8000c36:	f7ff fd77 	bl	8000728 <__aeabi_uldivmod>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8000c42:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000c46:	f04f 0200 	mov.w	r2, #0
 8000c4a:	f04f 0300 	mov.w	r3, #0
 8000c4e:	0c02      	lsrs	r2, r0, #16
 8000c50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c54:	0c0b      	lsrs	r3, r1, #16
 8000c56:	b2d3      	uxtb	r3, r2
 8000c58:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 8000c5a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000c5e:	f04f 0200 	mov.w	r2, #0
 8000c62:	f04f 0300 	mov.w	r3, #0
 8000c66:	0a02      	lsrs	r2, r0, #8
 8000c68:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000c6c:	0a0b      	lsrs	r3, r1, #8
 8000c6e:	b2d3      	uxtb	r3, r2
 8000c70:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8000c72:	7c3b      	ldrb	r3, [r7, #16]
 8000c74:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 8000c76:	f107 020c 	add.w	r2, r7, #12
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	2106      	movs	r1, #6
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff ff83 	bl	8000b8a <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8000c84:	2234      	movs	r2, #52	@ 0x34
 8000c86:	2139      	movs	r1, #57	@ 0x39
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff ff1c 	bl	8000ac6 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	7c1b      	ldrb	r3, [r3, #16]
 8000c92:	461a      	mov	r2, r3
 8000c94:	4b57      	ldr	r3, [pc, #348]	@ (8000df4 <SX1278_config+0x1f4>)
 8000c96:	5c9b      	ldrb	r3, [r3, r2]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	2109      	movs	r1, #9
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff ff12 	bl	8000ac6 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8000ca2:	220b      	movs	r2, #11
 8000ca4:	210b      	movs	r1, #11
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff ff0d 	bl	8000ac6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8000cac:	2223      	movs	r2, #35	@ 0x23
 8000cae:	210c      	movs	r1, #12
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f7ff ff08 	bl	8000ac6 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	7c5b      	ldrb	r3, [r3, #17]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	4b4e      	ldr	r3, [pc, #312]	@ (8000df8 <SX1278_config+0x1f8>)
 8000cbe:	5c9b      	ldrb	r3, [r3, r2]
 8000cc0:	2b06      	cmp	r3, #6
 8000cc2:	d147      	bne.n	8000d54 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	7c9b      	ldrb	r3, [r3, #18]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b4c      	ldr	r3, [pc, #304]	@ (8000dfc <SX1278_config+0x1fc>)
 8000ccc:	5c9b      	ldrb	r3, [r3, r2]
 8000cce:	011b      	lsls	r3, r3, #4
 8000cd0:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	7cdb      	ldrb	r3, [r3, #19]
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4b49      	ldr	r3, [pc, #292]	@ (8000e00 <SX1278_config+0x200>)
 8000cda:	5c5b      	ldrb	r3, [r3, r1]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	4413      	add	r3, r2
 8000ce2:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	461a      	mov	r2, r3
 8000cea:	211d      	movs	r1, #29
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff feea 	bl	8000ac6 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	7c5b      	ldrb	r3, [r3, #17]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4b3f      	ldr	r3, [pc, #252]	@ (8000df8 <SX1278_config+0x1f8>)
 8000cfa:	5c9b      	ldrb	r3, [r3, r2]
 8000cfc:	011b      	lsls	r3, r3, #4
 8000cfe:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	7d1b      	ldrb	r3, [r3, #20]
 8000d04:	4619      	mov	r1, r3
 8000d06:	4b3f      	ldr	r3, [pc, #252]	@ (8000e04 <SX1278_config+0x204>)
 8000d08:	5c5b      	ldrb	r3, [r3, r1]
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	4413      	add	r3, r2
 8000d10:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000d12:	3303      	adds	r3, #3
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	461a      	mov	r2, r3
 8000d18:	211e      	movs	r1, #30
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff fed3 	bl	8000ac6 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 8000d20:	2131      	movs	r1, #49	@ 0x31
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff feb0 	bl	8000a88 <SX1278_SPIRead>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
 8000d2e:	f023 0307 	bic.w	r3, r3, #7
 8000d32:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
 8000d36:	f043 0305 	orr.w	r3, r3, #5
 8000d3a:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 8000d3c:	7bfb      	ldrb	r3, [r7, #15]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	2131      	movs	r1, #49	@ 0x31
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff febf 	bl	8000ac6 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8000d48:	220c      	movs	r2, #12
 8000d4a:	2137      	movs	r1, #55	@ 0x37
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff feba 	bl	8000ac6 <SX1278_SPIWrite>
 8000d52:	e029      	b.n	8000da8 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	7c9b      	ldrb	r3, [r3, #18]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b28      	ldr	r3, [pc, #160]	@ (8000dfc <SX1278_config+0x1fc>)
 8000d5c:	5c9b      	ldrb	r3, [r3, r2]
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	7cdb      	ldrb	r3, [r3, #19]
 8000d66:	4619      	mov	r1, r3
 8000d68:	4b25      	ldr	r3, [pc, #148]	@ (8000e00 <SX1278_config+0x200>)
 8000d6a:	5c5b      	ldrb	r3, [r3, r1]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000d70:	4413      	add	r3, r2
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	461a      	mov	r2, r3
 8000d76:	211d      	movs	r1, #29
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f7ff fea4 	bl	8000ac6 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	7c5b      	ldrb	r3, [r3, #17]
 8000d82:	461a      	mov	r2, r3
 8000d84:	4b1c      	ldr	r3, [pc, #112]	@ (8000df8 <SX1278_config+0x1f8>)
 8000d86:	5c9b      	ldrb	r3, [r3, r2]
 8000d88:	011b      	lsls	r3, r3, #4
 8000d8a:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	7d1b      	ldrb	r3, [r3, #20]
 8000d90:	4619      	mov	r1, r3
 8000d92:	4b1c      	ldr	r3, [pc, #112]	@ (8000e04 <SX1278_config+0x204>)
 8000d94:	5c5b      	ldrb	r3, [r3, r1]
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000d9a:	4413      	add	r3, r2
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	461a      	mov	r2, r3
 8000da0:	211e      	movs	r1, #30
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff fe8f 	bl	8000ac6 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8000da8:	2204      	movs	r2, #4
 8000daa:	2126      	movs	r1, #38	@ 0x26
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff fe8a 	bl	8000ac6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8000db2:	2208      	movs	r2, #8
 8000db4:	211f      	movs	r1, #31
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff fe85 	bl	8000ac6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2120      	movs	r1, #32
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff fe80 	bl	8000ac6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 8000dc6:	2208      	movs	r2, #8
 8000dc8:	2121      	movs	r1, #33	@ 0x21
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff fe7b 	bl	8000ac6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	2141      	movs	r1, #65	@ 0x41
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff fe76 	bl	8000ac6 <SX1278_SPIWrite>
	module->readBytes = 0;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	SX1278_standby(module); //Entry standby mode
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f000 f810 	bl	8000e08 <SX1278_standby>
}
 8000de8:	bf00      	nop
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	01e84800 	.word	0x01e84800
 8000df4:	080112b0 	.word	0x080112b0
 8000df8:	080112b4 	.word	0x080112b4
 8000dfc:	080112bc 	.word	0x080112bc
 8000e00:	080112c8 	.word	0x080112c8
 8000e04:	080112cc 	.word	0x080112cc

08000e08 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8000e10:	2209      	movs	r2, #9
 8000e12:	2101      	movs	r1, #1
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff fe56 	bl	8000ac6 <SX1278_SPIWrite>
	module->status = STANDBY;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	759a      	strb	r2, [r3, #22]
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8000e30:	2208      	movs	r2, #8
 8000e32:	2101      	movs	r1, #1
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f7ff fe46 	bl	8000ac6 <SX1278_SPIWrite>
	module->status = SLEEP;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	759a      	strb	r2, [r3, #22]
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8000e50:	2288      	movs	r2, #136	@ 0x88
 8000e52:	2101      	movs	r1, #1
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff fe36 	bl	8000ac6 <SX1278_SPIWrite>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8000e6a:	22ff      	movs	r2, #255	@ 0xff
 8000e6c:	2112      	movs	r1, #18
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff fe29 	bl	8000ac6 <SX1278_SPIWrite>
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	460b      	mov	r3, r1
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	7afa      	ldrb	r2, [r7, #11]
 8000e8e:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 8000e90:	68f8      	ldr	r0, [r7, #12]
 8000e92:	f7ff feb5 	bl	8000c00 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8000e96:	2284      	movs	r2, #132	@ 0x84
 8000e98:	214d      	movs	r1, #77	@ 0x4d
 8000e9a:	68f8      	ldr	r0, [r7, #12]
 8000e9c:	f7ff fe13 	bl	8000ac6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8000ea0:	22ff      	movs	r2, #255	@ 0xff
 8000ea2:	2124      	movs	r1, #36	@ 0x24
 8000ea4:	68f8      	ldr	r0, [r7, #12]
 8000ea6:	f7ff fe0e 	bl	8000ac6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8000eaa:	2201      	movs	r2, #1
 8000eac:	2140      	movs	r1, #64	@ 0x40
 8000eae:	68f8      	ldr	r0, [r7, #12]
 8000eb0:	f7ff fe09 	bl	8000ac6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8000eb4:	223f      	movs	r2, #63	@ 0x3f
 8000eb6:	2111      	movs	r1, #17
 8000eb8:	68f8      	ldr	r0, [r7, #12]
 8000eba:	f7ff fe04 	bl	8000ac6 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000ebe:	68f8      	ldr	r0, [r7, #12]
 8000ec0:	f7ff ffcf 	bl	8000e62 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8000ec4:	7afb      	ldrb	r3, [r7, #11]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	2122      	movs	r1, #34	@ 0x22
 8000eca:	68f8      	ldr	r0, [r7, #12]
 8000ecc:	f7ff fdfb 	bl	8000ac6 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8000ed0:	210f      	movs	r1, #15
 8000ed2:	68f8      	ldr	r0, [r7, #12]
 8000ed4:	f7ff fdd8 	bl	8000a88 <SX1278_SPIRead>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8000edc:	7dfb      	ldrb	r3, [r7, #23]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	210d      	movs	r1, #13
 8000ee2:	68f8      	ldr	r0, [r7, #12]
 8000ee4:	f7ff fdef 	bl	8000ac6 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8000ee8:	228d      	movs	r2, #141	@ 0x8d
 8000eea:	2101      	movs	r1, #1
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f7ff fdea 	bl	8000ac6 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000efa:	2118      	movs	r1, #24
 8000efc:	68f8      	ldr	r0, [r7, #12]
 8000efe:	f7ff fdc3 	bl	8000a88 <SX1278_SPIRead>
 8000f02:	4603      	mov	r3, r0
 8000f04:	f003 0304 	and.w	r3, r3, #4
 8000f08:	2b04      	cmp	r3, #4
 8000f0a:	d104      	bne.n	8000f16 <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2203      	movs	r2, #3
 8000f10:	759a      	strb	r2, [r3, #22]
			return 1;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e013      	b.n	8000f3e <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d109      	bne.n	8000f36 <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 f88e 	bl	8001048 <SX1278_hw_Reset>
			SX1278_config(module);
 8000f2c:	68f8      	ldr	r0, [r7, #12]
 8000f2e:	f7ff fe67 	bl	8000c00 <SX1278_config>
			return 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	e003      	b.n	8000f3e <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 8000f36:	2001      	movs	r0, #1
 8000f38:	f000 f8f0 	bl	800111c <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000f3c:	e7dd      	b.n	8000efa <SX1278_LoRaEntryRx+0x7e>
	}
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b084      	sub	sp, #16
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 f8ed 	bl	8001132 <SX1278_hw_GetDIO0>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d030      	beq.n	8000fc0 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3317      	adds	r3, #23
 8000f62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f66:	2100      	movs	r1, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f00c fa8b 	bl	800d484 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8000f6e:	2110      	movs	r1, #16
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff fd89 	bl	8000a88 <SX1278_SPIRead>
 8000f76:	4603      	mov	r3, r0
 8000f78:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8000f7a:	7bbb      	ldrb	r3, [r7, #14]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	210d      	movs	r1, #13
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff fda0 	bl	8000ac6 <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	7c5b      	ldrb	r3, [r3, #17]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d103      	bne.n	8000f96 <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	7d5b      	ldrb	r3, [r3, #21]
 8000f92:	73fb      	strb	r3, [r7, #15]
 8000f94:	e005      	b.n	8000fa2 <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8000f96:	2113      	movs	r1, #19
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff fd75 	bl	8000a88 <SX1278_SPIRead>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f103 0217 	add.w	r2, r3, #23
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	2100      	movs	r1, #0
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff fdb3 	bl	8000b18 <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	7bfa      	ldrb	r2, [r7, #15]
 8000fb6:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
		SX1278_clearLoRaIrq(module);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ff51 	bl	8000e62 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b084      	sub	sp, #16
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	60f8      	str	r0, [r7, #12]
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 8000fe2:	79fa      	ldrb	r2, [r7, #7]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d003      	beq.n	8000ff0 <SX1278_read+0x22>
		length = module->readBytes;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 8000fee:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	3317      	adds	r3, #23
 8000ff4:	79fa      	ldrb	r2, [r7, #7]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	68b8      	ldr	r0, [r7, #8]
 8000ffa:	f00c fb9a 	bl	800d732 <memcpy>
	rxBuf[length] = '\0';
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	68ba      	ldr	r2, [r7, #8]
 8001002:	4413      	add	r3, r2
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2200      	movs	r2, #0
 800100c:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	return length;
 8001010:	79fb      	ldrb	r3, [r7, #7]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <SX1278_hw_SetNSS>:
{
	SX1278_hw_SetNSS(hw, 1);
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
}

__attribute__((weak)) void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
 8001022:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6958      	ldr	r0, [r3, #20]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	691b      	ldr	r3, [r3, #16]
 800102c:	b299      	uxth	r1, r3
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	2b01      	cmp	r3, #1
 8001032:	bf0c      	ite	eq
 8001034:	2301      	moveq	r3, #1
 8001036:	2300      	movne	r3, #0
 8001038:	b2db      	uxtb	r3, r3
 800103a:	461a      	mov	r2, r3
 800103c:	f003 fe12 	bl	8004c64 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <SX1278_hw_Reset>:

__attribute__((weak)) void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8001050:	2101      	movs	r1, #1
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ffe1 	bl	800101a <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6858      	ldr	r0, [r3, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	b29b      	uxth	r3, r3
 8001062:	2200      	movs	r2, #0
 8001064:	4619      	mov	r1, r3
 8001066:	f003 fdfd 	bl	8004c64 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 800106a:	2001      	movs	r0, #1
 800106c:	f000 f856 	bl	800111c <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6858      	ldr	r0, [r3, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	b29b      	uxth	r3, r3
 800107a:	2201      	movs	r2, #1
 800107c:	4619      	mov	r1, r3
 800107e:	f003 fdf1 	bl	8004c64 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8001082:	2064      	movs	r0, #100	@ 0x64
 8001084:	f000 f84a 	bl	800111c <SX1278_hw_DelayMs>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <SX1278_hw_SPICommand>:

__attribute__((weak)) void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 800109c:	2100      	movs	r1, #0
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ffbb 	bl	800101a <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6998      	ldr	r0, [r3, #24]
 80010a8:	1cf9      	adds	r1, r7, #3
 80010aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ae:	2201      	movs	r2, #1
 80010b0:	f005 fe4f 	bl	8006d52 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80010b4:	bf00      	nop
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f006 f9e0 	bl	8007480 <HAL_SPI_GetState>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d1f7      	bne.n	80010b6 <SX1278_hw_SPICommand+0x26>
		;
}
 80010c6:	bf00      	nop
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <SX1278_hw_SPIReadByte>:

__attribute__((weak)) uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af02      	add	r7, sp, #8
 80010d6:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 80010d8:	2300      	movs	r3, #0
 80010da:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 80010dc:	2300      	movs	r3, #0
 80010de:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 80010e0:	2100      	movs	r1, #0
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff ff99 	bl	800101a <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6998      	ldr	r0, [r3, #24]
 80010ec:	f107 020e 	add.w	r2, r7, #14
 80010f0:	f107 010f 	add.w	r1, r7, #15
 80010f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	2301      	movs	r3, #1
 80010fc:	f005 ff9e 	bl	800703c <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8001100:	bf00      	nop
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	4618      	mov	r0, r3
 8001108:	f006 f9ba 	bl	8007480 <HAL_SPI_GetState>
 800110c:	4603      	mov	r3, r0
 800110e:	2b01      	cmp	r3, #1
 8001110:	d1f7      	bne.n	8001102 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8001112:	7bbb      	ldrb	r3, [r7, #14]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <SX1278_hw_DelayMs>:

__attribute__((weak)) void SX1278_hw_DelayMs(uint32_t msec) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f003 fa41 	bl	80045ac <HAL_Delay>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <SX1278_hw_GetDIO0>:

__attribute__((weak)) int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	68da      	ldr	r2, [r3, #12]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	b29b      	uxth	r3, r3
 8001144:	4619      	mov	r1, r3
 8001146:	4610      	mov	r0, r2
 8001148:	f003 fd74 	bl	8004c34 <HAL_GPIO_ReadPin>
 800114c:	4603      	mov	r3, r0
 800114e:	2b01      	cmp	r3, #1
 8001150:	bf0c      	ite	eq
 8001152:	2301      	moveq	r3, #1
 8001154:	2300      	movne	r3, #0
 8001156:	b2db      	uxtb	r3, r3
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2203      	movs	r2, #3
 800116c:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2203      	movs	r2, #3
 8001178:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2203      	movs	r2, #3
 800117e:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2203      	movs	r2, #3
 8001184:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2203      	movs	r2, #3
 800118a:	715a      	strb	r2, [r3, #5]
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	@ 0x28
 800119c:	af04      	add	r7, sp, #16
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	460b      	mov	r3, r1
 80011a2:	607a      	str	r2, [r7, #4]
 80011a4:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80011b2:	7afb      	ldrb	r3, [r7, #11]
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	8af9      	ldrh	r1, [r7, #22]
 80011b8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80011bc:	9302      	str	r3, [sp, #8]
 80011be:	2302      	movs	r3, #2
 80011c0:	9301      	str	r3, [sp, #4]
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2301      	movs	r3, #1
 80011ca:	f003 ff15 	bl	8004ff8 <HAL_I2C_Mem_Read>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d10b      	bne.n	80011ec <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80011d4:	7d7b      	ldrb	r3, [r7, #21]
 80011d6:	021b      	lsls	r3, r3, #8
 80011d8:	b21a      	sxth	r2, r3
 80011da:	7d3b      	ldrb	r3, [r7, #20]
 80011dc:	b21b      	sxth	r3, r3
 80011de:	4313      	orrs	r3, r2
 80011e0:	b21b      	sxth	r3, r3
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	801a      	strh	r2, [r3, #0]
		return true;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e000      	b.n	80011ee <read_register16+0x56>
	} else
		return false;
 80011ec:	2300      	movs	r3, #0

}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 80011f6:	b590      	push	{r4, r7, lr}
 80011f8:	b08b      	sub	sp, #44	@ 0x2c
 80011fa:	af04      	add	r7, sp, #16
 80011fc:	60f8      	str	r0, [r7, #12]
 80011fe:	607a      	str	r2, [r7, #4]
 8001200:	461a      	mov	r2, r3
 8001202:	460b      	mov	r3, r1
 8001204:	72fb      	strb	r3, [r7, #11]
 8001206:	4613      	mov	r3, r2
 8001208:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001216:	7afb      	ldrb	r3, [r7, #11]
 8001218:	b29a      	uxth	r2, r3
 800121a:	7abb      	ldrb	r3, [r7, #10]
 800121c:	b29b      	uxth	r3, r3
 800121e:	8af9      	ldrh	r1, [r7, #22]
 8001220:	f241 3488 	movw	r4, #5000	@ 0x1388
 8001224:	9402      	str	r4, [sp, #8]
 8001226:	9301      	str	r3, [sp, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2301      	movs	r3, #1
 800122e:	f003 fee3 	bl	8004ff8 <HAL_I2C_Mem_Read>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d101      	bne.n	800123c <read_data+0x46>
		return 0;
 8001238:	2300      	movs	r3, #0
 800123a:	e000      	b.n	800123e <read_data+0x48>
	else
		return 1;
 800123c:	2301      	movs	r3, #1

}
 800123e:	4618      	mov	r0, r3
 8001240:	371c      	adds	r7, #28
 8001242:	46bd      	mov	sp, r7
 8001244:	bd90      	pop	{r4, r7, pc}

08001246 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	461a      	mov	r2, r3
 8001252:	2188      	movs	r1, #136	@ 0x88
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff ff9f 	bl	8001198 <read_register16>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d06f      	beq.n	8001340 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3302      	adds	r3, #2
 8001264:	461a      	mov	r2, r3
 8001266:	218a      	movs	r1, #138	@ 0x8a
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ff95 	bl	8001198 <read_register16>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d065      	beq.n	8001340 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3304      	adds	r3, #4
 8001278:	461a      	mov	r2, r3
 800127a:	218c      	movs	r1, #140	@ 0x8c
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff ff8b 	bl	8001198 <read_register16>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d05b      	beq.n	8001340 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3306      	adds	r3, #6
 800128c:	461a      	mov	r2, r3
 800128e:	218e      	movs	r1, #142	@ 0x8e
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ff81 	bl	8001198 <read_register16>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d051      	beq.n	8001340 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3308      	adds	r3, #8
 80012a0:	461a      	mov	r2, r3
 80012a2:	2190      	movs	r1, #144	@ 0x90
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f7ff ff77 	bl	8001198 <read_register16>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d047      	beq.n	8001340 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	330a      	adds	r3, #10
 80012b4:	461a      	mov	r2, r3
 80012b6:	2192      	movs	r1, #146	@ 0x92
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ff6d 	bl	8001198 <read_register16>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d03d      	beq.n	8001340 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	330c      	adds	r3, #12
 80012c8:	461a      	mov	r2, r3
 80012ca:	2194      	movs	r1, #148	@ 0x94
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff ff63 	bl	8001198 <read_register16>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d033      	beq.n	8001340 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	330e      	adds	r3, #14
 80012dc:	461a      	mov	r2, r3
 80012de:	2196      	movs	r1, #150	@ 0x96
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ff59 	bl	8001198 <read_register16>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d029      	beq.n	8001340 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3310      	adds	r3, #16
 80012f0:	461a      	mov	r2, r3
 80012f2:	2198      	movs	r1, #152	@ 0x98
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ff4f 	bl	8001198 <read_register16>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d01f      	beq.n	8001340 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3312      	adds	r3, #18
 8001304:	461a      	mov	r2, r3
 8001306:	219a      	movs	r1, #154	@ 0x9a
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff ff45 	bl	8001198 <read_register16>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d015      	beq.n	8001340 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3314      	adds	r3, #20
 8001318:	461a      	mov	r2, r3
 800131a:	219c      	movs	r1, #156	@ 0x9c
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff ff3b 	bl	8001198 <read_register16>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d00b      	beq.n	8001340 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 800132c:	461a      	mov	r2, r3
 800132e:	219e      	movs	r1, #158	@ 0x9e
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ff31 	bl	8001198 <read_register16>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <read_calibration_data+0xfa>

		return true;
 800133c:	2301      	movs	r3, #1
 800133e:	e000      	b.n	8001342 <read_calibration_data+0xfc>
	}

	return false;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 800134a:	b580      	push	{r7, lr}
 800134c:	b084      	sub	sp, #16
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f103 0218 	add.w	r2, r3, #24
 8001358:	2301      	movs	r3, #1
 800135a:	21a1      	movs	r1, #161	@ 0xa1
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff ff4a 	bl	80011f6 <read_data>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d14b      	bne.n	8001400 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	331a      	adds	r3, #26
 800136c:	461a      	mov	r2, r3
 800136e:	21e1      	movs	r1, #225	@ 0xe1
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff ff11 	bl	8001198 <read_register16>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d041      	beq.n	8001400 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f103 021c 	add.w	r2, r3, #28
 8001382:	2301      	movs	r3, #1
 8001384:	21e3      	movs	r1, #227	@ 0xe3
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ff35 	bl	80011f6 <read_data>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d136      	bne.n	8001400 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8001392:	f107 030e 	add.w	r3, r7, #14
 8001396:	461a      	mov	r2, r3
 8001398:	21e4      	movs	r1, #228	@ 0xe4
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff fefc 	bl	8001198 <read_register16>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d02c      	beq.n	8001400 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	461a      	mov	r2, r3
 80013ac:	21e5      	movs	r1, #229	@ 0xe5
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff fef2 	bl	8001198 <read_register16>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d022      	beq.n	8001400 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 80013c0:	2301      	movs	r3, #1
 80013c2:	21e7      	movs	r1, #231	@ 0xe7
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff ff16 	bl	80011f6 <read_data>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d117      	bne.n	8001400 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80013d0:	89fb      	ldrh	r3, [r7, #14]
 80013d2:	011b      	lsls	r3, r3, #4
 80013d4:	b21b      	sxth	r3, r3
 80013d6:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 80013da:	b21a      	sxth	r2, r3
 80013dc:	89fb      	ldrh	r3, [r7, #14]
 80013de:	121b      	asrs	r3, r3, #8
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	f003 030f 	and.w	r3, r3, #15
 80013e6:	b21b      	sxth	r3, r3
 80013e8:	4313      	orrs	r3, r2
 80013ea:	b21a      	sxth	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80013f0:	89bb      	ldrh	r3, [r7, #12]
 80013f2:	091b      	lsrs	r3, r3, #4
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	b21a      	sxth	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	841a      	strh	r2, [r3, #32]

		return true;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e000      	b.n	8001402 <read_hum_calibration_data+0xb8>
	}

	return false;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 800140a:	b580      	push	{r7, lr}
 800140c:	b088      	sub	sp, #32
 800140e:	af04      	add	r7, sp, #16
 8001410:	6078      	str	r0, [r7, #4]
 8001412:	460b      	mov	r3, r1
 8001414:	70fb      	strb	r3, [r7, #3]
 8001416:	4613      	mov	r3, r2
 8001418:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001426:	78fb      	ldrb	r3, [r7, #3]
 8001428:	b29a      	uxth	r2, r3
 800142a:	89f9      	ldrh	r1, [r7, #14]
 800142c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001430:	9302      	str	r3, [sp, #8]
 8001432:	2301      	movs	r3, #1
 8001434:	9301      	str	r3, [sp, #4]
 8001436:	1cbb      	adds	r3, r7, #2
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	2301      	movs	r3, #1
 800143c:	f003 fcc8 	bl	8004dd0 <HAL_I2C_Mem_Write>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <write_register8+0x40>
		return false;
 8001446:	2300      	movs	r3, #0
 8001448:	e000      	b.n	800144c <write_register8+0x42>
	else
		return true;
 800144a:	2301      	movs	r3, #1
}
 800144c:	4618      	mov	r0, r3
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001462:	2b76      	cmp	r3, #118	@ 0x76
 8001464:	d005      	beq.n	8001472 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800146a:	2b77      	cmp	r3, #119	@ 0x77
 800146c:	d001      	beq.n	8001472 <bmp280_init+0x1e>

		return false;
 800146e:	2300      	movs	r3, #0
 8001470:	e099      	b.n	80015a6 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001478:	2301      	movs	r3, #1
 800147a:	21d0      	movs	r1, #208	@ 0xd0
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff feba 	bl	80011f6 <read_data>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <bmp280_init+0x38>
		return false;
 8001488:	2300      	movs	r3, #0
 800148a:	e08c      	b.n	80015a6 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001492:	2b58      	cmp	r3, #88	@ 0x58
 8001494:	d006      	beq.n	80014a4 <bmp280_init+0x50>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800149c:	2b60      	cmp	r3, #96	@ 0x60
 800149e:	d001      	beq.n	80014a4 <bmp280_init+0x50>

		return false;
 80014a0:	2300      	movs	r3, #0
 80014a2:	e080      	b.n	80015a6 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80014a4:	22b6      	movs	r2, #182	@ 0xb6
 80014a6:	21e0      	movs	r1, #224	@ 0xe0
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ffae 	bl	800140a <write_register8>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <bmp280_init+0x64>
		return false;
 80014b4:	2300      	movs	r3, #0
 80014b6:	e076      	b.n	80015a6 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 80014b8:	f107 020c 	add.w	r2, r7, #12
 80014bc:	2301      	movs	r3, #1
 80014be:	21f3      	movs	r1, #243	@ 0xf3
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff fe98 	bl	80011f6 <read_data>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1f5      	bne.n	80014b8 <bmp280_init+0x64>
				&& (status & 1) == 0)
 80014cc:	7b3b      	ldrb	r3, [r7, #12]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff feb5 	bl	8001246 <read_calibration_data>
 80014dc:	4603      	mov	r3, r0
 80014de:	f083 0301 	eor.w	r3, r3, #1
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d100      	bne.n	80014ea <bmp280_init+0x96>
 80014e8:	e001      	b.n	80014ee <bmp280_init+0x9a>
		return false;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e05b      	b.n	80015a6 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80014f4:	2b60      	cmp	r3, #96	@ 0x60
 80014f6:	d10a      	bne.n	800150e <bmp280_init+0xba>
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff ff26 	bl	800134a <read_hum_calibration_data>
 80014fe:	4603      	mov	r3, r0
 8001500:	f083 0301 	eor.w	r3, r3, #1
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <bmp280_init+0xba>
		return false;
 800150a:	2300      	movs	r3, #0
 800150c:	e04b      	b.n	80015a6 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	795b      	ldrb	r3, [r3, #5]
 8001512:	015b      	lsls	r3, r3, #5
 8001514:	b25a      	sxtb	r2, r3
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	785b      	ldrb	r3, [r3, #1]
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	b25b      	sxtb	r3, r3
 800151e:	4313      	orrs	r3, r2
 8001520:	b25b      	sxtb	r3, r3
 8001522:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	461a      	mov	r2, r3
 8001528:	21f5      	movs	r1, #245	@ 0xf5
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ff6d 	bl	800140a <write_register8>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <bmp280_init+0xe6>
		return false;
 8001536:	2300      	movs	r3, #0
 8001538:	e035      	b.n	80015a6 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d102      	bne.n	8001548 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	2200      	movs	r2, #0
 8001546:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	78db      	ldrb	r3, [r3, #3]
 800154c:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 800154e:	b25a      	sxtb	r2, r3
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	789b      	ldrb	r3, [r3, #2]
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	b25b      	sxtb	r3, r3
 8001558:	4313      	orrs	r3, r2
 800155a:	b25a      	sxtb	r2, r3
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b25b      	sxtb	r3, r3
 8001562:	4313      	orrs	r3, r2
 8001564:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001566:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800156e:	2b60      	cmp	r3, #96	@ 0x60
 8001570:	d10d      	bne.n	800158e <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	791b      	ldrb	r3, [r3, #4]
 8001576:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001578:	7b7b      	ldrb	r3, [r7, #13]
 800157a:	461a      	mov	r2, r3
 800157c:	21f2      	movs	r1, #242	@ 0xf2
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff ff43 	bl	800140a <write_register8>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <bmp280_init+0x13a>
			return false;
 800158a:	2300      	movs	r3, #0
 800158c:	e00b      	b.n	80015a6 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 800158e:	7bbb      	ldrb	r3, [r7, #14]
 8001590:	461a      	mov	r2, r3
 8001592:	21f4      	movs	r1, #244	@ 0xf4
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff ff38 	bl	800140a <write_register8>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <bmp280_init+0x150>
		return false;
 80015a0:	2300      	movs	r3, #0
 80015a2:	e000      	b.n	80015a6 <bmp280_init+0x152>
	}

	return true;
 80015a4:	2301      	movs	r3, #1
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 80015ae:	b480      	push	{r7}
 80015b0:	b087      	sub	sp, #28
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	60f8      	str	r0, [r7, #12]
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	10da      	asrs	r2, r3, #3
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80015cc:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80015d0:	12db      	asrs	r3, r3, #11
 80015d2:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	111b      	asrs	r3, r3, #4
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	8812      	ldrh	r2, [r2, #0]
 80015dc:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	1112      	asrs	r2, r2, #4
 80015e2:	68f9      	ldr	r1, [r7, #12]
 80015e4:	8809      	ldrh	r1, [r1, #0]
 80015e6:	1a52      	subs	r2, r2, r1
 80015e8:	fb02 f303 	mul.w	r3, r2, r3
 80015ec:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80015f4:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80015f8:	139b      	asrs	r3, r3, #14
 80015fa:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80015fc:	697a      	ldr	r2, [r7, #20]
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	441a      	add	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	4613      	mov	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	3380      	adds	r3, #128	@ 0x80
 8001612:	121b      	asrs	r3, r3, #8
}
 8001614:	4618      	mov	r0, r3
 8001616:	371c      	adds	r7, #28
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001624:	b0cc      	sub	sp, #304	@ 0x130
 8001626:	af00      	add	r7, sp, #0
 8001628:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 800162c:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 8001630:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001634:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001638:	17da      	asrs	r2, r3, #31
 800163a:	461c      	mov	r4, r3
 800163c:	4615      	mov	r5, r2
 800163e:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8001642:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001646:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 800164a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800164e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001652:	fb03 f102 	mul.w	r1, r3, r2
 8001656:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800165a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800165e:	fb02 f303 	mul.w	r3, r2, r3
 8001662:	18ca      	adds	r2, r1, r3
 8001664:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001668:	fba3 8903 	umull	r8, r9, r3, r3
 800166c:	eb02 0309 	add.w	r3, r2, r9
 8001670:	4699      	mov	r9, r3
 8001672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001676:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800167a:	b21b      	sxth	r3, r3
 800167c:	17da      	asrs	r2, r3, #31
 800167e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001682:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001686:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800168a:	4603      	mov	r3, r0
 800168c:	fb03 f209 	mul.w	r2, r3, r9
 8001690:	460b      	mov	r3, r1
 8001692:	fb08 f303 	mul.w	r3, r8, r3
 8001696:	4413      	add	r3, r2
 8001698:	4602      	mov	r2, r0
 800169a:	fba8 1202 	umull	r1, r2, r8, r2
 800169e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80016a2:	460a      	mov	r2, r1
 80016a4:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80016a8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80016ac:	4413      	add	r3, r2
 80016ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80016b2:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80016b6:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 80016ba:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80016be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80016c2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80016c6:	b21b      	sxth	r3, r3
 80016c8:	17da      	asrs	r2, r3, #31
 80016ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80016ce:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80016d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80016d6:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80016da:	462a      	mov	r2, r5
 80016dc:	fb02 f203 	mul.w	r2, r2, r3
 80016e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80016e4:	4621      	mov	r1, r4
 80016e6:	fb01 f303 	mul.w	r3, r1, r3
 80016ea:	441a      	add	r2, r3
 80016ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80016f0:	4621      	mov	r1, r4
 80016f2:	fba3 1301 	umull	r1, r3, r3, r1
 80016f6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80016fa:	460b      	mov	r3, r1
 80016fc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001704:	18d3      	adds	r3, r2, r3
 8001706:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800170a:	f04f 0000 	mov.w	r0, #0
 800170e:	f04f 0100 	mov.w	r1, #0
 8001712:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001716:	462b      	mov	r3, r5
 8001718:	0459      	lsls	r1, r3, #17
 800171a:	4623      	mov	r3, r4
 800171c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001720:	4623      	mov	r3, r4
 8001722:	0458      	lsls	r0, r3, #17
 8001724:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001728:	1814      	adds	r4, r2, r0
 800172a:	643c      	str	r4, [r7, #64]	@ 0x40
 800172c:	414b      	adcs	r3, r1
 800172e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001730:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001734:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800173c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001740:	b21b      	sxth	r3, r3
 8001742:	17da      	asrs	r2, r3, #31
 8001744:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001748:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800174c:	f04f 0000 	mov.w	r0, #0
 8001750:	f04f 0100 	mov.w	r1, #0
 8001754:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001758:	00d9      	lsls	r1, r3, #3
 800175a:	2000      	movs	r0, #0
 800175c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001760:	1814      	adds	r4, r2, r0
 8001762:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001764:	414b      	adcs	r3, r1
 8001766:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001768:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800176c:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001770:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001774:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001778:	fb03 f102 	mul.w	r1, r3, r2
 800177c:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001780:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001784:	fb02 f303 	mul.w	r3, r2, r3
 8001788:	18ca      	adds	r2, r1, r3
 800178a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800178e:	fba3 1303 	umull	r1, r3, r3, r3
 8001792:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001796:	460b      	mov	r3, r1
 8001798:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800179c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80017a0:	18d3      	adds	r3, r2, r3
 80017a2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80017a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80017aa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80017ae:	b21b      	sxth	r3, r3
 80017b0:	17da      	asrs	r2, r3, #31
 80017b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80017b6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80017ba:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80017be:	462b      	mov	r3, r5
 80017c0:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80017c4:	4642      	mov	r2, r8
 80017c6:	fb02 f203 	mul.w	r2, r2, r3
 80017ca:	464b      	mov	r3, r9
 80017cc:	4621      	mov	r1, r4
 80017ce:	fb01 f303 	mul.w	r3, r1, r3
 80017d2:	4413      	add	r3, r2
 80017d4:	4622      	mov	r2, r4
 80017d6:	4641      	mov	r1, r8
 80017d8:	fba2 1201 	umull	r1, r2, r2, r1
 80017dc:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80017e0:	460a      	mov	r2, r1
 80017e2:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80017e6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80017ea:	4413      	add	r3, r2
 80017ec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80017f0:	f04f 0000 	mov.w	r0, #0
 80017f4:	f04f 0100 	mov.w	r1, #0
 80017f8:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80017fc:	4623      	mov	r3, r4
 80017fe:	0a18      	lsrs	r0, r3, #8
 8001800:	462b      	mov	r3, r5
 8001802:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001806:	462b      	mov	r3, r5
 8001808:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 800180a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800180e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001812:	b21b      	sxth	r3, r3
 8001814:	17da      	asrs	r2, r3, #31
 8001816:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800181a:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800181e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001822:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001826:	464a      	mov	r2, r9
 8001828:	fb02 f203 	mul.w	r2, r2, r3
 800182c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001830:	4644      	mov	r4, r8
 8001832:	fb04 f303 	mul.w	r3, r4, r3
 8001836:	441a      	add	r2, r3
 8001838:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800183c:	4644      	mov	r4, r8
 800183e:	fba3 4304 	umull	r4, r3, r3, r4
 8001842:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001846:	4623      	mov	r3, r4
 8001848:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800184c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001850:	18d3      	adds	r3, r2, r3
 8001852:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	f04f 0300 	mov.w	r3, #0
 800185e:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8001862:	464c      	mov	r4, r9
 8001864:	0323      	lsls	r3, r4, #12
 8001866:	4644      	mov	r4, r8
 8001868:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800186c:	4644      	mov	r4, r8
 800186e:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001870:	1884      	adds	r4, r0, r2
 8001872:	633c      	str	r4, [r7, #48]	@ 0x30
 8001874:	eb41 0303 	adc.w	r3, r1, r3
 8001878:	637b      	str	r3, [r7, #52]	@ 0x34
 800187a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800187e:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001882:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001886:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 800188a:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 800188e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001896:	88db      	ldrh	r3, [r3, #6]
 8001898:	b29b      	uxth	r3, r3
 800189a:	2200      	movs	r2, #0
 800189c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80018a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80018a4:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80018a8:	462b      	mov	r3, r5
 80018aa:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80018ae:	4642      	mov	r2, r8
 80018b0:	fb02 f203 	mul.w	r2, r2, r3
 80018b4:	464b      	mov	r3, r9
 80018b6:	4621      	mov	r1, r4
 80018b8:	fb01 f303 	mul.w	r3, r1, r3
 80018bc:	4413      	add	r3, r2
 80018be:	4622      	mov	r2, r4
 80018c0:	4641      	mov	r1, r8
 80018c2:	fba2 1201 	umull	r1, r2, r2, r1
 80018c6:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80018ca:	460a      	mov	r2, r1
 80018cc:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80018d0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80018d4:	4413      	add	r3, r2
 80018d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80018e6:	4629      	mov	r1, r5
 80018e8:	104a      	asrs	r2, r1, #1
 80018ea:	4629      	mov	r1, r5
 80018ec:	17cb      	asrs	r3, r1, #31
 80018ee:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 80018f2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80018f6:	4313      	orrs	r3, r2
 80018f8:	d101      	bne.n	80018fe <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 80018fa:	2300      	movs	r3, #0
 80018fc:	e148      	b.n	8001b90 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 80018fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001902:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001906:	17da      	asrs	r2, r3, #31
 8001908:	62bb      	str	r3, [r7, #40]	@ 0x28
 800190a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800190c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001910:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001914:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001918:	105b      	asrs	r3, r3, #1
 800191a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800191e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001922:	07db      	lsls	r3, r3, #31
 8001924:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001928:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800192c:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001930:	4621      	mov	r1, r4
 8001932:	1a89      	subs	r1, r1, r2
 8001934:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001936:	4629      	mov	r1, r5
 8001938:	eb61 0303 	sbc.w	r3, r1, r3
 800193c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800193e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001942:	4622      	mov	r2, r4
 8001944:	462b      	mov	r3, r5
 8001946:	1891      	adds	r1, r2, r2
 8001948:	6239      	str	r1, [r7, #32]
 800194a:	415b      	adcs	r3, r3
 800194c:	627b      	str	r3, [r7, #36]	@ 0x24
 800194e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001952:	4621      	mov	r1, r4
 8001954:	1851      	adds	r1, r2, r1
 8001956:	61b9      	str	r1, [r7, #24]
 8001958:	4629      	mov	r1, r5
 800195a:	414b      	adcs	r3, r1
 800195c:	61fb      	str	r3, [r7, #28]
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800196a:	4649      	mov	r1, r9
 800196c:	018b      	lsls	r3, r1, #6
 800196e:	4641      	mov	r1, r8
 8001970:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001974:	4641      	mov	r1, r8
 8001976:	018a      	lsls	r2, r1, #6
 8001978:	4641      	mov	r1, r8
 800197a:	1889      	adds	r1, r1, r2
 800197c:	6139      	str	r1, [r7, #16]
 800197e:	4649      	mov	r1, r9
 8001980:	eb43 0101 	adc.w	r1, r3, r1
 8001984:	6179      	str	r1, [r7, #20]
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001992:	4649      	mov	r1, r9
 8001994:	008b      	lsls	r3, r1, #2
 8001996:	4641      	mov	r1, r8
 8001998:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800199c:	4641      	mov	r1, r8
 800199e:	008a      	lsls	r2, r1, #2
 80019a0:	4610      	mov	r0, r2
 80019a2:	4619      	mov	r1, r3
 80019a4:	4603      	mov	r3, r0
 80019a6:	4622      	mov	r2, r4
 80019a8:	189b      	adds	r3, r3, r2
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	460b      	mov	r3, r1
 80019ae:	462a      	mov	r2, r5
 80019b0:	eb42 0303 	adc.w	r3, r2, r3
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80019c2:	4649      	mov	r1, r9
 80019c4:	008b      	lsls	r3, r1, #2
 80019c6:	4641      	mov	r1, r8
 80019c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80019cc:	4641      	mov	r1, r8
 80019ce:	008a      	lsls	r2, r1, #2
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	4603      	mov	r3, r0
 80019d6:	4622      	mov	r2, r4
 80019d8:	189b      	adds	r3, r3, r2
 80019da:	673b      	str	r3, [r7, #112]	@ 0x70
 80019dc:	462b      	mov	r3, r5
 80019de:	460a      	mov	r2, r1
 80019e0:	eb42 0303 	adc.w	r3, r2, r3
 80019e4:	677b      	str	r3, [r7, #116]	@ 0x74
 80019e6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80019ea:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80019ee:	f7fe fe4b 	bl	8000688 <__aeabi_ldivmod>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 80019fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80019fe:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001a02:	b21b      	sxth	r3, r3
 8001a04:	17da      	asrs	r2, r3, #31
 8001a06:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001a08:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001a0a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001a0e:	f04f 0000 	mov.w	r0, #0
 8001a12:	f04f 0100 	mov.w	r1, #0
 8001a16:	0b50      	lsrs	r0, r2, #13
 8001a18:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001a1c:	1359      	asrs	r1, r3, #13
 8001a1e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001a22:	462b      	mov	r3, r5
 8001a24:	fb00 f203 	mul.w	r2, r0, r3
 8001a28:	4623      	mov	r3, r4
 8001a2a:	fb03 f301 	mul.w	r3, r3, r1
 8001a2e:	4413      	add	r3, r2
 8001a30:	4622      	mov	r2, r4
 8001a32:	fba2 1200 	umull	r1, r2, r2, r0
 8001a36:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001a3a:	460a      	mov	r2, r1
 8001a3c:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001a40:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001a44:	4413      	add	r3, r2
 8001a46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001a4a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001a4e:	f04f 0000 	mov.w	r0, #0
 8001a52:	f04f 0100 	mov.w	r1, #0
 8001a56:	0b50      	lsrs	r0, r2, #13
 8001a58:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001a5c:	1359      	asrs	r1, r3, #13
 8001a5e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001a62:	462b      	mov	r3, r5
 8001a64:	fb00 f203 	mul.w	r2, r0, r3
 8001a68:	4623      	mov	r3, r4
 8001a6a:	fb03 f301 	mul.w	r3, r3, r1
 8001a6e:	4413      	add	r3, r2
 8001a70:	4622      	mov	r2, r4
 8001a72:	fba2 1200 	umull	r1, r2, r2, r0
 8001a76:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001a7a:	460a      	mov	r2, r1
 8001a7c:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001a80:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001a84:	4413      	add	r3, r2
 8001a86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	f04f 0300 	mov.w	r3, #0
 8001a92:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001a96:	4621      	mov	r1, r4
 8001a98:	0e4a      	lsrs	r2, r1, #25
 8001a9a:	4629      	mov	r1, r5
 8001a9c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001aa0:	4629      	mov	r1, r5
 8001aa2:	164b      	asrs	r3, r1, #25
 8001aa4:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001aac:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001ab0:	b21b      	sxth	r3, r3
 8001ab2:	17da      	asrs	r2, r3, #31
 8001ab4:	663b      	str	r3, [r7, #96]	@ 0x60
 8001ab6:	667a      	str	r2, [r7, #100]	@ 0x64
 8001ab8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001abc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001ac0:	462a      	mov	r2, r5
 8001ac2:	fb02 f203 	mul.w	r2, r2, r3
 8001ac6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001aca:	4621      	mov	r1, r4
 8001acc:	fb01 f303 	mul.w	r3, r1, r3
 8001ad0:	4413      	add	r3, r2
 8001ad2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001ad6:	4621      	mov	r1, r4
 8001ad8:	fba2 1201 	umull	r1, r2, r2, r1
 8001adc:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001ae0:	460a      	mov	r2, r1
 8001ae2:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001ae6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001aea:	4413      	add	r3, r2
 8001aec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	f04f 0300 	mov.w	r3, #0
 8001af8:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001afc:	4621      	mov	r1, r4
 8001afe:	0cca      	lsrs	r2, r1, #19
 8001b00:	4629      	mov	r1, r5
 8001b02:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001b06:	4629      	mov	r1, r5
 8001b08:	14cb      	asrs	r3, r1, #19
 8001b0a:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001b0e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8001b12:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001b16:	1884      	adds	r4, r0, r2
 8001b18:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001b1a:	eb41 0303 	adc.w	r3, r1, r3
 8001b1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001b20:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001b24:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001b28:	4621      	mov	r1, r4
 8001b2a:	1889      	adds	r1, r1, r2
 8001b2c:	6539      	str	r1, [r7, #80]	@ 0x50
 8001b2e:	4629      	mov	r1, r5
 8001b30:	eb43 0101 	adc.w	r1, r3, r1
 8001b34:	6579      	str	r1, [r7, #84]	@ 0x54
 8001b36:	f04f 0000 	mov.w	r0, #0
 8001b3a:	f04f 0100 	mov.w	r1, #0
 8001b3e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001b42:	4623      	mov	r3, r4
 8001b44:	0a18      	lsrs	r0, r3, #8
 8001b46:	462b      	mov	r3, r5
 8001b48:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001b4c:	462b      	mov	r3, r5
 8001b4e:	1219      	asrs	r1, r3, #8
 8001b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001b54:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001b58:	b21b      	sxth	r3, r3
 8001b5a:	17da      	asrs	r2, r3, #31
 8001b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001b5e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001b6c:	464c      	mov	r4, r9
 8001b6e:	0123      	lsls	r3, r4, #4
 8001b70:	4644      	mov	r4, r8
 8001b72:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001b76:	4644      	mov	r4, r8
 8001b78:	0122      	lsls	r2, r4, #4
 8001b7a:	1884      	adds	r4, r0, r2
 8001b7c:	603c      	str	r4, [r7, #0]
 8001b7e:	eb41 0303 	adc.w	r3, r1, r3
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001b88:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 8001b8c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001b96:	46bd      	mov	sp, r7
 8001b98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001b9c <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001b9c:	b480      	push	{r7}
 8001b9e:	b087      	sub	sp, #28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001bae:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	039a      	lsls	r2, r3, #14
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001bba:	051b      	lsls	r3, r3, #20
 8001bbc:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	fb01 f303 	mul.w	r3, r1, r3
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001bd2:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001bda:	4611      	mov	r1, r2
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	fb01 f202 	mul.w	r2, r1, r2
 8001be2:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001be4:	68f9      	ldr	r1, [r7, #12]
 8001be6:	7f09      	ldrb	r1, [r1, #28]
 8001be8:	4608      	mov	r0, r1
 8001bea:	6979      	ldr	r1, [r7, #20]
 8001bec:	fb00 f101 	mul.w	r1, r0, r1
 8001bf0:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001bf2:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001bf6:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001bfa:	1292      	asrs	r2, r2, #10
 8001bfc:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001c00:	68f9      	ldr	r1, [r7, #12]
 8001c02:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001c06:	fb01 f202 	mul.w	r2, r1, r2
 8001c0a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001c0e:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001c10:	fb02 f303 	mul.w	r3, r2, r3
 8001c14:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	13db      	asrs	r3, r3, #15
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	13d2      	asrs	r2, r2, #15
 8001c1e:	fb02 f303 	mul.w	r3, r2, r3
 8001c22:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	7e12      	ldrb	r2, [r2, #24]
 8001c28:	fb02 f303 	mul.w	r3, r2, r3
 8001c2c:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001c3a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001c42:	bfa8      	it	ge
 8001c44:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001c48:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	131b      	asrs	r3, r3, #12
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	371c      	adds	r7, #28
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b08c      	sub	sp, #48	@ 0x30
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	60f8      	str	r0, [r7, #12]
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	607a      	str	r2, [r7, #4]
 8001c66:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001c6e:	2b60      	cmp	r3, #96	@ 0x60
 8001c70:	d007      	beq.n	8001c82 <bmp280_read_fixed+0x28>
		if (humidity)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d002      	beq.n	8001c7e <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <bmp280_read_fixed+0x32>
 8001c88:	2308      	movs	r3, #8
 8001c8a:	e000      	b.n	8001c8e <bmp280_read_fixed+0x34>
 8001c8c:	2306      	movs	r3, #6
 8001c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	f107 0218 	add.w	r2, r7, #24
 8001c98:	21f7      	movs	r1, #247	@ 0xf7
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f7ff faab 	bl	80011f6 <read_data>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <bmp280_read_fixed+0x50>
		return false;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	e038      	b.n	8001d1c <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001caa:	7e3b      	ldrb	r3, [r7, #24]
 8001cac:	031a      	lsls	r2, r3, #12
 8001cae:	7e7b      	ldrb	r3, [r7, #25]
 8001cb0:	011b      	lsls	r3, r3, #4
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	7eba      	ldrb	r2, [r7, #26]
 8001cb6:	0912      	lsrs	r2, r2, #4
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001cbe:	7efb      	ldrb	r3, [r7, #27]
 8001cc0:	031a      	lsls	r2, r3, #12
 8001cc2:	7f3b      	ldrb	r3, [r7, #28]
 8001cc4:	011b      	lsls	r3, r3, #4
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	7f7a      	ldrb	r2, [r7, #29]
 8001cca:	0912      	lsrs	r2, r2, #4
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f7ff fc67 	bl	80015ae <compensate_temperature>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f7ff fc97 	bl	8001620 <compensate_pressure>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00d      	beq.n	8001d1a <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001cfe:	7fbb      	ldrb	r3, [r7, #30]
 8001d00:	021b      	lsls	r3, r3, #8
 8001d02:	7ffa      	ldrb	r2, [r7, #31]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	6a39      	ldr	r1, [r7, #32]
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f7ff ff44 	bl	8001b9c <compensate_humidity>
 8001d14:	4602      	mov	r2, r0
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001d1a:	2301      	movs	r3, #1
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3730      	adds	r7, #48	@ 0x30
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b088      	sub	sp, #32
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
 8001d30:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d002      	beq.n	8001d3e <bmp280_read_float+0x1a>
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	e000      	b.n	8001d40 <bmp280_read_float+0x1c>
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f107 0218 	add.w	r2, r7, #24
 8001d44:	f107 011c 	add.w	r1, r7, #28
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f7ff ff86 	bl	8001c5a <bmp280_read_fixed>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d028      	beq.n	8001da6 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	ee07 3a90 	vmov	s15, r3
 8001d5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d5e:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001db0 <bmp280_read_float+0x8c>
 8001d62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	ee07 3a90 	vmov	s15, r3
 8001d72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d76:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001db4 <bmp280_read_float+0x90>
 8001d7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00b      	beq.n	8001da2 <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	ee07 3a90 	vmov	s15, r3
 8001d90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d94:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001db8 <bmp280_read_float+0x94>
 8001d98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e000      	b.n	8001da8 <bmp280_read_float+0x84>
	}

	return false;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3720      	adds	r7, #32
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	42c80000 	.word	0x42c80000
 8001db4:	43800000 	.word	0x43800000
 8001db8:	44800000 	.word	0x44800000

08001dbc <handle_beep>:
    { "eps_charging", handle_eps_charging },
    { NULL, NULL }
};

// handlers com placeholders
void handle_beep(const char *target, const char *cmd_id, const char *params) {
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
	int targetID = atoi(target);
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f00a fa2f 	bl	800c22c <atoi>
 8001dce:	61f8      	str	r0, [r7, #28]
	int commandID = atoi(cmd_id);
 8001dd0:	68b8      	ldr	r0, [r7, #8]
 8001dd2:	f00a fa2b 	bl	800c22c <atoi>
 8001dd6:	61b8      	str	r0, [r7, #24]
	int n = atoi(params);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f00a fa27 	bl	800c22c <atoi>
 8001dde:	6178      	str	r0, [r7, #20]
	Buzzer_PWM_Init(&htim1, TIM_CHANNEL_1);
 8001de0:	2100      	movs	r1, #0
 8001de2:	4806      	ldr	r0, [pc, #24]	@ (8001dfc <handle_beep+0x40>)
 8001de4:	f002 fa26 	bl	8004234 <Buzzer_PWM_Init>
	init_buzzer(targetID, commandID, params, n);
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	69b9      	ldr	r1, [r7, #24]
 8001dee:	69f8      	ldr	r0, [r7, #28]
 8001df0:	f002 fa70 	bl	80042d4 <init_buzzer>
}
 8001df4:	bf00      	nop
 8001df6:	3720      	adds	r7, #32
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	200009b4 	.word	0x200009b4

08001e00 <handle_beep_stop>:

void handle_beep_stop(const char *target, const char *cmd_id, const char *params) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
	int targetID = atoi(target);
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f00a fa0d 	bl	800c22c <atoi>
 8001e12:	6178      	str	r0, [r7, #20]
	int commandID = atoi(cmd_id);
 8001e14:	68b8      	ldr	r0, [r7, #8]
 8001e16:	f00a fa09 	bl	800c22c <atoi>
 8001e1a:	6138      	str	r0, [r7, #16]
	stop_buzzer(targetID,commandID, params);
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6939      	ldr	r1, [r7, #16]
 8001e20:	6978      	ldr	r0, [r7, #20]
 8001e22:	f002 fa9b 	bl	800435c <stop_buzzer>
}
 8001e26:	bf00      	nop
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <handle_morse>:

void handle_morse(const char *target, const char *cmd_id, const char *params) {
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b084      	sub	sp, #16
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	60f8      	str	r0, [r7, #12]
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	607a      	str	r2, [r7, #4]
	morse(params);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f002 fac4 	bl	80043c8 <morse>
}
 8001e40:	bf00      	nop
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <handle_WhoAmI>:



void handle_WhoAmI(const char *target, const char *cmd_id, const char *params) {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
    printf("WHOAMI: Node ID\n");
 8001e54:	4803      	ldr	r0, [pc, #12]	@ (8001e64 <handle_WhoAmI+0x1c>)
 8001e56:	f00b f9e1 	bl	800d21c <puts>
}
 8001e5a:	bf00      	nop
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	08010ca0 	.word	0x08010ca0

08001e68 <handle_ping_local>:

void handle_ping_local(const char *target, const char *cmd_id, const char *params) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
    printf("PING LOCAL OK\n");
 8001e74:	4803      	ldr	r0, [pc, #12]	@ (8001e84 <handle_ping_local+0x1c>)
 8001e76:	f00b f9d1 	bl	800d21c <puts>
}
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	08010cb0 	.word	0x08010cb0

08001e88 <handle_ping>:

void handle_ping(const char *target, const char *cmd_id, const char *params) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
    printf("PING TO %s\n", params);
 8001e94:	6879      	ldr	r1, [r7, #4]
 8001e96:	4803      	ldr	r0, [pc, #12]	@ (8001ea4 <handle_ping+0x1c>)
 8001e98:	f00b f958 	bl	800d14c <iprintf>
}
 8001e9c:	bf00      	nop
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	08010cc0 	.word	0x08010cc0

08001ea8 <handle_reset>:

void handle_reset(const char *target, const char *cmd_id, const char *params) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
    printf("SYSTEM RESET\n");
 8001eb4:	4803      	ldr	r0, [pc, #12]	@ (8001ec4 <handle_reset+0x1c>)
 8001eb6:	f00b f9b1 	bl	800d21c <puts>
}
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	08010ccc 	.word	0x08010ccc

08001ec8 <handle_get_version>:

void handle_get_version(const char *target, const char *cmd_id, const char *params) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
    printf("VERSION 1.0\n");
 8001ed4:	4803      	ldr	r0, [pc, #12]	@ (8001ee4 <handle_get_version+0x1c>)
 8001ed6:	f00b f9a1 	bl	800d21c <puts>
}
 8001eda:	bf00      	nop
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	08010cdc 	.word	0x08010cdc

08001ee8 <handle_get_status>:

void handle_get_status(const char *target, const char *cmd_id, const char *params) {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
    printf("STATUS: OK\n");
 8001ef4:	4803      	ldr	r0, [pc, #12]	@ (8001f04 <handle_get_status+0x1c>)
 8001ef6:	f00b f991 	bl	800d21c <puts>
}
 8001efa:	bf00      	nop
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	08010ce8 	.word	0x08010ce8

08001f08 <handle_cam_list>:


// ARDUCam
void handle_cam_list(const char *target, const char *cmd_id, const char *params) {}
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
 8001f14:	bf00      	nop
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <handle_cam_num_blocks>:
void handle_cam_num_blocks(const char *target, const char *cmd_id, const char *params) {}
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <handle_cam_get_blocks>:
void handle_cam_get_blocks(const char *target, const char *cmd_id, const char *params) {}
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
 8001f44:	bf00      	nop
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <handle_cam_take_pic>:
void handle_cam_take_pic(const char *target, const char *cmd_id, const char *params) {}
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <handle_cam_stream>:
void handle_cam_stream(const char *target, const char *cmd_id, const char *params) {}
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <handle_cam_get_latest>:
void handle_cam_get_latest(const char *target, const char *cmd_id, const char *params) {}
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <handle_gps_get_time>:

// GPS
void handle_gps_get_time(const char *target, const char *cmd_id, const char *params) {}
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
 8001fa4:	bf00      	nop
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <handle_gps_get_location>:
void handle_gps_get_location(const char *target, const char *cmd_id, const char *params) {}
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
 8001fbc:	bf00      	nop
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <handle_gps_get_velocity>:
void handle_gps_get_velocity(const char *target, const char *cmd_id, const char *params) {}
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
 8001fd4:	bf00      	nop
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <handle_gps_get_altitude>:
void handle_gps_get_altitude(const char *target, const char *cmd_id, const char *params) {}
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
 8001fec:	bf00      	nop
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <handle_gps_fix>:
void handle_gps_fix(const char *target, const char *cmd_id, const char *params) {}
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
 8002004:	bf00      	nop
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <handle_gps_get_all>:
void handle_gps_get_all(const char *target, const char *cmd_id, const char *params) {}
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
 800201c:	bf00      	nop
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <handle_bmp_get_temp>:


// BMP
void handle_bmp_get_temp(const char *target, const char *cmd_id, const char *params) {
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
	int targetID = atoi(target);
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f00a f8f9 	bl	800c22c <atoi>
 800203a:	6178      	str	r0, [r7, #20]
	init_bmp280(targetID);
 800203c:	6978      	ldr	r0, [r7, #20]
 800203e:	f001 fedd 	bl	8003dfc <init_bmp280>
	temperature = read_temp();
 8002042:	f001 ff4f 	bl	8003ee4 <read_temp>
 8002046:	eef0 7a40 	vmov.f32	s15, s0
 800204a:	4b03      	ldr	r3, [pc, #12]	@ (8002058 <handle_bmp_get_temp+0x30>)
 800204c:	edc3 7a00 	vstr	s15, [r3]
}
 8002050:	bf00      	nop
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20000b44 	.word	0x20000b44

0800205c <handle_bmp_get_pres>:

void handle_bmp_get_pres(const char *target, const char *cmd_id, const char *params) {
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
	int targetID = atoi(target);
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f00a f8df 	bl	800c22c <atoi>
 800206e:	6178      	str	r0, [r7, #20]
	init_bmp280(targetID);
 8002070:	6978      	ldr	r0, [r7, #20]
 8002072:	f001 fec3 	bl	8003dfc <init_bmp280>
	pressure = read_pressure();
 8002076:	f001 ff77 	bl	8003f68 <read_pressure>
 800207a:	eef0 7a40 	vmov.f32	s15, s0
 800207e:	4b03      	ldr	r3, [pc, #12]	@ (800208c <handle_bmp_get_pres+0x30>)
 8002080:	edc3 7a00 	vstr	s15, [r3]
}
 8002084:	bf00      	nop
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20000b48 	.word	0x20000b48

08002090 <handle_bmp_get_all>:
void handle_bmp_get_all(const char *target, const char *cmd_id, const char *params) {
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
	int targetID = atoi(target);
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f00a f8c5 	bl	800c22c <atoi>
 80020a2:	6178      	str	r0, [r7, #20]
	init_bmp280(targetID);
 80020a4:	6978      	ldr	r0, [r7, #20]
 80020a6:	f001 fea9 	bl	8003dfc <init_bmp280>
	pressure = read_pressure();
 80020aa:	f001 ff5d 	bl	8003f68 <read_pressure>
 80020ae:	eef0 7a40 	vmov.f32	s15, s0
 80020b2:	4b07      	ldr	r3, [pc, #28]	@ (80020d0 <handle_bmp_get_all+0x40>)
 80020b4:	edc3 7a00 	vstr	s15, [r3]
	temperature = read_temp();
 80020b8:	f001 ff14 	bl	8003ee4 <read_temp>
 80020bc:	eef0 7a40 	vmov.f32	s15, s0
 80020c0:	4b04      	ldr	r3, [pc, #16]	@ (80020d4 <handle_bmp_get_all+0x44>)
 80020c2:	edc3 7a00 	vstr	s15, [r3]
}
 80020c6:	bf00      	nop
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000b48 	.word	0x20000b48
 80020d4:	20000b44 	.word	0x20000b44

080020d8 <handle_imu_get_mag>:

// IMU
void handle_imu_get_mag(const char *target, const char *cmd_id, const char *params) {
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
	int targetID = atoi(target);
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f00a f8a1 	bl	800c22c <atoi>
 80020ea:	6178      	str	r0, [r7, #20]
	init_imu(targetID);
 80020ec:	6978      	ldr	r0, [r7, #20]
 80020ee:	f001 ff99 	bl	8004024 <init_imu>
	//EM FALTAAAAAAAAAAAA
}
 80020f2:	bf00      	nop
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <handle_imu_get_gyr>:
void handle_imu_get_gyr(const char *target, const char *cmd_id, const char *params) {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08c      	sub	sp, #48	@ 0x30
 8002100:	af06      	add	r7, sp, #24
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
	int targetID = atoi(target);
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f00a f88f 	bl	800c22c <atoi>
 800210e:	6178      	str	r0, [r7, #20]
	init_imu(targetID);
 8002110:	6978      	ldr	r0, [r7, #20]
 8002112:	f001 ff87 	bl	8004024 <init_imu>
	if (ICM20608_ReadAll(&imu) == HAL_OK){
 8002116:	4816      	ldr	r0, [pc, #88]	@ (8002170 <handle_imu_get_gyr+0x74>)
 8002118:	f000 fdbe 	bl	8002c98 <ICM20608_ReadAll>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d121      	bne.n	8002166 <handle_imu_get_gyr+0x6a>
		int len = snprintf(debugMsg, sizeof(debugMsg), "Gx: %.2f Gy: %.2f Gz: %.2f\n", imu.gyro_x, imu.gyro_y, imu.gyro_z);
 8002122:	4b13      	ldr	r3, [pc, #76]	@ (8002170 <handle_imu_get_gyr+0x74>)
 8002124:	edd3 7a03 	vldr	s15, [r3, #12]
 8002128:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800212c:	4b10      	ldr	r3, [pc, #64]	@ (8002170 <handle_imu_get_gyr+0x74>)
 800212e:	edd3 6a04 	vldr	s13, [r3, #16]
 8002132:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002136:	4b0e      	ldr	r3, [pc, #56]	@ (8002170 <handle_imu_get_gyr+0x74>)
 8002138:	edd3 5a05 	vldr	s11, [r3, #20]
 800213c:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8002140:	ed8d 5b04 	vstr	d5, [sp, #16]
 8002144:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002148:	ed8d 7b00 	vstr	d7, [sp]
 800214c:	4a09      	ldr	r2, [pc, #36]	@ (8002174 <handle_imu_get_gyr+0x78>)
 800214e:	2180      	movs	r1, #128	@ 0x80
 8002150:	4809      	ldr	r0, [pc, #36]	@ (8002178 <handle_imu_get_gyr+0x7c>)
 8002152:	f00b f86b 	bl	800d22c <sniprintf>
 8002156:	6138      	str	r0, [r7, #16]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*)debugMsg, len);
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	b29b      	uxth	r3, r3
 800215c:	461a      	mov	r2, r3
 800215e:	4906      	ldr	r1, [pc, #24]	@ (8002178 <handle_imu_get_gyr+0x7c>)
 8002160:	4806      	ldr	r0, [pc, #24]	@ (800217c <handle_imu_get_gyr+0x80>)
 8002162:	f006 fcc5 	bl	8008af0 <HAL_UART_Transmit_IT>
	}
}
 8002166:	bf00      	nop
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20000b10 	.word	0x20000b10
 8002174:	08010cf4 	.word	0x08010cf4
 8002178:	20000b50 	.word	0x20000b50
 800217c:	20000a00 	.word	0x20000a00

08002180 <handle_imu_get_acc>:
void handle_imu_get_acc(const char *target, const char *cmd_id, const char *params) {
 8002180:	b580      	push	{r7, lr}
 8002182:	b08c      	sub	sp, #48	@ 0x30
 8002184:	af06      	add	r7, sp, #24
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
	int targetID = atoi(target);
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f00a f84d 	bl	800c22c <atoi>
 8002192:	6178      	str	r0, [r7, #20]
	init_imu(targetID);
 8002194:	6978      	ldr	r0, [r7, #20]
 8002196:	f001 ff45 	bl	8004024 <init_imu>
	if (ICM20608_ReadAll(&imu) == HAL_OK){
 800219a:	4816      	ldr	r0, [pc, #88]	@ (80021f4 <handle_imu_get_acc+0x74>)
 800219c:	f000 fd7c 	bl	8002c98 <ICM20608_ReadAll>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d121      	bne.n	80021ea <handle_imu_get_acc+0x6a>
		int len = snprintf(debugMsg, sizeof(debugMsg),"Ax: %.2f Ay: %.2f Az: %.2f\n", imu.accel_x, imu.accel_y, imu.accel_z);
 80021a6:	4b13      	ldr	r3, [pc, #76]	@ (80021f4 <handle_imu_get_acc+0x74>)
 80021a8:	edd3 7a00 	vldr	s15, [r3]
 80021ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021b0:	4b10      	ldr	r3, [pc, #64]	@ (80021f4 <handle_imu_get_acc+0x74>)
 80021b2:	edd3 6a01 	vldr	s13, [r3, #4]
 80021b6:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80021ba:	4b0e      	ldr	r3, [pc, #56]	@ (80021f4 <handle_imu_get_acc+0x74>)
 80021bc:	edd3 5a02 	vldr	s11, [r3, #8]
 80021c0:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 80021c4:	ed8d 5b04 	vstr	d5, [sp, #16]
 80021c8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80021cc:	ed8d 7b00 	vstr	d7, [sp]
 80021d0:	4a09      	ldr	r2, [pc, #36]	@ (80021f8 <handle_imu_get_acc+0x78>)
 80021d2:	2180      	movs	r1, #128	@ 0x80
 80021d4:	4809      	ldr	r0, [pc, #36]	@ (80021fc <handle_imu_get_acc+0x7c>)
 80021d6:	f00b f829 	bl	800d22c <sniprintf>
 80021da:	6138      	str	r0, [r7, #16]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*)debugMsg, len);
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	b29b      	uxth	r3, r3
 80021e0:	461a      	mov	r2, r3
 80021e2:	4906      	ldr	r1, [pc, #24]	@ (80021fc <handle_imu_get_acc+0x7c>)
 80021e4:	4806      	ldr	r0, [pc, #24]	@ (8002200 <handle_imu_get_acc+0x80>)
 80021e6:	f006 fc83 	bl	8008af0 <HAL_UART_Transmit_IT>
	}
}
 80021ea:	bf00      	nop
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20000b10 	.word	0x20000b10
 80021f8:	08010d10 	.word	0x08010d10
 80021fc:	20000b50 	.word	0x20000b50
 8002200:	20000a00 	.word	0x20000a00

08002204 <handle_imu_calibrate>:
void handle_imu_calibrate(const char *target, const char *cmd_id, const char *params) {
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
	int targetID = atoi(target);
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f00a f80b 	bl	800c22c <atoi>
 8002216:	6178      	str	r0, [r7, #20]
	init_imu(targetID);
 8002218:	6978      	ldr	r0, [r7, #20]
 800221a:	f001 ff03 	bl	8004024 <init_imu>
	printf("Calibrate IMU...\n");
 800221e:	4805      	ldr	r0, [pc, #20]	@ (8002234 <handle_imu_calibrate+0x30>)
 8002220:	f00a fffc 	bl	800d21c <puts>
	ICM20608_Calibrate(&imu_calib, 100);
 8002224:	2164      	movs	r1, #100	@ 0x64
 8002226:	4804      	ldr	r0, [pc, #16]	@ (8002238 <handle_imu_calibrate+0x34>)
 8002228:	f000 fdf0 	bl	8002e0c <ICM20608_Calibrate>
}
 800222c:	bf00      	nop
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	08010d2c 	.word	0x08010d2c
 8002238:	20000b2c 	.word	0x20000b2c

0800223c <handle_imu_get_all>:

void handle_imu_get_all(const char *target, const char *cmd_id, const char *params) {
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
	int targetID = atoi(target);
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f009 ffef 	bl	800c22c <atoi>
 800224e:	6178      	str	r0, [r7, #20]
	init_imu(targetID);
 8002250:	6978      	ldr	r0, [r7, #20]
 8002252:	f001 fee7 	bl	8004024 <init_imu>
	read_imu();
 8002256:	f001 ff11 	bl	800407c <read_imu>
}
 800225a:	bf00      	nop
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <handle_rf_get_temp>:

// RF
void handle_rf_get_temp(const char *target, const char *cmd_id, const char *params) {}
 8002262:	b480      	push	{r7}
 8002264:	b085      	sub	sp, #20
 8002266:	af00      	add	r7, sp, #0
 8002268:	60f8      	str	r0, [r7, #12]
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	607a      	str	r2, [r7, #4]
 800226e:	bf00      	nop
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <handle_rf_get_rssi>:
void handle_rf_get_rssi(const char *target, const char *cmd_id, const char *params) {}
 800227a:	b480      	push	{r7}
 800227c:	b085      	sub	sp, #20
 800227e:	af00      	add	r7, sp, #0
 8002280:	60f8      	str	r0, [r7, #12]
 8002282:	60b9      	str	r1, [r7, #8]
 8002284:	607a      	str	r2, [r7, #4]
 8002286:	bf00      	nop
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <handle_led_off>:

// LED
void handle_led_off(const char *target, const char *cmd_id, const char *params) {}
 8002292:	b480      	push	{r7}
 8002294:	b085      	sub	sp, #20
 8002296:	af00      	add	r7, sp, #0
 8002298:	60f8      	str	r0, [r7, #12]
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	607a      	str	r2, [r7, #4]
 800229e:	bf00      	nop
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <handle_led_on>:
void handle_led_on(const char *target, const char *cmd_id, const char *params) {}
 80022aa:	b480      	push	{r7}
 80022ac:	b085      	sub	sp, #20
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	60f8      	str	r0, [r7, #12]
 80022b2:	60b9      	str	r1, [r7, #8]
 80022b4:	607a      	str	r2, [r7, #4]
 80022b6:	bf00      	nop
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <handle_reset_local>:

// RESET
void handle_reset_local(const char *target, const char *cmd_id, const char *params) {}
 80022c2:	b480      	push	{r7}
 80022c4:	b085      	sub	sp, #20
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	60f8      	str	r0, [r7, #12]
 80022ca:	60b9      	str	r1, [r7, #8]
 80022cc:	607a      	str	r2, [r7, #4]
 80022ce:	bf00      	nop
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <handle_gs_set_nodeid>:

// GROUND STATION
void handle_gs_set_nodeid(const char *target, const char *cmd_id, const char *params) {}
 80022da:	b480      	push	{r7}
 80022dc:	b085      	sub	sp, #20
 80022de:	af00      	add	r7, sp, #0
 80022e0:	60f8      	str	r0, [r7, #12]
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
 80022e6:	bf00      	nop
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <handle_gs_get_nodeid>:
void handle_gs_get_nodeid(const char *target, const char *cmd_id, const char *params) {}
 80022f2:	b480      	push	{r7}
 80022f4:	b085      	sub	sp, #20
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	60f8      	str	r0, [r7, #12]
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	607a      	str	r2, [r7, #4]
 80022fe:	bf00      	nop
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <handle_gs_get_RSSI>:
void handle_gs_get_RSSI(const char *target, const char *cmd_id, const char *params) {}
 800230a:	b480      	push	{r7}
 800230c:	b085      	sub	sp, #20
 800230e:	af00      	add	r7, sp, #0
 8002310:	60f8      	str	r0, [r7, #12]
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
 8002316:	bf00      	nop
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <handle_gs_set_network>:
void handle_gs_set_network(const char *target, const char *cmd_id, const char *params) {}
 8002322:	b480      	push	{r7}
 8002324:	b085      	sub	sp, #20
 8002326:	af00      	add	r7, sp, #0
 8002328:	60f8      	str	r0, [r7, #12]
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	607a      	str	r2, [r7, #4]
 800232e:	bf00      	nop
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <handle_reset_gs>:
void handle_reset_gs(const char *target, const char *cmd_id, const char *params) {}
 800233a:	b480      	push	{r7}
 800233c:	b085      	sub	sp, #20
 800233e:	af00      	add	r7, sp, #0
 8002340:	60f8      	str	r0, [r7, #12]
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	607a      	str	r2, [r7, #4]
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <handle_eps_get_voltage>:

// EPS
void handle_eps_get_voltage(const char *target, const char *cmd_id, const char *params) {}
 8002352:	b480      	push	{r7}
 8002354:	b085      	sub	sp, #20
 8002356:	af00      	add	r7, sp, #0
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	607a      	str	r2, [r7, #4]
 800235e:	bf00      	nop
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <handle_eps_measure>:
void handle_eps_measure(const char *target, const char *cmd_id, const char *params) {}
 800236a:	b480      	push	{r7}
 800236c:	b085      	sub	sp, #20
 800236e:	af00      	add	r7, sp, #0
 8002370:	60f8      	str	r0, [r7, #12]
 8002372:	60b9      	str	r1, [r7, #8]
 8002374:	607a      	str	r2, [r7, #4]
 8002376:	bf00      	nop
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <handle_eps_get_sp_voltage>:
void handle_eps_get_sp_voltage(const char *target, const char *cmd_id, const char *params) {}
 8002382:	b480      	push	{r7}
 8002384:	b085      	sub	sp, #20
 8002386:	af00      	add	r7, sp, #0
 8002388:	60f8      	str	r0, [r7, #12]
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	bf00      	nop
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <handle_eps_get_sp_current>:
void handle_eps_get_sp_current(const char *target, const char *cmd_id, const char *params) {}
 800239a:	b480      	push	{r7}
 800239c:	b085      	sub	sp, #20
 800239e:	af00      	add	r7, sp, #0
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
 80023a6:	bf00      	nop
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <handle_sd_card_connected>:
void handle_sd_card_connected(const char *target, const char *cmd_id, const char *params) {}
 80023b2:	b480      	push	{r7}
 80023b4:	b085      	sub	sp, #20
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	607a      	str	r2, [r7, #4]
 80023be:	bf00      	nop
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <handle_rbf_connected>:
void handle_rbf_connected(const char *target, const char *cmd_id, const char *params) {}
 80023ca:	b480      	push	{r7}
 80023cc:	b085      	sub	sp, #20
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	60f8      	str	r0, [r7, #12]
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	607a      	str	r2, [r7, #4]
 80023d6:	bf00      	nop
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <handle_eps_charging>:
void handle_eps_charging(const char *target, const char *cmd_id, const char *params) {}
 80023e2:	b480      	push	{r7}
 80023e4:	b085      	sub	sp, #20
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	60f8      	str	r0, [r7, #12]
 80023ea:	60b9      	str	r1, [r7, #8]
 80023ec:	607a      	str	r2, [r7, #4]
 80023ee:	bf00      	nop
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
	...

080023fc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4a07      	ldr	r2, [pc, #28]	@ (8002428 <vApplicationGetIdleTaskMemory+0x2c>)
 800240c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	4a06      	ldr	r2, [pc, #24]	@ (800242c <vApplicationGetIdleTaskMemory+0x30>)
 8002412:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2280      	movs	r2, #128	@ 0x80
 8002418:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800241a:	bf00      	nop
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	20000448 	.word	0x20000448
 800242c:	200004e8 	.word	0x200004e8

08002430 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002430:	b5b0      	push	{r4, r5, r7, lr}
 8002432:	b09e      	sub	sp, #120	@ 0x78
 8002434:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of uartRxQueue */
  osMessageQDef(uartRxQueue, 10, UART_Command_t);
 8002436:	4b2c      	ldr	r3, [pc, #176]	@ (80024e8 <MX_FREERTOS_Init+0xb8>)
 8002438:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 800243c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800243e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uartRxQueueHandle = osMessageCreate(osMessageQ(uartRxQueue), NULL);
 8002442:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002446:	2100      	movs	r1, #0
 8002448:	4618      	mov	r0, r3
 800244a:	f007 ff7f 	bl	800a34c <osMessageCreate>
 800244e:	4603      	mov	r3, r0
 8002450:	4a26      	ldr	r2, [pc, #152]	@ (80024ec <MX_FREERTOS_Init+0xbc>)
 8002452:	6013      	str	r3, [r2, #0]

  /* definition and creation of commandExecQueue */
  osMessageQDef(commandExecQueue, 10, uint16_t);
 8002454:	4b26      	ldr	r3, [pc, #152]	@ (80024f0 <MX_FREERTOS_Init+0xc0>)
 8002456:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800245a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800245c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  commandExecQueueHandle = osMessageCreate(osMessageQ(commandExecQueue), NULL);
 8002460:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002464:	2100      	movs	r1, #0
 8002466:	4618      	mov	r0, r3
 8002468:	f007 ff70 	bl	800a34c <osMessageCreate>
 800246c:	4603      	mov	r3, r0
 800246e:	4a21      	ldr	r2, [pc, #132]	@ (80024f4 <MX_FREERTOS_Init+0xc4>)
 8002470:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of UartParserTask */
  osThreadDef(UartParserTask, Uart_Parser_Task, osPriorityNormal, 0, 1024);
 8002472:	4b21      	ldr	r3, [pc, #132]	@ (80024f8 <MX_FREERTOS_Init+0xc8>)
 8002474:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8002478:	461d      	mov	r5, r3
 800247a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800247c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800247e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002482:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UartParserTaskHandle = osThreadCreate(osThread(UartParserTask), NULL);
 8002486:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800248a:	2100      	movs	r1, #0
 800248c:	4618      	mov	r0, r3
 800248e:	f007 fefd 	bl	800a28c <osThreadCreate>
 8002492:	4603      	mov	r3, r0
 8002494:	4a19      	ldr	r2, [pc, #100]	@ (80024fc <MX_FREERTOS_Init+0xcc>)
 8002496:	6013      	str	r3, [r2, #0]

  /* definition and creation of defaultTask0 */
  osThreadDef(defaultTask0, defaultTask, osPriorityIdle, 0, 128);
 8002498:	4b19      	ldr	r3, [pc, #100]	@ (8002500 <MX_FREERTOS_Init+0xd0>)
 800249a:	f107 0420 	add.w	r4, r7, #32
 800249e:	461d      	mov	r5, r3
 80024a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80024a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTask0Handle = osThreadCreate(osThread(defaultTask0), NULL);
 80024ac:	f107 0320 	add.w	r3, r7, #32
 80024b0:	2100      	movs	r1, #0
 80024b2:	4618      	mov	r0, r3
 80024b4:	f007 feea 	bl	800a28c <osThreadCreate>
 80024b8:	4603      	mov	r3, r0
 80024ba:	4a12      	ldr	r2, [pc, #72]	@ (8002504 <MX_FREERTOS_Init+0xd4>)
 80024bc:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskDispatxher */
  osThreadDef(TaskDispatxher, Dispatcher_Task, osPriorityIdle, 0, 1024);
 80024be:	4b12      	ldr	r3, [pc, #72]	@ (8002508 <MX_FREERTOS_Init+0xd8>)
 80024c0:	1d3c      	adds	r4, r7, #4
 80024c2:	461d      	mov	r5, r3
 80024c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80024cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskDispatxherHandle = osThreadCreate(osThread(TaskDispatxher), NULL);
 80024d0:	1d3b      	adds	r3, r7, #4
 80024d2:	2100      	movs	r1, #0
 80024d4:	4618      	mov	r0, r3
 80024d6:	f007 fed9 	bl	800a28c <osThreadCreate>
 80024da:	4603      	mov	r3, r0
 80024dc:	4a0b      	ldr	r2, [pc, #44]	@ (800250c <MX_FREERTOS_Init+0xdc>)
 80024de:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80024e0:	bf00      	nop
 80024e2:	3778      	adds	r7, #120	@ 0x78
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bdb0      	pop	{r4, r5, r7, pc}
 80024e8:	08010d40 	.word	0x08010d40
 80024ec:	20000440 	.word	0x20000440
 80024f0:	08010d50 	.word	0x08010d50
 80024f4:	20000444 	.word	0x20000444
 80024f8:	08010d70 	.word	0x08010d70
 80024fc:	20000434 	.word	0x20000434
 8002500:	08010d9c 	.word	0x08010d9c
 8002504:	20000438 	.word	0x20000438
 8002508:	08010dc8 	.word	0x08010dc8
 800250c:	2000043c 	.word	0x2000043c

08002510 <Uart_Parser_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Uart_Parser_Task */
void Uart_Parser_Task(void const * argument)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b0a2      	sub	sp, #136	@ 0x88
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Uart_Parser_Task */
	char commandBuffer[MSG_BUFFER_SIZE];
	//HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxBuffer, 1);
	HAL_UART_Receive_IT(&huart6, (uint8_t*)&rxBuffer, 1);
 8002518:	2201      	movs	r2, #1
 800251a:	4920      	ldr	r1, [pc, #128]	@ (800259c <Uart_Parser_Task+0x8c>)
 800251c:	4820      	ldr	r0, [pc, #128]	@ (80025a0 <Uart_Parser_Task+0x90>)
 800251e:	f006 fb45 	bl	8008bac <HAL_UART_Receive_IT>
  /* Infinite loop */
  for(;;)
  {
	if(complete6) {
 8002522:	4b20      	ldr	r3, [pc, #128]	@ (80025a4 <Uart_Parser_Task+0x94>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d01a      	beq.n	8002560 <Uart_Parser_Task+0x50>
	  strncpy(commandBuffer, (char*)receivedData, MSG_BUFFER_SIZE);
 800252a:	f107 0308 	add.w	r3, r7, #8
 800252e:	2280      	movs	r2, #128	@ 0x80
 8002530:	491d      	ldr	r1, [pc, #116]	@ (80025a8 <Uart_Parser_Task+0x98>)
 8002532:	4618      	mov	r0, r3
 8002534:	f00a ffc0 	bl	800d4b8 <strncpy>
	  complete6 = 0;
 8002538:	4b1a      	ldr	r3, [pc, #104]	@ (80025a4 <Uart_Parser_Task+0x94>)
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
	  receivedIndex6 = 0;
 800253e:	4b1b      	ldr	r3, [pc, #108]	@ (80025ac <Uart_Parser_Task+0x9c>)
 8002540:	2200      	movs	r2, #0
 8002542:	701a      	strb	r2, [r3, #0]
	  if(validateCommand(commandBuffer)) {
 8002544:	f107 0308 	add.w	r3, r7, #8
 8002548:	4618      	mov	r0, r3
 800254a:	f000 fdd1 	bl	80030f0 <validateCommand>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d01e      	beq.n	8002592 <Uart_Parser_Task+0x82>
		parseCommand(commandBuffer);
 8002554:	f107 0308 	add.w	r3, r7, #8
 8002558:	4618      	mov	r0, r3
 800255a:	f000 fddd 	bl	8003118 <parseCommand>
 800255e:	e018      	b.n	8002592 <Uart_Parser_Task+0x82>
	  }
	}else{
		LoRa_Receive();
 8002560:	f001 fdee 	bl	8004140 <LoRa_Receive>
		strncpy(commandBuffer, (char*)receivedData, MSG_BUFFER_SIZE);
 8002564:	f107 0308 	add.w	r3, r7, #8
 8002568:	2280      	movs	r2, #128	@ 0x80
 800256a:	490f      	ldr	r1, [pc, #60]	@ (80025a8 <Uart_Parser_Task+0x98>)
 800256c:	4618      	mov	r0, r3
 800256e:	f00a ffa3 	bl	800d4b8 <strncpy>
		receivedIndex6 = 0;
 8002572:	4b0e      	ldr	r3, [pc, #56]	@ (80025ac <Uart_Parser_Task+0x9c>)
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]
		if(validateCommand(commandBuffer)) {
 8002578:	f107 0308 	add.w	r3, r7, #8
 800257c:	4618      	mov	r0, r3
 800257e:	f000 fdb7 	bl	80030f0 <validateCommand>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d004      	beq.n	8002592 <Uart_Parser_Task+0x82>
			parseCommand(commandBuffer);
 8002588:	f107 0308 	add.w	r3, r7, #8
 800258c:	4618      	mov	r0, r3
 800258e:	f000 fdc3 	bl	8003118 <parseCommand>
		}
	}
	osDelay(1);
 8002592:	2001      	movs	r0, #1
 8002594:	f007 fec6 	bl	800a324 <osDelay>
	if(complete6) {
 8002598:	e7c3      	b.n	8002522 <Uart_Parser_Task+0x12>
 800259a:	bf00      	nop
 800259c:	20000794 	.word	0x20000794
 80025a0:	20000a88 	.word	0x20000a88
 80025a4:	2000089b 	.word	0x2000089b
 80025a8:	20000798 	.word	0x20000798
 80025ac:	20000899 	.word	0x20000899

080025b0 <defaultTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_defaultTask */
void defaultTask(void const * argument)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN defaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80025b8:	2001      	movs	r0, #1
 80025ba:	f007 feb3 	bl	800a324 <osDelay>
 80025be:	e7fb      	b.n	80025b8 <defaultTask+0x8>

080025c0 <Dispatcher_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Dispatcher_Task */
void Dispatcher_Task(void const * argument)
{
 80025c0:	b590      	push	{r4, r7, lr}
 80025c2:	b08f      	sub	sp, #60	@ 0x3c
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
	osEvent event;
	char *command;
  /* Infinite loop */
  for(;;)
  {
	  event = osMessageGet(commandExecQueueHandle, osWaitForever);
 80025c8:	4b29      	ldr	r3, [pc, #164]	@ (8002670 <Dispatcher_Task+0xb0>)
 80025ca:	6819      	ldr	r1, [r3, #0]
 80025cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025d0:	f04f 32ff 	mov.w	r2, #4294967295
 80025d4:	4618      	mov	r0, r3
 80025d6:	f007 fee1 	bl	800a39c <osMessageGet>
		  if(event.status == osEventMessage) {
 80025da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025dc:	2b10      	cmp	r3, #16
 80025de:	d142      	bne.n	8002666 <Dispatcher_Task+0xa6>
			  command = (char *)event.value.v;
 80025e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e2:	633b      	str	r3, [r7, #48]	@ 0x30

			  for(int i = 0; commandTable[i].cmd != NULL; i++) {
 80025e4:	2300      	movs	r3, #0
 80025e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80025e8:	e037      	b.n	800265a <Dispatcher_Task+0x9a>
				  if(strncmp(command, commandTable[i].cmd, strlen(commandTable[i].cmd)) == 0) {
 80025ea:	4a22      	ldr	r2, [pc, #136]	@ (8002674 <Dispatcher_Task+0xb4>)
 80025ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025ee:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80025f2:	4a20      	ldr	r2, [pc, #128]	@ (8002674 <Dispatcher_Task+0xb4>)
 80025f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025f6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fd fe80 	bl	8000300 <strlen>
 8002600:	4603      	mov	r3, r0
 8002602:	461a      	mov	r2, r3
 8002604:	4621      	mov	r1, r4
 8002606:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002608:	f00a ff44 	bl	800d494 <strncmp>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d120      	bne.n	8002654 <Dispatcher_Task+0x94>
					  osThreadDef_t cmdTaskDef = {
 8002612:	f107 0308 	add.w	r3, r7, #8
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	605a      	str	r2, [r3, #4]
 800261c:	609a      	str	r2, [r3, #8]
 800261e:	60da      	str	r2, [r3, #12]
 8002620:	611a      	str	r2, [r3, #16]
 8002622:	615a      	str	r2, [r3, #20]
 8002624:	619a      	str	r2, [r3, #24]
						  .name = commandTable[i].cmd,
 8002626:	4a13      	ldr	r2, [pc, #76]	@ (8002674 <Dispatcher_Task+0xb4>)
 8002628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800262a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
					  osThreadDef_t cmdTaskDef = {
 800262e:	60bb      	str	r3, [r7, #8]
						  .pthread = commandTable[i].handler,
 8002630:	4a10      	ldr	r2, [pc, #64]	@ (8002674 <Dispatcher_Task+0xb4>)
 8002632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4413      	add	r3, r2
 8002638:	685b      	ldr	r3, [r3, #4]
					  osThreadDef_t cmdTaskDef = {
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	2301      	movs	r3, #1
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002644:	61bb      	str	r3, [r7, #24]
						  .tpriority = osPriorityNormal,
						  .instances = 1,
						  .stacksize = 256
					  };
					  osThreadCreate(&cmdTaskDef, NULL);
 8002646:	f107 0308 	add.w	r3, r7, #8
 800264a:	2100      	movs	r1, #0
 800264c:	4618      	mov	r0, r3
 800264e:	f007 fe1d 	bl	800a28c <osThreadCreate>
					  break;
 8002652:	e008      	b.n	8002666 <Dispatcher_Task+0xa6>
			  for(int i = 0; commandTable[i].cmd != NULL; i++) {
 8002654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002656:	3301      	adds	r3, #1
 8002658:	637b      	str	r3, [r7, #52]	@ 0x34
 800265a:	4a06      	ldr	r2, [pc, #24]	@ (8002674 <Dispatcher_Task+0xb4>)
 800265c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800265e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1c1      	bne.n	80025ea <Dispatcher_Task+0x2a>
				  }
			  }
		  }
    osDelay(1);
 8002666:	2001      	movs	r0, #1
 8002668:	f007 fe5c 	bl	800a324 <osDelay>
	  event = osMessageGet(commandExecQueueHandle, osWaitForever);
 800266c:	e7ac      	b.n	80025c8 <Dispatcher_Task+0x8>
 800266e:	bf00      	nop
 8002670:	20000444 	.word	0x20000444
 8002674:	20000000 	.word	0x20000000

08002678 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08e      	sub	sp, #56	@ 0x38
 800267c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	605a      	str	r2, [r3, #4]
 8002688:	609a      	str	r2, [r3, #8]
 800268a:	60da      	str	r2, [r3, #12]
 800268c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800268e:	4b9e      	ldr	r3, [pc, #632]	@ (8002908 <MX_GPIO_Init+0x290>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002692:	4a9d      	ldr	r2, [pc, #628]	@ (8002908 <MX_GPIO_Init+0x290>)
 8002694:	f043 0304 	orr.w	r3, r3, #4
 8002698:	6313      	str	r3, [r2, #48]	@ 0x30
 800269a:	4b9b      	ldr	r3, [pc, #620]	@ (8002908 <MX_GPIO_Init+0x290>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	f003 0304 	and.w	r3, r3, #4
 80026a2:	623b      	str	r3, [r7, #32]
 80026a4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026a6:	4b98      	ldr	r3, [pc, #608]	@ (8002908 <MX_GPIO_Init+0x290>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026aa:	4a97      	ldr	r2, [pc, #604]	@ (8002908 <MX_GPIO_Init+0x290>)
 80026ac:	f043 0320 	orr.w	r3, r3, #32
 80026b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026b2:	4b95      	ldr	r3, [pc, #596]	@ (8002908 <MX_GPIO_Init+0x290>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b6:	f003 0320 	and.w	r3, r3, #32
 80026ba:	61fb      	str	r3, [r7, #28]
 80026bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026be:	4b92      	ldr	r3, [pc, #584]	@ (8002908 <MX_GPIO_Init+0x290>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c2:	4a91      	ldr	r2, [pc, #580]	@ (8002908 <MX_GPIO_Init+0x290>)
 80026c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ca:	4b8f      	ldr	r3, [pc, #572]	@ (8002908 <MX_GPIO_Init+0x290>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026d2:	61bb      	str	r3, [r7, #24]
 80026d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d6:	4b8c      	ldr	r3, [pc, #560]	@ (8002908 <MX_GPIO_Init+0x290>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026da:	4a8b      	ldr	r2, [pc, #556]	@ (8002908 <MX_GPIO_Init+0x290>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026e2:	4b89      	ldr	r3, [pc, #548]	@ (8002908 <MX_GPIO_Init+0x290>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	617b      	str	r3, [r7, #20]
 80026ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ee:	4b86      	ldr	r3, [pc, #536]	@ (8002908 <MX_GPIO_Init+0x290>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	4a85      	ldr	r2, [pc, #532]	@ (8002908 <MX_GPIO_Init+0x290>)
 80026f4:	f043 0302 	orr.w	r3, r3, #2
 80026f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026fa:	4b83      	ldr	r3, [pc, #524]	@ (8002908 <MX_GPIO_Init+0x290>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	613b      	str	r3, [r7, #16]
 8002704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002706:	4b80      	ldr	r3, [pc, #512]	@ (8002908 <MX_GPIO_Init+0x290>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270a:	4a7f      	ldr	r2, [pc, #508]	@ (8002908 <MX_GPIO_Init+0x290>)
 800270c:	f043 0310 	orr.w	r3, r3, #16
 8002710:	6313      	str	r3, [r2, #48]	@ 0x30
 8002712:	4b7d      	ldr	r3, [pc, #500]	@ (8002908 <MX_GPIO_Init+0x290>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002716:	f003 0310 	and.w	r3, r3, #16
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800271e:	4b7a      	ldr	r3, [pc, #488]	@ (8002908 <MX_GPIO_Init+0x290>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002722:	4a79      	ldr	r2, [pc, #484]	@ (8002908 <MX_GPIO_Init+0x290>)
 8002724:	f043 0308 	orr.w	r3, r3, #8
 8002728:	6313      	str	r3, [r2, #48]	@ 0x30
 800272a:	4b77      	ldr	r3, [pc, #476]	@ (8002908 <MX_GPIO_Init+0x290>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	60bb      	str	r3, [r7, #8]
 8002734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002736:	4b74      	ldr	r3, [pc, #464]	@ (8002908 <MX_GPIO_Init+0x290>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273a:	4a73      	ldr	r2, [pc, #460]	@ (8002908 <MX_GPIO_Init+0x290>)
 800273c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002740:	6313      	str	r3, [r2, #48]	@ 0x30
 8002742:	4b71      	ldr	r3, [pc, #452]	@ (8002908 <MX_GPIO_Init+0x290>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800274a:	607b      	str	r3, [r7, #4]
 800274c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800274e:	2200      	movs	r2, #0
 8002750:	f244 0181 	movw	r1, #16513	@ 0x4081
 8002754:	486d      	ldr	r0, [pc, #436]	@ (800290c <MX_GPIO_Init+0x294>)
 8002756:	f002 fa85 	bl	8004c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX1278_CS_GPIO_Port, SX1278_CS_Pin, GPIO_PIN_SET);
 800275a:	2201      	movs	r2, #1
 800275c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002760:	486b      	ldr	r0, [pc, #428]	@ (8002910 <MX_GPIO_Init+0x298>)
 8002762:	f002 fa7f 	bl	8004c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX1278_RESET_GPIO_Port, SX1278_RESET_Pin, GPIO_PIN_SET);
 8002766:	2201      	movs	r2, #1
 8002768:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800276c:	4869      	ldr	r0, [pc, #420]	@ (8002914 <MX_GPIO_Init+0x29c>)
 800276e:	f002 fa79 	bl	8004c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002772:	2200      	movs	r2, #0
 8002774:	2140      	movs	r1, #64	@ 0x40
 8002776:	4868      	ldr	r0, [pc, #416]	@ (8002918 <MX_GPIO_Init+0x2a0>)
 8002778:	f002 fa74 	bl	8004c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800277c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002780:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002782:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002786:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002788:	2300      	movs	r3, #0
 800278a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800278c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002790:	4619      	mov	r1, r3
 8002792:	4862      	ldr	r0, [pc, #392]	@ (800291c <MX_GPIO_Init+0x2a4>)
 8002794:	f002 f8a2 	bl	80048dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002798:	2332      	movs	r3, #50	@ 0x32
 800279a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279c:	2302      	movs	r3, #2
 800279e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a4:	2303      	movs	r3, #3
 80027a6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80027a8:	230b      	movs	r3, #11
 80027aa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027b0:	4619      	mov	r1, r3
 80027b2:	485a      	ldr	r0, [pc, #360]	@ (800291c <MX_GPIO_Init+0x2a4>)
 80027b4:	f002 f892 	bl	80048dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80027b8:	2386      	movs	r3, #134	@ 0x86
 80027ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027bc:	2302      	movs	r3, #2
 80027be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c4:	2303      	movs	r3, #3
 80027c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80027c8:	230b      	movs	r3, #11
 80027ca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027d0:	4619      	mov	r1, r3
 80027d2:	4853      	ldr	r0, [pc, #332]	@ (8002920 <MX_GPIO_Init+0x2a8>)
 80027d4:	f002 f882 	bl	80048dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80027d8:	f244 0381 	movw	r3, #16513	@ 0x4081
 80027dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027de:	2301      	movs	r3, #1
 80027e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e6:	2300      	movs	r3, #0
 80027e8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027ee:	4619      	mov	r1, r3
 80027f0:	4846      	ldr	r0, [pc, #280]	@ (800290c <MX_GPIO_Init+0x294>)
 80027f2:	f002 f873 	bl	80048dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX1278_CS_Pin;
 80027f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027fc:	2301      	movs	r3, #1
 80027fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002804:	2300      	movs	r3, #0
 8002806:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SX1278_CS_GPIO_Port, &GPIO_InitStruct);
 8002808:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800280c:	4619      	mov	r1, r3
 800280e:	4840      	ldr	r0, [pc, #256]	@ (8002910 <MX_GPIO_Init+0x298>)
 8002810:	f002 f864 	bl	80048dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX1278_RESET_Pin;
 8002814:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002818:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800281a:	2301      	movs	r3, #1
 800281c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	2300      	movs	r3, #0
 8002820:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002822:	2300      	movs	r3, #0
 8002824:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SX1278_RESET_GPIO_Port, &GPIO_InitStruct);
 8002826:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800282a:	4619      	mov	r1, r3
 800282c:	4839      	ldr	r0, [pc, #228]	@ (8002914 <MX_GPIO_Init+0x29c>)
 800282e:	f002 f855 	bl	80048dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX1278_DIO0_Pin;
 8002832:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002836:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002838:	2300      	movs	r3, #0
 800283a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	2300      	movs	r3, #0
 800283e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(SX1278_DIO0_GPIO_Port, &GPIO_InitStruct);
 8002840:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002844:	4619      	mov	r1, r3
 8002846:	4833      	ldr	r0, [pc, #204]	@ (8002914 <MX_GPIO_Init+0x29c>)
 8002848:	f002 f848 	bl	80048dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800284c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002850:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002852:	2302      	movs	r3, #2
 8002854:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002856:	2300      	movs	r3, #0
 8002858:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800285a:	2303      	movs	r3, #3
 800285c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800285e:	230b      	movs	r3, #11
 8002860:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002862:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002866:	4619      	mov	r1, r3
 8002868:	4828      	ldr	r0, [pc, #160]	@ (800290c <MX_GPIO_Init+0x294>)
 800286a:	f002 f837 	bl	80048dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800286e:	2340      	movs	r3, #64	@ 0x40
 8002870:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002872:	2301      	movs	r3, #1
 8002874:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002876:	2300      	movs	r3, #0
 8002878:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287a:	2300      	movs	r3, #0
 800287c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800287e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002882:	4619      	mov	r1, r3
 8002884:	4824      	ldr	r0, [pc, #144]	@ (8002918 <MX_GPIO_Init+0x2a0>)
 8002886:	f002 f829 	bl	80048dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800288a:	2380      	movs	r3, #128	@ 0x80
 800288c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800288e:	2300      	movs	r3, #0
 8002890:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002892:	2300      	movs	r3, #0
 8002894:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002896:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800289a:	4619      	mov	r1, r3
 800289c:	481e      	ldr	r0, [pc, #120]	@ (8002918 <MX_GPIO_Init+0x2a0>)
 800289e:	f002 f81d 	bl	80048dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80028a2:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80028a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a8:	2302      	movs	r3, #2
 80028aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b0:	2303      	movs	r3, #3
 80028b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80028b4:	230a      	movs	r3, #10
 80028b6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028bc:	4619      	mov	r1, r3
 80028be:	4818      	ldr	r0, [pc, #96]	@ (8002920 <MX_GPIO_Init+0x2a8>)
 80028c0:	f002 f80c 	bl	80048dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80028c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028ca:	2300      	movs	r3, #0
 80028cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80028d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028d6:	4619      	mov	r1, r3
 80028d8:	4811      	ldr	r0, [pc, #68]	@ (8002920 <MX_GPIO_Init+0x2a8>)
 80028da:	f001 ffff 	bl	80048dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80028de:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80028e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e4:	2302      	movs	r3, #2
 80028e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ec:	2303      	movs	r3, #3
 80028ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80028f0:	230b      	movs	r3, #11
 80028f2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028f8:	4619      	mov	r1, r3
 80028fa:	4807      	ldr	r0, [pc, #28]	@ (8002918 <MX_GPIO_Init+0x2a0>)
 80028fc:	f001 ffee 	bl	80048dc <HAL_GPIO_Init>

}
 8002900:	bf00      	nop
 8002902:	3738      	adds	r7, #56	@ 0x38
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40023800 	.word	0x40023800
 800290c:	40020400 	.word	0x40020400
 8002910:	40021400 	.word	0x40021400
 8002914:	40021000 	.word	0x40021000
 8002918:	40021800 	.word	0x40021800
 800291c:	40020800 	.word	0x40020800
 8002920:	40020000 	.word	0x40020000

08002924 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002928:	4b1b      	ldr	r3, [pc, #108]	@ (8002998 <MX_I2C1_Init+0x74>)
 800292a:	4a1c      	ldr	r2, [pc, #112]	@ (800299c <MX_I2C1_Init+0x78>)
 800292c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2010091A;
 800292e:	4b1a      	ldr	r3, [pc, #104]	@ (8002998 <MX_I2C1_Init+0x74>)
 8002930:	4a1b      	ldr	r2, [pc, #108]	@ (80029a0 <MX_I2C1_Init+0x7c>)
 8002932:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002934:	4b18      	ldr	r3, [pc, #96]	@ (8002998 <MX_I2C1_Init+0x74>)
 8002936:	2200      	movs	r2, #0
 8002938:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800293a:	4b17      	ldr	r3, [pc, #92]	@ (8002998 <MX_I2C1_Init+0x74>)
 800293c:	2201      	movs	r2, #1
 800293e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002940:	4b15      	ldr	r3, [pc, #84]	@ (8002998 <MX_I2C1_Init+0x74>)
 8002942:	2200      	movs	r2, #0
 8002944:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002946:	4b14      	ldr	r3, [pc, #80]	@ (8002998 <MX_I2C1_Init+0x74>)
 8002948:	2200      	movs	r2, #0
 800294a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800294c:	4b12      	ldr	r3, [pc, #72]	@ (8002998 <MX_I2C1_Init+0x74>)
 800294e:	2200      	movs	r2, #0
 8002950:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002952:	4b11      	ldr	r3, [pc, #68]	@ (8002998 <MX_I2C1_Init+0x74>)
 8002954:	2200      	movs	r2, #0
 8002956:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002958:	4b0f      	ldr	r3, [pc, #60]	@ (8002998 <MX_I2C1_Init+0x74>)
 800295a:	2200      	movs	r2, #0
 800295c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800295e:	480e      	ldr	r0, [pc, #56]	@ (8002998 <MX_I2C1_Init+0x74>)
 8002960:	f002 f99a 	bl	8004c98 <HAL_I2C_Init>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800296a:	f000 fbbb 	bl	80030e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800296e:	2100      	movs	r1, #0
 8002970:	4809      	ldr	r0, [pc, #36]	@ (8002998 <MX_I2C1_Init+0x74>)
 8002972:	f002 ff1d 	bl	80057b0 <HAL_I2CEx_ConfigAnalogFilter>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800297c:	f000 fbb2 	bl	80030e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002980:	2100      	movs	r1, #0
 8002982:	4805      	ldr	r0, [pc, #20]	@ (8002998 <MX_I2C1_Init+0x74>)
 8002984:	f002 ff5f 	bl	8005846 <HAL_I2CEx_ConfigDigitalFilter>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800298e:	f000 fba9 	bl	80030e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002992:	bf00      	nop
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	200006e8 	.word	0x200006e8
 800299c:	40005400 	.word	0x40005400
 80029a0:	2010091a 	.word	0x2010091a

080029a4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80029a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a18 <MX_I2C2_Init+0x74>)
 80029aa:	4a1c      	ldr	r2, [pc, #112]	@ (8002a1c <MX_I2C2_Init+0x78>)
 80029ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2010091A;
 80029ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002a18 <MX_I2C2_Init+0x74>)
 80029b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002a20 <MX_I2C2_Init+0x7c>)
 80029b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80029b4:	4b18      	ldr	r3, [pc, #96]	@ (8002a18 <MX_I2C2_Init+0x74>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029ba:	4b17      	ldr	r3, [pc, #92]	@ (8002a18 <MX_I2C2_Init+0x74>)
 80029bc:	2201      	movs	r2, #1
 80029be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029c0:	4b15      	ldr	r3, [pc, #84]	@ (8002a18 <MX_I2C2_Init+0x74>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80029c6:	4b14      	ldr	r3, [pc, #80]	@ (8002a18 <MX_I2C2_Init+0x74>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80029cc:	4b12      	ldr	r3, [pc, #72]	@ (8002a18 <MX_I2C2_Init+0x74>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029d2:	4b11      	ldr	r3, [pc, #68]	@ (8002a18 <MX_I2C2_Init+0x74>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002a18 <MX_I2C2_Init+0x74>)
 80029da:	2200      	movs	r2, #0
 80029dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80029de:	480e      	ldr	r0, [pc, #56]	@ (8002a18 <MX_I2C2_Init+0x74>)
 80029e0:	f002 f95a 	bl	8004c98 <HAL_I2C_Init>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80029ea:	f000 fb7b 	bl	80030e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029ee:	2100      	movs	r1, #0
 80029f0:	4809      	ldr	r0, [pc, #36]	@ (8002a18 <MX_I2C2_Init+0x74>)
 80029f2:	f002 fedd 	bl	80057b0 <HAL_I2CEx_ConfigAnalogFilter>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80029fc:	f000 fb72 	bl	80030e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002a00:	2100      	movs	r1, #0
 8002a02:	4805      	ldr	r0, [pc, #20]	@ (8002a18 <MX_I2C2_Init+0x74>)
 8002a04:	f002 ff1f 	bl	8005846 <HAL_I2CEx_ConfigDigitalFilter>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002a0e:	f000 fb69 	bl	80030e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	2000073c 	.word	0x2000073c
 8002a1c:	40005800 	.word	0x40005800
 8002a20:	2010091a 	.word	0x2010091a

08002a24 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b0b0      	sub	sp, #192	@ 0xc0
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a2c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	60da      	str	r2, [r3, #12]
 8002a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a3c:	f107 031c 	add.w	r3, r7, #28
 8002a40:	2290      	movs	r2, #144	@ 0x90
 8002a42:	2100      	movs	r1, #0
 8002a44:	4618      	mov	r0, r3
 8002a46:	f00a fd1d 	bl	800d484 <memset>
  if(i2cHandle->Instance==I2C1)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a44      	ldr	r2, [pc, #272]	@ (8002b60 <HAL_I2C_MspInit+0x13c>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d13e      	bne.n	8002ad2 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002a54:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002a58:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a60:	f107 031c 	add.w	r3, r7, #28
 8002a64:	4618      	mov	r0, r3
 8002a66:	f003 fca1 	bl	80063ac <HAL_RCCEx_PeriphCLKConfig>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8002a70:	f000 fb38 	bl	80030e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a74:	4b3b      	ldr	r3, [pc, #236]	@ (8002b64 <HAL_I2C_MspInit+0x140>)
 8002a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a78:	4a3a      	ldr	r2, [pc, #232]	@ (8002b64 <HAL_I2C_MspInit+0x140>)
 8002a7a:	f043 0302 	orr.w	r3, r3, #2
 8002a7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a80:	4b38      	ldr	r3, [pc, #224]	@ (8002b64 <HAL_I2C_MspInit+0x140>)
 8002a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	61bb      	str	r3, [r7, #24]
 8002a8a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002a8c:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002a90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a94:	2312      	movs	r3, #18
 8002a96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002aa6:	2304      	movs	r3, #4
 8002aa8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aac:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	482d      	ldr	r0, [pc, #180]	@ (8002b68 <HAL_I2C_MspInit+0x144>)
 8002ab4:	f001 ff12 	bl	80048dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ab8:	4b2a      	ldr	r3, [pc, #168]	@ (8002b64 <HAL_I2C_MspInit+0x140>)
 8002aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abc:	4a29      	ldr	r2, [pc, #164]	@ (8002b64 <HAL_I2C_MspInit+0x140>)
 8002abe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ac2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ac4:	4b27      	ldr	r3, [pc, #156]	@ (8002b64 <HAL_I2C_MspInit+0x140>)
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002ad0:	e041      	b.n	8002b56 <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C2)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a25      	ldr	r2, [pc, #148]	@ (8002b6c <HAL_I2C_MspInit+0x148>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d13c      	bne.n	8002b56 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002adc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ae0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ae8:	f107 031c 	add.w	r3, r7, #28
 8002aec:	4618      	mov	r0, r3
 8002aee:	f003 fc5d 	bl	80063ac <HAL_RCCEx_PeriphCLKConfig>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8002af8:	f000 faf4 	bl	80030e4 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002afc:	4b19      	ldr	r3, [pc, #100]	@ (8002b64 <HAL_I2C_MspInit+0x140>)
 8002afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b00:	4a18      	ldr	r2, [pc, #96]	@ (8002b64 <HAL_I2C_MspInit+0x140>)
 8002b02:	f043 0320 	orr.w	r3, r3, #32
 8002b06:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b08:	4b16      	ldr	r3, [pc, #88]	@ (8002b64 <HAL_I2C_MspInit+0x140>)
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0c:	f003 0320 	and.w	r3, r3, #32
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b14:	2303      	movs	r3, #3
 8002b16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b1a:	2312      	movs	r3, #18
 8002b1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b26:	2303      	movs	r3, #3
 8002b28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002b2c:	2304      	movs	r3, #4
 8002b2e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b32:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002b36:	4619      	mov	r1, r3
 8002b38:	480d      	ldr	r0, [pc, #52]	@ (8002b70 <HAL_I2C_MspInit+0x14c>)
 8002b3a:	f001 fecf 	bl	80048dc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b3e:	4b09      	ldr	r3, [pc, #36]	@ (8002b64 <HAL_I2C_MspInit+0x140>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b42:	4a08      	ldr	r2, [pc, #32]	@ (8002b64 <HAL_I2C_MspInit+0x140>)
 8002b44:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b4a:	4b06      	ldr	r3, [pc, #24]	@ (8002b64 <HAL_I2C_MspInit+0x140>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	68fb      	ldr	r3, [r7, #12]
}
 8002b56:	bf00      	nop
 8002b58:	37c0      	adds	r7, #192	@ 0xc0
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40005400 	.word	0x40005400
 8002b64:	40023800 	.word	0x40023800
 8002b68:	40020400 	.word	0x40020400
 8002b6c:	40005800 	.word	0x40005800
 8002b70:	40021400 	.word	0x40021400

08002b74 <ICM20608_Init>:

static I2C_HandleTypeDef *icm_i2c_handle;
static uint8_t icm_address = ICM20608_ADDR_LOW;

HAL_StatusTypeDef ICM20608_Init(I2C_HandleTypeDef *hi2c)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af04      	add	r7, sp, #16
 8002b7a:	6078      	str	r0, [r7, #4]
    icm_i2c_handle = hi2c;
 8002b7c:	4a44      	ldr	r2, [pc, #272]	@ (8002c90 <ICM20608_Init+0x11c>)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6013      	str	r3, [r2, #0]

    uint8_t id = 0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Mem_Read(icm_i2c_handle, ICM20608_ADDR_LOW, WHO_AM_I_REG, 1, &id, 1, HAL_MAX_DELAY) == HAL_OK && id == WHO_AM_I_VAL) {
 8002b86:	4b42      	ldr	r3, [pc, #264]	@ (8002c90 <ICM20608_Init+0x11c>)
 8002b88:	6818      	ldr	r0, [r3, #0]
 8002b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b8e:	9302      	str	r3, [sp, #8]
 8002b90:	2301      	movs	r3, #1
 8002b92:	9301      	str	r3, [sp, #4]
 8002b94:	f107 030f 	add.w	r3, r7, #15
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	2275      	movs	r2, #117	@ 0x75
 8002b9e:	21d0      	movs	r1, #208	@ 0xd0
 8002ba0:	f002 fa2a 	bl	8004ff8 <HAL_I2C_Mem_Read>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d106      	bne.n	8002bb8 <ICM20608_Init+0x44>
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
 8002bac:	2baf      	cmp	r3, #175	@ 0xaf
 8002bae:	d103      	bne.n	8002bb8 <ICM20608_Init+0x44>
        icm_address = ICM20608_ADDR_LOW;
 8002bb0:	4b38      	ldr	r3, [pc, #224]	@ (8002c94 <ICM20608_Init+0x120>)
 8002bb2:	22d0      	movs	r2, #208	@ 0xd0
 8002bb4:	701a      	strb	r2, [r3, #0]
 8002bb6:	e01a      	b.n	8002bee <ICM20608_Init+0x7a>
    } else if (HAL_I2C_Mem_Read(icm_i2c_handle, ICM20608_ADDR_HIGH, WHO_AM_I_REG, 1, &id, 1, HAL_MAX_DELAY) == HAL_OK && id == WHO_AM_I_VAL) {
 8002bb8:	4b35      	ldr	r3, [pc, #212]	@ (8002c90 <ICM20608_Init+0x11c>)
 8002bba:	6818      	ldr	r0, [r3, #0]
 8002bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc0:	9302      	str	r3, [sp, #8]
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	9301      	str	r3, [sp, #4]
 8002bc6:	f107 030f 	add.w	r3, r7, #15
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	2301      	movs	r3, #1
 8002bce:	2275      	movs	r2, #117	@ 0x75
 8002bd0:	21d2      	movs	r1, #210	@ 0xd2
 8002bd2:	f002 fa11 	bl	8004ff8 <HAL_I2C_Mem_Read>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d106      	bne.n	8002bea <ICM20608_Init+0x76>
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
 8002bde:	2baf      	cmp	r3, #175	@ 0xaf
 8002be0:	d103      	bne.n	8002bea <ICM20608_Init+0x76>
        icm_address = ICM20608_ADDR_HIGH;
 8002be2:	4b2c      	ldr	r3, [pc, #176]	@ (8002c94 <ICM20608_Init+0x120>)
 8002be4:	22d2      	movs	r2, #210	@ 0xd2
 8002be6:	701a      	strb	r2, [r3, #0]
 8002be8:	e001      	b.n	8002bee <ICM20608_Init+0x7a>
    } else {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e04b      	b.n	8002c86 <ICM20608_Init+0x112>
    }

    uint8_t pwr = 0x00;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	73bb      	strb	r3, [r7, #14]
    if (HAL_I2C_Mem_Write(icm_i2c_handle, icm_address, PWR_MGMT_1, 1, &pwr, 1, HAL_MAX_DELAY) != HAL_OK)
 8002bf2:	4b27      	ldr	r3, [pc, #156]	@ (8002c90 <ICM20608_Init+0x11c>)
 8002bf4:	6818      	ldr	r0, [r3, #0]
 8002bf6:	4b27      	ldr	r3, [pc, #156]	@ (8002c94 <ICM20608_Init+0x120>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8002c00:	9302      	str	r3, [sp, #8]
 8002c02:	2301      	movs	r3, #1
 8002c04:	9301      	str	r3, [sp, #4]
 8002c06:	f107 030e 	add.w	r3, r7, #14
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	226b      	movs	r2, #107	@ 0x6b
 8002c10:	f002 f8de 	bl	8004dd0 <HAL_I2C_Mem_Write>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <ICM20608_Init+0xaa>
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e033      	b.n	8002c86 <ICM20608_Init+0x112>

    uint8_t gyro_cfg = 0x00;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Mem_Write(icm_i2c_handle, icm_address, GYRO_CONFIG, 1, &gyro_cfg, 1, HAL_MAX_DELAY) != HAL_OK)
 8002c22:	4b1b      	ldr	r3, [pc, #108]	@ (8002c90 <ICM20608_Init+0x11c>)
 8002c24:	6818      	ldr	r0, [r3, #0]
 8002c26:	4b1b      	ldr	r3, [pc, #108]	@ (8002c94 <ICM20608_Init+0x120>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c30:	9302      	str	r3, [sp, #8]
 8002c32:	2301      	movs	r3, #1
 8002c34:	9301      	str	r3, [sp, #4]
 8002c36:	f107 030d 	add.w	r3, r7, #13
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	221b      	movs	r2, #27
 8002c40:	f002 f8c6 	bl	8004dd0 <HAL_I2C_Mem_Write>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <ICM20608_Init+0xda>
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e01b      	b.n	8002c86 <ICM20608_Init+0x112>

    uint8_t accel_cfg = 0x00;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	733b      	strb	r3, [r7, #12]
    if (HAL_I2C_Mem_Write(icm_i2c_handle, icm_address, ACCEL_CONFIG, 1, &accel_cfg, 1, HAL_MAX_DELAY) != HAL_OK)
 8002c52:	4b0f      	ldr	r3, [pc, #60]	@ (8002c90 <ICM20608_Init+0x11c>)
 8002c54:	6818      	ldr	r0, [r3, #0]
 8002c56:	4b0f      	ldr	r3, [pc, #60]	@ (8002c94 <ICM20608_Init+0x120>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c60:	9302      	str	r3, [sp, #8]
 8002c62:	2301      	movs	r3, #1
 8002c64:	9301      	str	r3, [sp, #4]
 8002c66:	f107 030c 	add.w	r3, r7, #12
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	221c      	movs	r2, #28
 8002c70:	f002 f8ae 	bl	8004dd0 <HAL_I2C_Mem_Write>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <ICM20608_Init+0x10a>
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e003      	b.n	8002c86 <ICM20608_Init+0x112>

    HAL_Delay(100);
 8002c7e:	2064      	movs	r0, #100	@ 0x64
 8002c80:	f001 fc94 	bl	80045ac <HAL_Delay>

    return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000790 	.word	0x20000790
 8002c94:	20000178 	.word	0x20000178

08002c98 <ICM20608_ReadAll>:

HAL_StatusTypeDef ICM20608_ReadAll(ICM20608_Data *data)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08e      	sub	sp, #56	@ 0x38
 8002c9c:	af04      	add	r7, sp, #16
 8002c9e:	6078      	str	r0, [r7, #4]
    uint8_t buf[14];
    if (HAL_I2C_Mem_Read(icm_i2c_handle, icm_address, DATA_START_REG, 1, buf, 14, HAL_MAX_DELAY) != HAL_OK)
 8002ca0:	4b55      	ldr	r3, [pc, #340]	@ (8002df8 <ICM20608_ReadAll+0x160>)
 8002ca2:	6818      	ldr	r0, [r3, #0]
 8002ca4:	4b55      	ldr	r3, [pc, #340]	@ (8002dfc <ICM20608_ReadAll+0x164>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	4619      	mov	r1, r3
 8002caa:	f04f 33ff 	mov.w	r3, #4294967295
 8002cae:	9302      	str	r3, [sp, #8]
 8002cb0:	230e      	movs	r3, #14
 8002cb2:	9301      	str	r3, [sp, #4]
 8002cb4:	f107 030c 	add.w	r3, r7, #12
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	2301      	movs	r3, #1
 8002cbc:	223b      	movs	r2, #59	@ 0x3b
 8002cbe:	f002 f99b 	bl	8004ff8 <HAL_I2C_Mem_Read>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <ICM20608_ReadAll+0x34>
        return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e090      	b.n	8002dee <ICM20608_ReadAll+0x156>

    int16_t ax = (buf[0] << 8) | buf[1];
 8002ccc:	7b3b      	ldrb	r3, [r7, #12]
 8002cce:	021b      	lsls	r3, r3, #8
 8002cd0:	b21a      	sxth	r2, r3
 8002cd2:	7b7b      	ldrb	r3, [r7, #13]
 8002cd4:	b21b      	sxth	r3, r3
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	84fb      	strh	r3, [r7, #38]	@ 0x26
    int16_t ay = (buf[2] << 8) | buf[3];
 8002cda:	7bbb      	ldrb	r3, [r7, #14]
 8002cdc:	021b      	lsls	r3, r3, #8
 8002cde:	b21a      	sxth	r2, r3
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
 8002ce2:	b21b      	sxth	r3, r3
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	84bb      	strh	r3, [r7, #36]	@ 0x24
    int16_t az = (buf[4] << 8) | buf[5];
 8002ce8:	7c3b      	ldrb	r3, [r7, #16]
 8002cea:	021b      	lsls	r3, r3, #8
 8002cec:	b21a      	sxth	r2, r3
 8002cee:	7c7b      	ldrb	r3, [r7, #17]
 8002cf0:	b21b      	sxth	r3, r3
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	847b      	strh	r3, [r7, #34]	@ 0x22
    int16_t temp = (buf[6] << 8) | buf[7];
 8002cf6:	7cbb      	ldrb	r3, [r7, #18]
 8002cf8:	021b      	lsls	r3, r3, #8
 8002cfa:	b21a      	sxth	r2, r3
 8002cfc:	7cfb      	ldrb	r3, [r7, #19]
 8002cfe:	b21b      	sxth	r3, r3
 8002d00:	4313      	orrs	r3, r2
 8002d02:	843b      	strh	r3, [r7, #32]
    int16_t gx = (buf[8] << 8) | buf[9];
 8002d04:	7d3b      	ldrb	r3, [r7, #20]
 8002d06:	021b      	lsls	r3, r3, #8
 8002d08:	b21a      	sxth	r2, r3
 8002d0a:	7d7b      	ldrb	r3, [r7, #21]
 8002d0c:	b21b      	sxth	r3, r3
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	83fb      	strh	r3, [r7, #30]
    int16_t gy = (buf[10] << 8) | buf[11];
 8002d12:	7dbb      	ldrb	r3, [r7, #22]
 8002d14:	021b      	lsls	r3, r3, #8
 8002d16:	b21a      	sxth	r2, r3
 8002d18:	7dfb      	ldrb	r3, [r7, #23]
 8002d1a:	b21b      	sxth	r3, r3
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	83bb      	strh	r3, [r7, #28]
    int16_t gz = (buf[12] << 8) | buf[13];
 8002d20:	7e3b      	ldrb	r3, [r7, #24]
 8002d22:	021b      	lsls	r3, r3, #8
 8002d24:	b21a      	sxth	r2, r3
 8002d26:	7e7b      	ldrb	r3, [r7, #25]
 8002d28:	b21b      	sxth	r3, r3
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	837b      	strh	r3, [r7, #26]

    data->accel_x = ax / 16384.0f;
 8002d2e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002d32:	ee07 3a90 	vmov	s15, r3
 8002d36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d3a:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8002e00 <ICM20608_ReadAll+0x168>
 8002d3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	edc3 7a00 	vstr	s15, [r3]
    data->accel_y = ay / 16384.0f;
 8002d48:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002d4c:	ee07 3a90 	vmov	s15, r3
 8002d50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d54:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8002e00 <ICM20608_ReadAll+0x168>
 8002d58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	edc3 7a01 	vstr	s15, [r3, #4]
    data->accel_z = az / 16384.0f;
 8002d62:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002d66:	ee07 3a90 	vmov	s15, r3
 8002d6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d6e:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8002e00 <ICM20608_ReadAll+0x168>
 8002d72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	edc3 7a02 	vstr	s15, [r3, #8]

    data->gyro_x = gx / 131.0f;
 8002d7c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002d80:	ee07 3a90 	vmov	s15, r3
 8002d84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d88:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8002e04 <ICM20608_ReadAll+0x16c>
 8002d8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	edc3 7a03 	vstr	s15, [r3, #12]
    data->gyro_y = gy / 131.0f;
 8002d96:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002d9a:	ee07 3a90 	vmov	s15, r3
 8002d9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002da2:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8002e04 <ICM20608_ReadAll+0x16c>
 8002da6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	edc3 7a04 	vstr	s15, [r3, #16]
    data->gyro_z = gz / 131.0f;
 8002db0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002db4:	ee07 3a90 	vmov	s15, r3
 8002db8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dbc:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8002e04 <ICM20608_ReadAll+0x16c>
 8002dc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	edc3 7a05 	vstr	s15, [r3, #20]

    data->temperature = (temp / 326.8f) + 25.0f;
 8002dca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002dce:	ee07 3a90 	vmov	s15, r3
 8002dd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dd6:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8002e08 <ICM20608_ReadAll+0x170>
 8002dda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dde:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8002de2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	edc3 7a06 	vstr	s15, [r3, #24]

    return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3728      	adds	r7, #40	@ 0x28
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20000790 	.word	0x20000790
 8002dfc:	20000178 	.word	0x20000178
 8002e00:	46800000 	.word	0x46800000
 8002e04:	43030000 	.word	0x43030000
 8002e08:	43a36666 	.word	0x43a36666

08002e0c <ICM20608_Calibrate>:

HAL_StatusTypeDef ICM20608_Calibrate(IMU_CalibrationData *calib, uint32_t samples) {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b092      	sub	sp, #72	@ 0x48
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
    if(samples == 0) return HAL_ERROR;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <ICM20608_Calibrate+0x14>
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e0bc      	b.n	8002f9a <ICM20608_Calibrate+0x18e>

    ICM20608_Data data;
    float gx_sum = 0, gy_sum = 0, gz_sum = 0;
 8002e20:	f04f 0300 	mov.w	r3, #0
 8002e24:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e26:	f04f 0300 	mov.w	r3, #0
 8002e2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float ax_sum = 0, ay_sum = 0, az_sum = 0;
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e38:	f04f 0300 	mov.w	r3, #0
 8002e3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e3e:	f04f 0300 	mov.w	r3, #0
 8002e42:	633b      	str	r3, [r7, #48]	@ 0x30

    for(uint32_t i = 0; i < samples; i++) {
 8002e44:	2300      	movs	r3, #0
 8002e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e48:	e027      	b.n	8002e9a <ICM20608_Calibrate+0x8e>
        if(ICM20608_ReadAll(&data) != HAL_OK) return HAL_ERROR;
 8002e4a:	f107 030c 	add.w	r3, r7, #12
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff ff22 	bl	8002c98 <ICM20608_ReadAll>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <ICM20608_Calibrate+0x52>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e09d      	b.n	8002f9a <ICM20608_Calibrate+0x18e>

        gx_sum += data.gyro_x;
 8002e5e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e62:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8002e66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e6a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
        gy_sum += data.gyro_y;
 8002e6e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e72:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002e76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e7a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        gz_sum += data.gyro_z;
 8002e7e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e82:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002e86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e8a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

        HAL_Delay(10);
 8002e8e:	200a      	movs	r0, #10
 8002e90:	f001 fb8c 	bl	80045ac <HAL_Delay>
    for(uint32_t i = 0; i < samples; i++) {
 8002e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e96:	3301      	adds	r3, #1
 8002e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d3d3      	bcc.n	8002e4a <ICM20608_Calibrate+0x3e>
    }

    calib->gyro_offset_x = gx_sum / samples;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	ee07 3a90 	vmov	s15, r3
 8002ea8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002eac:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8002eb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	edc3 7a00 	vstr	s15, [r3]
    calib->gyro_offset_y = gy_sum / samples;
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	ee07 3a90 	vmov	s15, r3
 8002ec0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ec4:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8002ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	edc3 7a01 	vstr	s15, [r3, #4]
    calib->gyro_offset_z = gz_sum / samples;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	ee07 3a90 	vmov	s15, r3
 8002ed8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002edc:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8002ee0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	edc3 7a02 	vstr	s15, [r3, #8]

    for(uint32_t i = 0; i < samples; i++) {
 8002eea:	2300      	movs	r3, #0
 8002eec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002eee:	e02b      	b.n	8002f48 <ICM20608_Calibrate+0x13c>
        if(ICM20608_ReadAll(&data) != HAL_OK) return HAL_ERROR;
 8002ef0:	f107 030c 	add.w	r3, r7, #12
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff fecf 	bl	8002c98 <ICM20608_ReadAll>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <ICM20608_Calibrate+0xf8>
 8002f00:	2301      	movs	r3, #1
 8002f02:	e04a      	b.n	8002f9a <ICM20608_Calibrate+0x18e>

        ax_sum += data.accel_x;
 8002f04:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f08:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002f0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f10:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        ay_sum += data.accel_y;
 8002f14:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f18:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002f1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f20:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
        az_sum += (data.accel_z - 1.0f);
 8002f24:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002f2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f30:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8002f34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f38:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

        HAL_Delay(10);
 8002f3c:	200a      	movs	r0, #10
 8002f3e:	f001 fb35 	bl	80045ac <HAL_Delay>
    for(uint32_t i = 0; i < samples; i++) {
 8002f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f44:	3301      	adds	r3, #1
 8002f46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d3cf      	bcc.n	8002ef0 <ICM20608_Calibrate+0xe4>
    }

    calib->accel_offset_x = ax_sum / samples;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	ee07 3a90 	vmov	s15, r3
 8002f56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f5a:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8002f5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	edc3 7a03 	vstr	s15, [r3, #12]
    calib->accel_offset_y = ay_sum / samples;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	ee07 3a90 	vmov	s15, r3
 8002f6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f72:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8002f76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	edc3 7a04 	vstr	s15, [r3, #16]
    calib->accel_offset_z = az_sum / samples;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	ee07 3a90 	vmov	s15, r3
 8002f86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f8a:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8002f8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	edc3 7a05 	vstr	s15, [r3, #20]

    return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3748      	adds	r7, #72	@ 0x48
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fa6:	f001 fad4 	bl	8004552 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002faa:	f000 f817 	bl	8002fdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fae:	f7ff fb63 	bl	8002678 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002fb2:	f000 fe0d 	bl	8003bd0 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8002fb6:	f000 fc85 	bl	80038c4 <MX_TIM1_Init>
  MX_I2C1_Init();
 8002fba:	f7ff fcb3 	bl	8002924 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002fbe:	f7ff fcf1 	bl	80029a4 <MX_I2C2_Init>
  MX_USART6_UART_Init();
 8002fc2:	f000 fe35 	bl	8003c30 <MX_USART6_UART_Init>
  MX_SPI4_Init();
 8002fc6:	f000 fa13 	bl	80033f0 <MX_SPI4_Init>
  MX_SPI1_Init();
 8002fca:	f000 f9d3 	bl	8003374 <MX_SPI1_Init>
  //HAL_UART_Receive_IT(&huart3, rxBuffer, RX_BUFFER_SIZE);

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002fce:	f7ff fa2f 	bl	8002430 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002fd2:	f007 f954 	bl	800a27e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002fd6:	bf00      	nop
 8002fd8:	e7fd      	b.n	8002fd6 <main+0x34>
	...

08002fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b094      	sub	sp, #80	@ 0x50
 8002fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fe2:	f107 031c 	add.w	r3, r7, #28
 8002fe6:	2234      	movs	r2, #52	@ 0x34
 8002fe8:	2100      	movs	r1, #0
 8002fea:	4618      	mov	r0, r3
 8002fec:	f00a fa4a 	bl	800d484 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ff0:	f107 0308 	add.w	r3, r7, #8
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	605a      	str	r2, [r3, #4]
 8002ffa:	609a      	str	r2, [r3, #8]
 8002ffc:	60da      	str	r2, [r3, #12]
 8002ffe:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003000:	f002 fc6e 	bl	80058e0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003004:	4b2c      	ldr	r3, [pc, #176]	@ (80030b8 <SystemClock_Config+0xdc>)
 8003006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003008:	4a2b      	ldr	r2, [pc, #172]	@ (80030b8 <SystemClock_Config+0xdc>)
 800300a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800300e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003010:	4b29      	ldr	r3, [pc, #164]	@ (80030b8 <SystemClock_Config+0xdc>)
 8003012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003014:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003018:	607b      	str	r3, [r7, #4]
 800301a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800301c:	4b27      	ldr	r3, [pc, #156]	@ (80030bc <SystemClock_Config+0xe0>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003024:	4a25      	ldr	r2, [pc, #148]	@ (80030bc <SystemClock_Config+0xe0>)
 8003026:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800302a:	6013      	str	r3, [r2, #0]
 800302c:	4b23      	ldr	r3, [pc, #140]	@ (80030bc <SystemClock_Config+0xe0>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003034:	603b      	str	r3, [r7, #0]
 8003036:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003038:	2301      	movs	r3, #1
 800303a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800303c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8003040:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003042:	2302      	movs	r3, #2
 8003044:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003046:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800304a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800304c:	2304      	movs	r3, #4
 800304e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8003050:	2360      	movs	r3, #96	@ 0x60
 8003052:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003054:	2302      	movs	r3, #2
 8003056:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003058:	2304      	movs	r3, #4
 800305a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800305c:	2302      	movs	r3, #2
 800305e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003060:	f107 031c 	add.w	r3, r7, #28
 8003064:	4618      	mov	r0, r3
 8003066:	f002 fc9b 	bl	80059a0 <HAL_RCC_OscConfig>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003070:	f000 f838 	bl	80030e4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003074:	f002 fc44 	bl	8005900 <HAL_PWREx_EnableOverDrive>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800307e:	f000 f831 	bl	80030e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003082:	230f      	movs	r3, #15
 8003084:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003086:	2302      	movs	r3, #2
 8003088:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800308a:	2300      	movs	r3, #0
 800308c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800308e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003092:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003094:	2300      	movs	r3, #0
 8003096:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003098:	f107 0308 	add.w	r3, r7, #8
 800309c:	2103      	movs	r1, #3
 800309e:	4618      	mov	r0, r3
 80030a0:	f002 ff2c 	bl	8005efc <HAL_RCC_ClockConfig>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80030aa:	f000 f81b 	bl	80030e4 <Error_Handler>
  }
}
 80030ae:	bf00      	nop
 80030b0:	3750      	adds	r7, #80	@ 0x50
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40023800 	.word	0x40023800
 80030bc:	40007000 	.word	0x40007000

080030c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a04      	ldr	r2, [pc, #16]	@ (80030e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d101      	bne.n	80030d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80030d2:	f001 fa4b 	bl	800456c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80030d6:	bf00      	nop
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40001000 	.word	0x40001000

080030e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030e8:	b672      	cpsid	i
}
 80030ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030ec:	bf00      	nop
 80030ee:	e7fd      	b.n	80030ec <Error_Handler+0x8>

080030f0 <validateCommand>:
uint8_t receivedIndex6 = 0;
uint8_t complete=0;
uint8_t complete6=0;


int validateCommand(const char *cmd) {
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
    return (cmd != NULL && strlen(cmd) > 0);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d005      	beq.n	800310a <validateCommand+0x1a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <validateCommand+0x1a>
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <validateCommand+0x1c>
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <parseCommand>:

void parseCommand(char *input) {
 8003118:	b580      	push	{r7, lr}
 800311a:	b0aa      	sub	sp, #168	@ 0xa8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
    char *command = strtok(input, ",");
 8003120:	498a      	ldr	r1, [pc, #552]	@ (800334c <parseCommand+0x234>)
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f00a f9dc 	bl	800d4e0 <strtok>
 8003128:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    char *targetID_str = strtok(NULL, ",");
 800312c:	4987      	ldr	r1, [pc, #540]	@ (800334c <parseCommand+0x234>)
 800312e:	2000      	movs	r0, #0
 8003130:	f00a f9d6 	bl	800d4e0 <strtok>
 8003134:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    char *commandID_str = strtok(NULL, ",");
 8003138:	4984      	ldr	r1, [pc, #528]	@ (800334c <parseCommand+0x234>)
 800313a:	2000      	movs	r0, #0
 800313c:	f00a f9d0 	bl	800d4e0 <strtok>
 8003140:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
    char *parameters = strtok(NULL, ",");
 8003144:	4981      	ldr	r1, [pc, #516]	@ (800334c <parseCommand+0x234>)
 8003146:	2000      	movs	r0, #0
 8003148:	f00a f9ca 	bl	800d4e0 <strtok>
 800314c:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    char *explanation = strtok(NULL, ",");
 8003150:	497e      	ldr	r1, [pc, #504]	@ (800334c <parseCommand+0x234>)
 8003152:	2000      	movs	r0, #0
 8003154:	f00a f9c4 	bl	800d4e0 <strtok>
 8003158:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    char *parameter_explanation = strtok(NULL, ",");
 800315c:	497b      	ldr	r1, [pc, #492]	@ (800334c <parseCommand+0x234>)
 800315e:	2000      	movs	r0, #0
 8003160:	f00a f9be 	bl	800d4e0 <strtok>
 8003164:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c

    if (!command) return;
 8003168:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 80e8 	beq.w	8003342 <parseCommand+0x22a>

    int targetID = targetID_str ? atoi(targetID_str) : -1;
 8003172:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003176:	2b00      	cmp	r3, #0
 8003178:	d005      	beq.n	8003186 <parseCommand+0x6e>
 800317a:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 800317e:	f009 f855 	bl	800c22c <atoi>
 8003182:	4603      	mov	r3, r0
 8003184:	e001      	b.n	800318a <parseCommand+0x72>
 8003186:	f04f 33ff 	mov.w	r3, #4294967295
 800318a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    int commandID = commandID_str ? atoi(commandID_str) : -1;
 800318e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003192:	2b00      	cmp	r3, #0
 8003194:	d005      	beq.n	80031a2 <parseCommand+0x8a>
 8003196:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 800319a:	f009 f847 	bl	800c22c <atoi>
 800319e:	4603      	mov	r3, r0
 80031a0:	e001      	b.n	80031a6 <parseCommand+0x8e>
 80031a2:	f04f 33ff 	mov.w	r3, #4294967295
 80031a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

    char msg[100];

    snprintf(msg, sizeof(msg), "CMD: %s\r\n", command);
 80031aa:	f107 0020 	add.w	r0, r7, #32
 80031ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80031b2:	4a67      	ldr	r2, [pc, #412]	@ (8003350 <parseCommand+0x238>)
 80031b4:	2164      	movs	r1, #100	@ 0x64
 80031b6:	f00a f839 	bl	800d22c <sniprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80031ba:	f107 0320 	add.w	r3, r7, #32
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fd f89e 	bl	8000300 <strlen>
 80031c4:	4603      	mov	r3, r0
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	f107 0120 	add.w	r1, r7, #32
 80031cc:	f04f 33ff 	mov.w	r3, #4294967295
 80031d0:	4860      	ldr	r0, [pc, #384]	@ (8003354 <parseCommand+0x23c>)
 80031d2:	f005 fc03 	bl	80089dc <HAL_UART_Transmit>

    snprintf(msg, sizeof(msg), "TargetID: %d\r\n", targetID);
 80031d6:	f107 0020 	add.w	r0, r7, #32
 80031da:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80031de:	4a5e      	ldr	r2, [pc, #376]	@ (8003358 <parseCommand+0x240>)
 80031e0:	2164      	movs	r1, #100	@ 0x64
 80031e2:	f00a f823 	bl	800d22c <sniprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80031e6:	f107 0320 	add.w	r3, r7, #32
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fd f888 	bl	8000300 <strlen>
 80031f0:	4603      	mov	r3, r0
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	f107 0120 	add.w	r1, r7, #32
 80031f8:	f04f 33ff 	mov.w	r3, #4294967295
 80031fc:	4855      	ldr	r0, [pc, #340]	@ (8003354 <parseCommand+0x23c>)
 80031fe:	f005 fbed 	bl	80089dc <HAL_UART_Transmit>

    snprintf(msg, sizeof(msg), "CommandID: %d\r\n", commandID);
 8003202:	f107 0020 	add.w	r0, r7, #32
 8003206:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800320a:	4a54      	ldr	r2, [pc, #336]	@ (800335c <parseCommand+0x244>)
 800320c:	2164      	movs	r1, #100	@ 0x64
 800320e:	f00a f80d 	bl	800d22c <sniprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003212:	f107 0320 	add.w	r3, r7, #32
 8003216:	4618      	mov	r0, r3
 8003218:	f7fd f872 	bl	8000300 <strlen>
 800321c:	4603      	mov	r3, r0
 800321e:	b29a      	uxth	r2, r3
 8003220:	f107 0120 	add.w	r1, r7, #32
 8003224:	f04f 33ff 	mov.w	r3, #4294967295
 8003228:	484a      	ldr	r0, [pc, #296]	@ (8003354 <parseCommand+0x23c>)
 800322a:	f005 fbd7 	bl	80089dc <HAL_UART_Transmit>

    if(parameters) {
 800322e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003232:	2b00      	cmp	r3, #0
 8003234:	d015      	beq.n	8003262 <parseCommand+0x14a>
        snprintf(msg, sizeof(msg), "Parameters: %s\r\n", parameters);
 8003236:	f107 0020 	add.w	r0, r7, #32
 800323a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800323e:	4a48      	ldr	r2, [pc, #288]	@ (8003360 <parseCommand+0x248>)
 8003240:	2164      	movs	r1, #100	@ 0x64
 8003242:	f009 fff3 	bl	800d22c <sniprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003246:	f107 0320 	add.w	r3, r7, #32
 800324a:	4618      	mov	r0, r3
 800324c:	f7fd f858 	bl	8000300 <strlen>
 8003250:	4603      	mov	r3, r0
 8003252:	b29a      	uxth	r2, r3
 8003254:	f107 0120 	add.w	r1, r7, #32
 8003258:	f04f 33ff 	mov.w	r3, #4294967295
 800325c:	483d      	ldr	r0, [pc, #244]	@ (8003354 <parseCommand+0x23c>)
 800325e:	f005 fbbd 	bl	80089dc <HAL_UART_Transmit>
    }

    if(explanation) {
 8003262:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003266:	2b00      	cmp	r3, #0
 8003268:	d015      	beq.n	8003296 <parseCommand+0x17e>
        snprintf(msg, sizeof(msg), "Explanation: %s\r\n", explanation);
 800326a:	f107 0020 	add.w	r0, r7, #32
 800326e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003272:	4a3c      	ldr	r2, [pc, #240]	@ (8003364 <parseCommand+0x24c>)
 8003274:	2164      	movs	r1, #100	@ 0x64
 8003276:	f009 ffd9 	bl	800d22c <sniprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800327a:	f107 0320 	add.w	r3, r7, #32
 800327e:	4618      	mov	r0, r3
 8003280:	f7fd f83e 	bl	8000300 <strlen>
 8003284:	4603      	mov	r3, r0
 8003286:	b29a      	uxth	r2, r3
 8003288:	f107 0120 	add.w	r1, r7, #32
 800328c:	f04f 33ff 	mov.w	r3, #4294967295
 8003290:	4830      	ldr	r0, [pc, #192]	@ (8003354 <parseCommand+0x23c>)
 8003292:	f005 fba3 	bl	80089dc <HAL_UART_Transmit>
    }

    if(parameter_explanation) {
 8003296:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800329a:	2b00      	cmp	r3, #0
 800329c:	d015      	beq.n	80032ca <parseCommand+0x1b2>
        snprintf(msg, sizeof(msg), "Param Explanation: %s\r\n", parameter_explanation);
 800329e:	f107 0020 	add.w	r0, r7, #32
 80032a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032a6:	4a30      	ldr	r2, [pc, #192]	@ (8003368 <parseCommand+0x250>)
 80032a8:	2164      	movs	r1, #100	@ 0x64
 80032aa:	f009 ffbf 	bl	800d22c <sniprintf>
        HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80032ae:	f107 0320 	add.w	r3, r7, #32
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fd f824 	bl	8000300 <strlen>
 80032b8:	4603      	mov	r3, r0
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	f107 0120 	add.w	r1, r7, #32
 80032c0:	f04f 33ff 	mov.w	r3, #4294967295
 80032c4:	4823      	ldr	r0, [pc, #140]	@ (8003354 <parseCommand+0x23c>)
 80032c6:	f005 fb89 	bl	80089dc <HAL_UART_Transmit>
    }

    for (int i = 0; commandTable[i].cmd != NULL; i++) {
 80032ca:	2300      	movs	r3, #0
 80032cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80032d0:	e02f      	b.n	8003332 <parseCommand+0x21a>
        if (strcmp(command, commandTable[i].cmd) == 0) {
 80032d2:	4a26      	ldr	r2, [pc, #152]	@ (800336c <parseCommand+0x254>)
 80032d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80032d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80032dc:	4619      	mov	r1, r3
 80032de:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80032e2:	f7fc ffad 	bl	8000240 <strcmp>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d11d      	bne.n	8003328 <parseCommand+0x210>
        	char targetStr[12], cmdStr[12];
        	snprintf(targetStr, sizeof(targetStr), "%d", targetID);
 80032ec:	f107 0014 	add.w	r0, r7, #20
 80032f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032f4:	4a1e      	ldr	r2, [pc, #120]	@ (8003370 <parseCommand+0x258>)
 80032f6:	210c      	movs	r1, #12
 80032f8:	f009 ff98 	bl	800d22c <sniprintf>
        	snprintf(cmdStr, sizeof(cmdStr), "%d", commandID);
 80032fc:	f107 0008 	add.w	r0, r7, #8
 8003300:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003304:	4a1a      	ldr	r2, [pc, #104]	@ (8003370 <parseCommand+0x258>)
 8003306:	210c      	movs	r1, #12
 8003308:	f009 ff90 	bl	800d22c <sniprintf>
        	commandTable[i].handler(targetStr, cmdStr, parameters);
 800330c:	4a17      	ldr	r2, [pc, #92]	@ (800336c <parseCommand+0x254>)
 800330e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	4413      	add	r3, r2
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f107 0108 	add.w	r1, r7, #8
 800331c:	f107 0014 	add.w	r0, r7, #20
 8003320:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003324:	4798      	blx	r3
 8003326:	e00d      	b.n	8003344 <parseCommand+0x22c>
    for (int i = 0; commandTable[i].cmd != NULL; i++) {
 8003328:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800332c:	3301      	adds	r3, #1
 800332e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003332:	4a0e      	ldr	r2, [pc, #56]	@ (800336c <parseCommand+0x254>)
 8003334:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003338:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1c8      	bne.n	80032d2 <parseCommand+0x1ba>
 8003340:	e000      	b.n	8003344 <parseCommand+0x22c>
    if (!command) return;
 8003342:	bf00      	nop
            return;
        }
    }
}
 8003344:	37a8      	adds	r7, #168	@ 0xa8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	08010de4 	.word	0x08010de4
 8003350:	08010de8 	.word	0x08010de8
 8003354:	20000a00 	.word	0x20000a00
 8003358:	08010df4 	.word	0x08010df4
 800335c:	08010e04 	.word	0x08010e04
 8003360:	08010e14 	.word	0x08010e14
 8003364:	08010e28 	.word	0x08010e28
 8003368:	08010e3c 	.word	0x08010e3c
 800336c:	20000000 	.word	0x20000000
 8003370:	08010e54 	.word	0x08010e54

08003374 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi4;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003378:	4b1b      	ldr	r3, [pc, #108]	@ (80033e8 <MX_SPI1_Init+0x74>)
 800337a:	4a1c      	ldr	r2, [pc, #112]	@ (80033ec <MX_SPI1_Init+0x78>)
 800337c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800337e:	4b1a      	ldr	r3, [pc, #104]	@ (80033e8 <MX_SPI1_Init+0x74>)
 8003380:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003384:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003386:	4b18      	ldr	r3, [pc, #96]	@ (80033e8 <MX_SPI1_Init+0x74>)
 8003388:	2200      	movs	r2, #0
 800338a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800338c:	4b16      	ldr	r3, [pc, #88]	@ (80033e8 <MX_SPI1_Init+0x74>)
 800338e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003392:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003394:	4b14      	ldr	r3, [pc, #80]	@ (80033e8 <MX_SPI1_Init+0x74>)
 8003396:	2200      	movs	r2, #0
 8003398:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800339a:	4b13      	ldr	r3, [pc, #76]	@ (80033e8 <MX_SPI1_Init+0x74>)
 800339c:	2200      	movs	r2, #0
 800339e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80033a0:	4b11      	ldr	r3, [pc, #68]	@ (80033e8 <MX_SPI1_Init+0x74>)
 80033a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80033a8:	4b0f      	ldr	r3, [pc, #60]	@ (80033e8 <MX_SPI1_Init+0x74>)
 80033aa:	2238      	movs	r2, #56	@ 0x38
 80033ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033ae:	4b0e      	ldr	r3, [pc, #56]	@ (80033e8 <MX_SPI1_Init+0x74>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80033b4:	4b0c      	ldr	r3, [pc, #48]	@ (80033e8 <MX_SPI1_Init+0x74>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033ba:	4b0b      	ldr	r3, [pc, #44]	@ (80033e8 <MX_SPI1_Init+0x74>)
 80033bc:	2200      	movs	r2, #0
 80033be:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80033c0:	4b09      	ldr	r3, [pc, #36]	@ (80033e8 <MX_SPI1_Init+0x74>)
 80033c2:	2207      	movs	r2, #7
 80033c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80033c6:	4b08      	ldr	r3, [pc, #32]	@ (80033e8 <MX_SPI1_Init+0x74>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80033cc:	4b06      	ldr	r3, [pc, #24]	@ (80033e8 <MX_SPI1_Init+0x74>)
 80033ce:	2208      	movs	r2, #8
 80033d0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80033d2:	4805      	ldr	r0, [pc, #20]	@ (80033e8 <MX_SPI1_Init+0x74>)
 80033d4:	f003 fc12 	bl	8006bfc <HAL_SPI_Init>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80033de:	f7ff fe81 	bl	80030e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80033e2:	bf00      	nop
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	2000089c 	.word	0x2000089c
 80033ec:	40013000 	.word	0x40013000

080033f0 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80033f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003464 <MX_SPI4_Init+0x74>)
 80033f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003468 <MX_SPI4_Init+0x78>)
 80033f8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80033fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003464 <MX_SPI4_Init+0x74>)
 80033fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003400:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003402:	4b18      	ldr	r3, [pc, #96]	@ (8003464 <MX_SPI4_Init+0x74>)
 8003404:	2200      	movs	r2, #0
 8003406:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8003408:	4b16      	ldr	r3, [pc, #88]	@ (8003464 <MX_SPI4_Init+0x74>)
 800340a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800340e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003410:	4b14      	ldr	r3, [pc, #80]	@ (8003464 <MX_SPI4_Init+0x74>)
 8003412:	2200      	movs	r2, #0
 8003414:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003416:	4b13      	ldr	r3, [pc, #76]	@ (8003464 <MX_SPI4_Init+0x74>)
 8003418:	2200      	movs	r2, #0
 800341a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800341c:	4b11      	ldr	r3, [pc, #68]	@ (8003464 <MX_SPI4_Init+0x74>)
 800341e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003422:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003424:	4b0f      	ldr	r3, [pc, #60]	@ (8003464 <MX_SPI4_Init+0x74>)
 8003426:	2228      	movs	r2, #40	@ 0x28
 8003428:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800342a:	4b0e      	ldr	r3, [pc, #56]	@ (8003464 <MX_SPI4_Init+0x74>)
 800342c:	2200      	movs	r2, #0
 800342e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003430:	4b0c      	ldr	r3, [pc, #48]	@ (8003464 <MX_SPI4_Init+0x74>)
 8003432:	2200      	movs	r2, #0
 8003434:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003436:	4b0b      	ldr	r3, [pc, #44]	@ (8003464 <MX_SPI4_Init+0x74>)
 8003438:	2200      	movs	r2, #0
 800343a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 800343c:	4b09      	ldr	r3, [pc, #36]	@ (8003464 <MX_SPI4_Init+0x74>)
 800343e:	2207      	movs	r2, #7
 8003440:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003442:	4b08      	ldr	r3, [pc, #32]	@ (8003464 <MX_SPI4_Init+0x74>)
 8003444:	2200      	movs	r2, #0
 8003446:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003448:	4b06      	ldr	r3, [pc, #24]	@ (8003464 <MX_SPI4_Init+0x74>)
 800344a:	2208      	movs	r2, #8
 800344c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800344e:	4805      	ldr	r0, [pc, #20]	@ (8003464 <MX_SPI4_Init+0x74>)
 8003450:	f003 fbd4 	bl	8006bfc <HAL_SPI_Init>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800345a:	f7ff fe43 	bl	80030e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800345e:	bf00      	nop
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	20000900 	.word	0x20000900
 8003468:	40013400 	.word	0x40013400

0800346c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08c      	sub	sp, #48	@ 0x30
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003474:	f107 031c 	add.w	r3, r7, #28
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	60da      	str	r2, [r3, #12]
 8003482:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a3c      	ldr	r2, [pc, #240]	@ (800357c <HAL_SPI_MspInit+0x110>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d144      	bne.n	8003518 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800348e:	4b3c      	ldr	r3, [pc, #240]	@ (8003580 <HAL_SPI_MspInit+0x114>)
 8003490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003492:	4a3b      	ldr	r2, [pc, #236]	@ (8003580 <HAL_SPI_MspInit+0x114>)
 8003494:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003498:	6453      	str	r3, [r2, #68]	@ 0x44
 800349a:	4b39      	ldr	r3, [pc, #228]	@ (8003580 <HAL_SPI_MspInit+0x114>)
 800349c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034a2:	61bb      	str	r3, [r7, #24]
 80034a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a6:	4b36      	ldr	r3, [pc, #216]	@ (8003580 <HAL_SPI_MspInit+0x114>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034aa:	4a35      	ldr	r2, [pc, #212]	@ (8003580 <HAL_SPI_MspInit+0x114>)
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80034b2:	4b33      	ldr	r3, [pc, #204]	@ (8003580 <HAL_SPI_MspInit+0x114>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034be:	4b30      	ldr	r3, [pc, #192]	@ (8003580 <HAL_SPI_MspInit+0x114>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c2:	4a2f      	ldr	r2, [pc, #188]	@ (8003580 <HAL_SPI_MspInit+0x114>)
 80034c4:	f043 0308 	orr.w	r3, r3, #8
 80034c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ca:	4b2d      	ldr	r3, [pc, #180]	@ (8003580 <HAL_SPI_MspInit+0x114>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ce:	f003 0308 	and.w	r3, r3, #8
 80034d2:	613b      	str	r3, [r7, #16]
 80034d4:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80034d6:	2360      	movs	r3, #96	@ 0x60
 80034d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034da:	2302      	movs	r3, #2
 80034dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034de:	2300      	movs	r3, #0
 80034e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034e2:	2303      	movs	r3, #3
 80034e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80034e6:	2305      	movs	r3, #5
 80034e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ea:	f107 031c 	add.w	r3, r7, #28
 80034ee:	4619      	mov	r1, r3
 80034f0:	4824      	ldr	r0, [pc, #144]	@ (8003584 <HAL_SPI_MspInit+0x118>)
 80034f2:	f001 f9f3 	bl	80048dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80034f6:	2380      	movs	r3, #128	@ 0x80
 80034f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fa:	2302      	movs	r3, #2
 80034fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003502:	2303      	movs	r3, #3
 8003504:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003506:	2305      	movs	r3, #5
 8003508:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800350a:	f107 031c 	add.w	r3, r7, #28
 800350e:	4619      	mov	r1, r3
 8003510:	481d      	ldr	r0, [pc, #116]	@ (8003588 <HAL_SPI_MspInit+0x11c>)
 8003512:	f001 f9e3 	bl	80048dc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8003516:	e02d      	b.n	8003574 <HAL_SPI_MspInit+0x108>
  else if(spiHandle->Instance==SPI4)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a1b      	ldr	r2, [pc, #108]	@ (800358c <HAL_SPI_MspInit+0x120>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d128      	bne.n	8003574 <HAL_SPI_MspInit+0x108>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003522:	4b17      	ldr	r3, [pc, #92]	@ (8003580 <HAL_SPI_MspInit+0x114>)
 8003524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003526:	4a16      	ldr	r2, [pc, #88]	@ (8003580 <HAL_SPI_MspInit+0x114>)
 8003528:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800352c:	6453      	str	r3, [r2, #68]	@ 0x44
 800352e:	4b14      	ldr	r3, [pc, #80]	@ (8003580 <HAL_SPI_MspInit+0x114>)
 8003530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003532:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800353a:	4b11      	ldr	r3, [pc, #68]	@ (8003580 <HAL_SPI_MspInit+0x114>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353e:	4a10      	ldr	r2, [pc, #64]	@ (8003580 <HAL_SPI_MspInit+0x114>)
 8003540:	f043 0310 	orr.w	r3, r3, #16
 8003544:	6313      	str	r3, [r2, #48]	@ 0x30
 8003546:	4b0e      	ldr	r3, [pc, #56]	@ (8003580 <HAL_SPI_MspInit+0x114>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354a:	f003 0310 	and.w	r3, r3, #16
 800354e:	60bb      	str	r3, [r7, #8]
 8003550:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8003552:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8003556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003558:	2302      	movs	r3, #2
 800355a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355c:	2300      	movs	r3, #0
 800355e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003560:	2303      	movs	r3, #3
 8003562:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003564:	2305      	movs	r3, #5
 8003566:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003568:	f107 031c 	add.w	r3, r7, #28
 800356c:	4619      	mov	r1, r3
 800356e:	4808      	ldr	r0, [pc, #32]	@ (8003590 <HAL_SPI_MspInit+0x124>)
 8003570:	f001 f9b4 	bl	80048dc <HAL_GPIO_Init>
}
 8003574:	bf00      	nop
 8003576:	3730      	adds	r7, #48	@ 0x30
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40013000 	.word	0x40013000
 8003580:	40023800 	.word	0x40023800
 8003584:	40020000 	.word	0x40020000
 8003588:	40020c00 	.word	0x40020c00
 800358c:	40013400 	.word	0x40013400
 8003590:	40021000 	.word	0x40021000

08003594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800359a:	4b11      	ldr	r3, [pc, #68]	@ (80035e0 <HAL_MspInit+0x4c>)
 800359c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359e:	4a10      	ldr	r2, [pc, #64]	@ (80035e0 <HAL_MspInit+0x4c>)
 80035a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80035a6:	4b0e      	ldr	r3, [pc, #56]	@ (80035e0 <HAL_MspInit+0x4c>)
 80035a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ae:	607b      	str	r3, [r7, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035b2:	4b0b      	ldr	r3, [pc, #44]	@ (80035e0 <HAL_MspInit+0x4c>)
 80035b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b6:	4a0a      	ldr	r2, [pc, #40]	@ (80035e0 <HAL_MspInit+0x4c>)
 80035b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80035be:	4b08      	ldr	r3, [pc, #32]	@ (80035e0 <HAL_MspInit+0x4c>)
 80035c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035c6:	603b      	str	r3, [r7, #0]
 80035c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80035ca:	2200      	movs	r2, #0
 80035cc:	210f      	movs	r1, #15
 80035ce:	f06f 0001 	mvn.w	r0, #1
 80035d2:	f001 f8c7 	bl	8004764 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035d6:	bf00      	nop
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40023800 	.word	0x40023800

080035e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b08e      	sub	sp, #56	@ 0x38
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80035f4:	4b33      	ldr	r3, [pc, #204]	@ (80036c4 <HAL_InitTick+0xe0>)
 80035f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f8:	4a32      	ldr	r2, [pc, #200]	@ (80036c4 <HAL_InitTick+0xe0>)
 80035fa:	f043 0310 	orr.w	r3, r3, #16
 80035fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8003600:	4b30      	ldr	r3, [pc, #192]	@ (80036c4 <HAL_InitTick+0xe0>)
 8003602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003604:	f003 0310 	and.w	r3, r3, #16
 8003608:	60fb      	str	r3, [r7, #12]
 800360a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800360c:	f107 0210 	add.w	r2, r7, #16
 8003610:	f107 0314 	add.w	r3, r7, #20
 8003614:	4611      	mov	r1, r2
 8003616:	4618      	mov	r0, r3
 8003618:	f002 fe96 	bl	8006348 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003622:	2b00      	cmp	r3, #0
 8003624:	d103      	bne.n	800362e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003626:	f002 fe67 	bl	80062f8 <HAL_RCC_GetPCLK1Freq>
 800362a:	6378      	str	r0, [r7, #52]	@ 0x34
 800362c:	e004      	b.n	8003638 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800362e:	f002 fe63 	bl	80062f8 <HAL_RCC_GetPCLK1Freq>
 8003632:	4603      	mov	r3, r0
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800363a:	4a23      	ldr	r2, [pc, #140]	@ (80036c8 <HAL_InitTick+0xe4>)
 800363c:	fba2 2303 	umull	r2, r3, r2, r3
 8003640:	0c9b      	lsrs	r3, r3, #18
 8003642:	3b01      	subs	r3, #1
 8003644:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003646:	4b21      	ldr	r3, [pc, #132]	@ (80036cc <HAL_InitTick+0xe8>)
 8003648:	4a21      	ldr	r2, [pc, #132]	@ (80036d0 <HAL_InitTick+0xec>)
 800364a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800364c:	4b1f      	ldr	r3, [pc, #124]	@ (80036cc <HAL_InitTick+0xe8>)
 800364e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003652:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003654:	4a1d      	ldr	r2, [pc, #116]	@ (80036cc <HAL_InitTick+0xe8>)
 8003656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003658:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800365a:	4b1c      	ldr	r3, [pc, #112]	@ (80036cc <HAL_InitTick+0xe8>)
 800365c:	2200      	movs	r2, #0
 800365e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003660:	4b1a      	ldr	r3, [pc, #104]	@ (80036cc <HAL_InitTick+0xe8>)
 8003662:	2200      	movs	r2, #0
 8003664:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003666:	4b19      	ldr	r3, [pc, #100]	@ (80036cc <HAL_InitTick+0xe8>)
 8003668:	2200      	movs	r2, #0
 800366a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800366c:	4817      	ldr	r0, [pc, #92]	@ (80036cc <HAL_InitTick+0xe8>)
 800366e:	f004 f89d 	bl	80077ac <HAL_TIM_Base_Init>
 8003672:	4603      	mov	r3, r0
 8003674:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003678:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800367c:	2b00      	cmp	r3, #0
 800367e:	d11b      	bne.n	80036b8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003680:	4812      	ldr	r0, [pc, #72]	@ (80036cc <HAL_InitTick+0xe8>)
 8003682:	f004 f8f5 	bl	8007870 <HAL_TIM_Base_Start_IT>
 8003686:	4603      	mov	r3, r0
 8003688:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800368c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003690:	2b00      	cmp	r3, #0
 8003692:	d111      	bne.n	80036b8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003694:	2036      	movs	r0, #54	@ 0x36
 8003696:	f001 f881 	bl	800479c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b0f      	cmp	r3, #15
 800369e:	d808      	bhi.n	80036b2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80036a0:	2200      	movs	r2, #0
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	2036      	movs	r0, #54	@ 0x36
 80036a6:	f001 f85d 	bl	8004764 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036aa:	4a0a      	ldr	r2, [pc, #40]	@ (80036d4 <HAL_InitTick+0xf0>)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6013      	str	r3, [r2, #0]
 80036b0:	e002      	b.n	80036b8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80036b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3738      	adds	r7, #56	@ 0x38
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40023800 	.word	0x40023800
 80036c8:	431bde83 	.word	0x431bde83
 80036cc:	20000964 	.word	0x20000964
 80036d0:	40001000 	.word	0x40001000
 80036d4:	20000244 	.word	0x20000244

080036d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80036dc:	bf00      	nop
 80036de:	e7fd      	b.n	80036dc <NMI_Handler+0x4>

080036e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036e4:	bf00      	nop
 80036e6:	e7fd      	b.n	80036e4 <HardFault_Handler+0x4>

080036e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036ec:	bf00      	nop
 80036ee:	e7fd      	b.n	80036ec <MemManage_Handler+0x4>

080036f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036f4:	bf00      	nop
 80036f6:	e7fd      	b.n	80036f4 <BusFault_Handler+0x4>

080036f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036fc:	bf00      	nop
 80036fe:	e7fd      	b.n	80036fc <UsageFault_Handler+0x4>

08003700 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003704:	bf00      	nop
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
	...

08003710 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003714:	4802      	ldr	r0, [pc, #8]	@ (8003720 <USART3_IRQHandler+0x10>)
 8003716:	f005 fa8d 	bl	8008c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800371a:	bf00      	nop
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	20000a00 	.word	0x20000a00

08003724 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003728:	4802      	ldr	r0, [pc, #8]	@ (8003734 <TIM6_DAC_IRQHandler+0x10>)
 800372a:	f004 fa6b 	bl	8007c04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800372e:	bf00      	nop
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	20000964 	.word	0x20000964

08003738 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800373c:	4802      	ldr	r0, [pc, #8]	@ (8003748 <USART6_IRQHandler+0x10>)
 800373e:	f005 fa79 	bl	8008c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003742:	bf00      	nop
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	20000a88 	.word	0x20000a88

0800374c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  return 1;
 8003750:	2301      	movs	r3, #1
}
 8003752:	4618      	mov	r0, r3
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <_kill>:

int _kill(int pid, int sig)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003766:	f009 ffb7 	bl	800d6d8 <__errno>
 800376a:	4603      	mov	r3, r0
 800376c:	2216      	movs	r2, #22
 800376e:	601a      	str	r2, [r3, #0]
  return -1;
 8003770:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003774:	4618      	mov	r0, r3
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <_exit>:

void _exit (int status)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003784:	f04f 31ff 	mov.w	r1, #4294967295
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f7ff ffe7 	bl	800375c <_kill>
  while (1) {}    /* Make sure we hang here */
 800378e:	bf00      	nop
 8003790:	e7fd      	b.n	800378e <_exit+0x12>

08003792 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b086      	sub	sp, #24
 8003796:	af00      	add	r7, sp, #0
 8003798:	60f8      	str	r0, [r7, #12]
 800379a:	60b9      	str	r1, [r7, #8]
 800379c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800379e:	2300      	movs	r3, #0
 80037a0:	617b      	str	r3, [r7, #20]
 80037a2:	e00a      	b.n	80037ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80037a4:	f3af 8000 	nop.w
 80037a8:	4601      	mov	r1, r0
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	1c5a      	adds	r2, r3, #1
 80037ae:	60ba      	str	r2, [r7, #8]
 80037b0:	b2ca      	uxtb	r2, r1
 80037b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	3301      	adds	r3, #1
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	429a      	cmp	r2, r3
 80037c0:	dbf0      	blt.n	80037a4 <_read+0x12>
  }

  return len;
 80037c2:	687b      	ldr	r3, [r7, #4]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <_close>:
  }
  return len;
}

int _close(int file)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80037d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037d8:	4618      	mov	r0, r3
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80037f4:	605a      	str	r2, [r3, #4]
  return 0;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <_isatty>:

int _isatty(int file)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800380c:	2301      	movs	r3, #1
}
 800380e:	4618      	mov	r0, r3
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800381a:	b480      	push	{r7}
 800381c:	b085      	sub	sp, #20
 800381e:	af00      	add	r7, sp, #0
 8003820:	60f8      	str	r0, [r7, #12]
 8003822:	60b9      	str	r1, [r7, #8]
 8003824:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3714      	adds	r7, #20
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800383c:	4a14      	ldr	r2, [pc, #80]	@ (8003890 <_sbrk+0x5c>)
 800383e:	4b15      	ldr	r3, [pc, #84]	@ (8003894 <_sbrk+0x60>)
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003848:	4b13      	ldr	r3, [pc, #76]	@ (8003898 <_sbrk+0x64>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d102      	bne.n	8003856 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003850:	4b11      	ldr	r3, [pc, #68]	@ (8003898 <_sbrk+0x64>)
 8003852:	4a12      	ldr	r2, [pc, #72]	@ (800389c <_sbrk+0x68>)
 8003854:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003856:	4b10      	ldr	r3, [pc, #64]	@ (8003898 <_sbrk+0x64>)
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4413      	add	r3, r2
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	429a      	cmp	r2, r3
 8003862:	d207      	bcs.n	8003874 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003864:	f009 ff38 	bl	800d6d8 <__errno>
 8003868:	4603      	mov	r3, r0
 800386a:	220c      	movs	r2, #12
 800386c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800386e:	f04f 33ff 	mov.w	r3, #4294967295
 8003872:	e009      	b.n	8003888 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003874:	4b08      	ldr	r3, [pc, #32]	@ (8003898 <_sbrk+0x64>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800387a:	4b07      	ldr	r3, [pc, #28]	@ (8003898 <_sbrk+0x64>)
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4413      	add	r3, r2
 8003882:	4a05      	ldr	r2, [pc, #20]	@ (8003898 <_sbrk+0x64>)
 8003884:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003886:	68fb      	ldr	r3, [r7, #12]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3718      	adds	r7, #24
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	20080000 	.word	0x20080000
 8003894:	00000400 	.word	0x00000400
 8003898:	200009b0 	.word	0x200009b0
 800389c:	20004bc8 	.word	0x20004bc8

080038a0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038a4:	4b06      	ldr	r3, [pc, #24]	@ (80038c0 <SystemInit+0x20>)
 80038a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038aa:	4a05      	ldr	r2, [pc, #20]	@ (80038c0 <SystemInit+0x20>)
 80038ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80038b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038b4:	bf00      	nop
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	e000ed00 	.word	0xe000ed00

080038c4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b096      	sub	sp, #88	@ 0x58
 80038c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038ca:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80038ce:	2200      	movs	r2, #0
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	605a      	str	r2, [r3, #4]
 80038d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	605a      	str	r2, [r3, #4]
 80038e0:	609a      	str	r2, [r3, #8]
 80038e2:	60da      	str	r2, [r3, #12]
 80038e4:	611a      	str	r2, [r3, #16]
 80038e6:	615a      	str	r2, [r3, #20]
 80038e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80038ea:	1d3b      	adds	r3, r7, #4
 80038ec:	222c      	movs	r2, #44	@ 0x2c
 80038ee:	2100      	movs	r1, #0
 80038f0:	4618      	mov	r0, r3
 80038f2:	f009 fdc7 	bl	800d484 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80038f6:	4b39      	ldr	r3, [pc, #228]	@ (80039dc <MX_TIM1_Init+0x118>)
 80038f8:	4a39      	ldr	r2, [pc, #228]	@ (80039e0 <MX_TIM1_Init+0x11c>)
 80038fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9599;
 80038fc:	4b37      	ldr	r3, [pc, #220]	@ (80039dc <MX_TIM1_Init+0x118>)
 80038fe:	f242 527f 	movw	r2, #9599	@ 0x257f
 8003902:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003904:	4b35      	ldr	r3, [pc, #212]	@ (80039dc <MX_TIM1_Init+0x118>)
 8003906:	2200      	movs	r2, #0
 8003908:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 800390a:	4b34      	ldr	r3, [pc, #208]	@ (80039dc <MX_TIM1_Init+0x118>)
 800390c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003910:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003912:	4b32      	ldr	r3, [pc, #200]	@ (80039dc <MX_TIM1_Init+0x118>)
 8003914:	2200      	movs	r2, #0
 8003916:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003918:	4b30      	ldr	r3, [pc, #192]	@ (80039dc <MX_TIM1_Init+0x118>)
 800391a:	2200      	movs	r2, #0
 800391c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800391e:	4b2f      	ldr	r3, [pc, #188]	@ (80039dc <MX_TIM1_Init+0x118>)
 8003920:	2200      	movs	r2, #0
 8003922:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003924:	482d      	ldr	r0, [pc, #180]	@ (80039dc <MX_TIM1_Init+0x118>)
 8003926:	f004 f81b 	bl	8007960 <HAL_TIM_PWM_Init>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8003930:	f7ff fbd8 	bl	80030e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003934:	2300      	movs	r3, #0
 8003936:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003938:	2300      	movs	r3, #0
 800393a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800393c:	2300      	movs	r3, #0
 800393e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003940:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003944:	4619      	mov	r1, r3
 8003946:	4825      	ldr	r0, [pc, #148]	@ (80039dc <MX_TIM1_Init+0x118>)
 8003948:	f004 fed0 	bl	80086ec <HAL_TIMEx_MasterConfigSynchronization>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8003952:	f7ff fbc7 	bl	80030e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003956:	2360      	movs	r3, #96	@ 0x60
 8003958:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800395a:	2300      	movs	r3, #0
 800395c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800395e:	2300      	movs	r3, #0
 8003960:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003962:	2300      	movs	r3, #0
 8003964:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003966:	2300      	movs	r3, #0
 8003968:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800396a:	2300      	movs	r3, #0
 800396c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800396e:	2300      	movs	r3, #0
 8003970:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003972:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003976:	2200      	movs	r2, #0
 8003978:	4619      	mov	r1, r3
 800397a:	4818      	ldr	r0, [pc, #96]	@ (80039dc <MX_TIM1_Init+0x118>)
 800397c:	f004 fa4a 	bl	8007e14 <HAL_TIM_PWM_ConfigChannel>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8003986:	f7ff fbad 	bl	80030e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800398a:	2300      	movs	r3, #0
 800398c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800398e:	2300      	movs	r3, #0
 8003990:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003992:	2300      	movs	r3, #0
 8003994:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003996:	2300      	movs	r3, #0
 8003998:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800399a:	2300      	movs	r3, #0
 800399c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800399e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80039a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80039a4:	2300      	movs	r3, #0
 80039a6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80039a8:	2300      	movs	r3, #0
 80039aa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80039ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039b0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80039b2:	2300      	movs	r3, #0
 80039b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80039b6:	2300      	movs	r3, #0
 80039b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80039ba:	1d3b      	adds	r3, r7, #4
 80039bc:	4619      	mov	r1, r3
 80039be:	4807      	ldr	r0, [pc, #28]	@ (80039dc <MX_TIM1_Init+0x118>)
 80039c0:	f004 ff22 	bl	8008808 <HAL_TIMEx_ConfigBreakDeadTime>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 80039ca:	f7ff fb8b 	bl	80030e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80039ce:	4803      	ldr	r0, [pc, #12]	@ (80039dc <MX_TIM1_Init+0x118>)
 80039d0:	f000 f828 	bl	8003a24 <HAL_TIM_MspPostInit>

}
 80039d4:	bf00      	nop
 80039d6:	3758      	adds	r7, #88	@ 0x58
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	200009b4 	.word	0x200009b4
 80039e0:	40010000 	.word	0x40010000

080039e4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a0a      	ldr	r2, [pc, #40]	@ (8003a1c <HAL_TIM_PWM_MspInit+0x38>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d10b      	bne.n	8003a0e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003a20 <HAL_TIM_PWM_MspInit+0x3c>)
 80039f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039fa:	4a09      	ldr	r2, [pc, #36]	@ (8003a20 <HAL_TIM_PWM_MspInit+0x3c>)
 80039fc:	f043 0301 	orr.w	r3, r3, #1
 8003a00:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a02:	4b07      	ldr	r3, [pc, #28]	@ (8003a20 <HAL_TIM_PWM_MspInit+0x3c>)
 8003a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	60fb      	str	r3, [r7, #12]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003a0e:	bf00      	nop
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	40010000 	.word	0x40010000
 8003a20:	40023800 	.word	0x40023800

08003a24 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a2c:	f107 030c 	add.w	r3, r7, #12
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	605a      	str	r2, [r3, #4]
 8003a36:	609a      	str	r2, [r3, #8]
 8003a38:	60da      	str	r2, [r3, #12]
 8003a3a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a11      	ldr	r2, [pc, #68]	@ (8003a88 <HAL_TIM_MspPostInit+0x64>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d11c      	bne.n	8003a80 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a46:	4b11      	ldr	r3, [pc, #68]	@ (8003a8c <HAL_TIM_MspPostInit+0x68>)
 8003a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4a:	4a10      	ldr	r2, [pc, #64]	@ (8003a8c <HAL_TIM_MspPostInit+0x68>)
 8003a4c:	f043 0310 	orr.w	r3, r3, #16
 8003a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a52:	4b0e      	ldr	r3, [pc, #56]	@ (8003a8c <HAL_TIM_MspPostInit+0x68>)
 8003a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a56:	f003 0310 	and.w	r3, r3, #16
 8003a5a:	60bb      	str	r3, [r7, #8]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003a5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a62:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a64:	2302      	movs	r3, #2
 8003a66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003a70:	2301      	movs	r3, #1
 8003a72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a74:	f107 030c 	add.w	r3, r7, #12
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4805      	ldr	r0, [pc, #20]	@ (8003a90 <HAL_TIM_MspPostInit+0x6c>)
 8003a7c:	f000 ff2e 	bl	80048dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003a80:	bf00      	nop
 8003a82:	3720      	adds	r7, #32
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40010000 	.word	0x40010000
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	40021000 	.word	0x40021000

08003a94 <HAL_UART_RxCpltCallback>:
#include "usart.h"

/* USER CODE BEGIN 0 */
#include "parser.h"

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
	const char* ping = "PING\r";
 8003a9c:	4b3d      	ldr	r3, [pc, #244]	@ (8003b94 <HAL_UART_RxCpltCallback+0x100>)
 8003a9e:	60fb      	str	r3, [r7, #12]
	const char* pong = "PONG\r";
 8003aa0:	4b3d      	ldr	r3, [pc, #244]	@ (8003b98 <HAL_UART_RxCpltCallback+0x104>)
 8003aa2:	60bb      	str	r3, [r7, #8]

    if (huart->Instance == USART6) {
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a3c      	ldr	r2, [pc, #240]	@ (8003b9c <HAL_UART_RxCpltCallback+0x108>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d146      	bne.n	8003b3c <HAL_UART_RxCpltCallback+0xa8>
		receivedData6[receivedIndex++] = rxBuffer;
 8003aae:	4b3c      	ldr	r3, [pc, #240]	@ (8003ba0 <HAL_UART_RxCpltCallback+0x10c>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	1c5a      	adds	r2, r3, #1
 8003ab4:	b2d1      	uxtb	r1, r2
 8003ab6:	4a3a      	ldr	r2, [pc, #232]	@ (8003ba0 <HAL_UART_RxCpltCallback+0x10c>)
 8003ab8:	7011      	strb	r1, [r2, #0]
 8003aba:	461a      	mov	r2, r3
 8003abc:	4b39      	ldr	r3, [pc, #228]	@ (8003ba4 <HAL_UART_RxCpltCallback+0x110>)
 8003abe:	7819      	ldrb	r1, [r3, #0]
 8003ac0:	4b39      	ldr	r3, [pc, #228]	@ (8003ba8 <HAL_UART_RxCpltCallback+0x114>)
 8003ac2:	5499      	strb	r1, [r3, r2]
		if (rxBuffer6 == '\r' || rxBuffer6 == '\n' || receivedIndex6 >= MSG_BUFFER_SIZE - 1) {
 8003ac4:	4b39      	ldr	r3, [pc, #228]	@ (8003bac <HAL_UART_RxCpltCallback+0x118>)
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	2b0d      	cmp	r3, #13
 8003aca:	d007      	beq.n	8003adc <HAL_UART_RxCpltCallback+0x48>
 8003acc:	4b37      	ldr	r3, [pc, #220]	@ (8003bac <HAL_UART_RxCpltCallback+0x118>)
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b0a      	cmp	r3, #10
 8003ad2:	d003      	beq.n	8003adc <HAL_UART_RxCpltCallback+0x48>
 8003ad4:	4b36      	ldr	r3, [pc, #216]	@ (8003bb0 <HAL_UART_RxCpltCallback+0x11c>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b7e      	cmp	r3, #126	@ 0x7e
 8003ada:	d92a      	bls.n	8003b32 <HAL_UART_RxCpltCallback+0x9e>
			receivedData6[receivedIndex6] = '\0';  // Null-terminate
 8003adc:	4b34      	ldr	r3, [pc, #208]	@ (8003bb0 <HAL_UART_RxCpltCallback+0x11c>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	4b31      	ldr	r3, [pc, #196]	@ (8003ba8 <HAL_UART_RxCpltCallback+0x114>)
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	5499      	strb	r1, [r3, r2]
			complete6 = 1;
 8003ae8:	4b32      	ldr	r3, [pc, #200]	@ (8003bb4 <HAL_UART_RxCpltCallback+0x120>)
 8003aea:	2201      	movs	r2, #1
 8003aec:	701a      	strb	r2, [r3, #0]

			if(strncmp(receivedData6, "PING", 4) == 0) {
 8003aee:	2204      	movs	r2, #4
 8003af0:	4931      	ldr	r1, [pc, #196]	@ (8003bb8 <HAL_UART_RxCpltCallback+0x124>)
 8003af2:	482d      	ldr	r0, [pc, #180]	@ (8003ba8 <HAL_UART_RxCpltCallback+0x114>)
 8003af4:	f009 fcce 	bl	800d494 <strncmp>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10a      	bne.n	8003b14 <HAL_UART_RxCpltCallback+0x80>
				HAL_UART_Transmit(&huart6, (uint8_t*)pong, strlen(pong), 100);
 8003afe:	68b8      	ldr	r0, [r7, #8]
 8003b00:	f7fc fbfe 	bl	8000300 <strlen>
 8003b04:	4603      	mov	r3, r0
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	2364      	movs	r3, #100	@ 0x64
 8003b0a:	68b9      	ldr	r1, [r7, #8]
 8003b0c:	482b      	ldr	r0, [pc, #172]	@ (8003bbc <HAL_UART_RxCpltCallback+0x128>)
 8003b0e:	f004 ff65 	bl	80089dc <HAL_UART_Transmit>
 8003b12:	e008      	b.n	8003b26 <HAL_UART_RxCpltCallback+0x92>
			} else {
				HAL_UART_Transmit(&huart3, (uint8_t*)receivedData6, receivedIndex6, HAL_MAX_DELAY);
 8003b14:	4b26      	ldr	r3, [pc, #152]	@ (8003bb0 <HAL_UART_RxCpltCallback+0x11c>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b1e:	4922      	ldr	r1, [pc, #136]	@ (8003ba8 <HAL_UART_RxCpltCallback+0x114>)
 8003b20:	4827      	ldr	r0, [pc, #156]	@ (8003bc0 <HAL_UART_RxCpltCallback+0x12c>)
 8003b22:	f004 ff5b 	bl	80089dc <HAL_UART_Transmit>
			}
			receivedIndex = 0;
 8003b26:	4b1e      	ldr	r3, [pc, #120]	@ (8003ba0 <HAL_UART_RxCpltCallback+0x10c>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	701a      	strb	r2, [r3, #0]
			receivedIndex6 = 0;
 8003b2c:	4b20      	ldr	r3, [pc, #128]	@ (8003bb0 <HAL_UART_RxCpltCallback+0x11c>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart6, &rxBuffer, 1);
 8003b32:	2201      	movs	r2, #1
 8003b34:	491b      	ldr	r1, [pc, #108]	@ (8003ba4 <HAL_UART_RxCpltCallback+0x110>)
 8003b36:	4821      	ldr	r0, [pc, #132]	@ (8003bbc <HAL_UART_RxCpltCallback+0x128>)
 8003b38:	f005 f838 	bl	8008bac <HAL_UART_Receive_IT>
	}
    if (huart->Instance == USART3) {
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a20      	ldr	r2, [pc, #128]	@ (8003bc4 <HAL_UART_RxCpltCallback+0x130>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d121      	bne.n	8003b8a <HAL_UART_RxCpltCallback+0xf6>
		receivedData[receivedIndex++] = rxBuffer;
 8003b46:	4b16      	ldr	r3, [pc, #88]	@ (8003ba0 <HAL_UART_RxCpltCallback+0x10c>)
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	b2d1      	uxtb	r1, r2
 8003b4e:	4a14      	ldr	r2, [pc, #80]	@ (8003ba0 <HAL_UART_RxCpltCallback+0x10c>)
 8003b50:	7011      	strb	r1, [r2, #0]
 8003b52:	461a      	mov	r2, r3
 8003b54:	4b13      	ldr	r3, [pc, #76]	@ (8003ba4 <HAL_UART_RxCpltCallback+0x110>)
 8003b56:	7819      	ldrb	r1, [r3, #0]
 8003b58:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc8 <HAL_UART_RxCpltCallback+0x134>)
 8003b5a:	5499      	strb	r1, [r3, r2]
		if (rxBuffer == '\r' || receivedIndex >= MSG_BUFFER_SIZE) {
 8003b5c:	4b11      	ldr	r3, [pc, #68]	@ (8003ba4 <HAL_UART_RxCpltCallback+0x110>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b0d      	cmp	r3, #13
 8003b62:	d004      	beq.n	8003b6e <HAL_UART_RxCpltCallback+0xda>
 8003b64:	4b0e      	ldr	r3, [pc, #56]	@ (8003ba0 <HAL_UART_RxCpltCallback+0x10c>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	b25b      	sxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	da08      	bge.n	8003b80 <HAL_UART_RxCpltCallback+0xec>
			receivedData[receivedIndex] = '\0';
 8003b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8003ba0 <HAL_UART_RxCpltCallback+0x10c>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	461a      	mov	r2, r3
 8003b74:	4b14      	ldr	r3, [pc, #80]	@ (8003bc8 <HAL_UART_RxCpltCallback+0x134>)
 8003b76:	2100      	movs	r1, #0
 8003b78:	5499      	strb	r1, [r3, r2]
			complete=1;
 8003b7a:	4b14      	ldr	r3, [pc, #80]	@ (8003bcc <HAL_UART_RxCpltCallback+0x138>)
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart3, &rxBuffer, 1);
 8003b80:	2201      	movs	r2, #1
 8003b82:	4908      	ldr	r1, [pc, #32]	@ (8003ba4 <HAL_UART_RxCpltCallback+0x110>)
 8003b84:	480e      	ldr	r0, [pc, #56]	@ (8003bc0 <HAL_UART_RxCpltCallback+0x12c>)
 8003b86:	f005 f811 	bl	8008bac <HAL_UART_Receive_IT>
	}
}
 8003b8a:	bf00      	nop
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	08010e58 	.word	0x08010e58
 8003b98:	08010e60 	.word	0x08010e60
 8003b9c:	40011400 	.word	0x40011400
 8003ba0:	20000898 	.word	0x20000898
 8003ba4:	20000794 	.word	0x20000794
 8003ba8:	20000818 	.word	0x20000818
 8003bac:	20000795 	.word	0x20000795
 8003bb0:	20000899 	.word	0x20000899
 8003bb4:	2000089b 	.word	0x2000089b
 8003bb8:	08010e68 	.word	0x08010e68
 8003bbc:	20000a88 	.word	0x20000a88
 8003bc0:	20000a00 	.word	0x20000a00
 8003bc4:	40004800 	.word	0x40004800
 8003bc8:	20000798 	.word	0x20000798
 8003bcc:	2000089a 	.word	0x2000089a

08003bd0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003bd4:	4b14      	ldr	r3, [pc, #80]	@ (8003c28 <MX_USART3_UART_Init+0x58>)
 8003bd6:	4a15      	ldr	r2, [pc, #84]	@ (8003c2c <MX_USART3_UART_Init+0x5c>)
 8003bd8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003bda:	4b13      	ldr	r3, [pc, #76]	@ (8003c28 <MX_USART3_UART_Init+0x58>)
 8003bdc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003be0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003be2:	4b11      	ldr	r3, [pc, #68]	@ (8003c28 <MX_USART3_UART_Init+0x58>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003be8:	4b0f      	ldr	r3, [pc, #60]	@ (8003c28 <MX_USART3_UART_Init+0x58>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003bee:	4b0e      	ldr	r3, [pc, #56]	@ (8003c28 <MX_USART3_UART_Init+0x58>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8003c28 <MX_USART3_UART_Init+0x58>)
 8003bf6:	220c      	movs	r2, #12
 8003bf8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8003c28 <MX_USART3_UART_Init+0x58>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c00:	4b09      	ldr	r3, [pc, #36]	@ (8003c28 <MX_USART3_UART_Init+0x58>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c06:	4b08      	ldr	r3, [pc, #32]	@ (8003c28 <MX_USART3_UART_Init+0x58>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c0c:	4b06      	ldr	r3, [pc, #24]	@ (8003c28 <MX_USART3_UART_Init+0x58>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003c12:	4805      	ldr	r0, [pc, #20]	@ (8003c28 <MX_USART3_UART_Init+0x58>)
 8003c14:	f004 fe94 	bl	8008940 <HAL_UART_Init>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003c1e:	f7ff fa61 	bl	80030e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003c22:	bf00      	nop
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	20000a00 	.word	0x20000a00
 8003c2c:	40004800 	.word	0x40004800

08003c30 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003c34:	4b14      	ldr	r3, [pc, #80]	@ (8003c88 <MX_USART6_UART_Init+0x58>)
 8003c36:	4a15      	ldr	r2, [pc, #84]	@ (8003c8c <MX_USART6_UART_Init+0x5c>)
 8003c38:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003c3a:	4b13      	ldr	r3, [pc, #76]	@ (8003c88 <MX_USART6_UART_Init+0x58>)
 8003c3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003c40:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003c42:	4b11      	ldr	r3, [pc, #68]	@ (8003c88 <MX_USART6_UART_Init+0x58>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003c48:	4b0f      	ldr	r3, [pc, #60]	@ (8003c88 <MX_USART6_UART_Init+0x58>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8003c88 <MX_USART6_UART_Init+0x58>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003c54:	4b0c      	ldr	r3, [pc, #48]	@ (8003c88 <MX_USART6_UART_Init+0x58>)
 8003c56:	220c      	movs	r2, #12
 8003c58:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c88 <MX_USART6_UART_Init+0x58>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c60:	4b09      	ldr	r3, [pc, #36]	@ (8003c88 <MX_USART6_UART_Init+0x58>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c66:	4b08      	ldr	r3, [pc, #32]	@ (8003c88 <MX_USART6_UART_Init+0x58>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c6c:	4b06      	ldr	r3, [pc, #24]	@ (8003c88 <MX_USART6_UART_Init+0x58>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003c72:	4805      	ldr	r0, [pc, #20]	@ (8003c88 <MX_USART6_UART_Init+0x58>)
 8003c74:	f004 fe64 	bl	8008940 <HAL_UART_Init>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8003c7e:	f7ff fa31 	bl	80030e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003c82:	bf00      	nop
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20000a88 	.word	0x20000a88
 8003c8c:	40011400 	.word	0x40011400

08003c90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b0b0      	sub	sp, #192	@ 0xc0
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c98:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	605a      	str	r2, [r3, #4]
 8003ca2:	609a      	str	r2, [r3, #8]
 8003ca4:	60da      	str	r2, [r3, #12]
 8003ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ca8:	f107 031c 	add.w	r3, r7, #28
 8003cac:	2290      	movs	r2, #144	@ 0x90
 8003cae:	2100      	movs	r1, #0
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f009 fbe7 	bl	800d484 <memset>
  if(uartHandle->Instance==USART3)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a4b      	ldr	r2, [pc, #300]	@ (8003de8 <HAL_UART_MspInit+0x158>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d145      	bne.n	8003d4c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003cc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003cc4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003cca:	f107 031c 	add.w	r3, r7, #28
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f002 fb6c 	bl	80063ac <HAL_RCCEx_PeriphCLKConfig>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003cda:	f7ff fa03 	bl	80030e4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003cde:	4b43      	ldr	r3, [pc, #268]	@ (8003dec <HAL_UART_MspInit+0x15c>)
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce2:	4a42      	ldr	r2, [pc, #264]	@ (8003dec <HAL_UART_MspInit+0x15c>)
 8003ce4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ce8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cea:	4b40      	ldr	r3, [pc, #256]	@ (8003dec <HAL_UART_MspInit+0x15c>)
 8003cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cf2:	61bb      	str	r3, [r7, #24]
 8003cf4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cf6:	4b3d      	ldr	r3, [pc, #244]	@ (8003dec <HAL_UART_MspInit+0x15c>)
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cfa:	4a3c      	ldr	r2, [pc, #240]	@ (8003dec <HAL_UART_MspInit+0x15c>)
 8003cfc:	f043 0308 	orr.w	r3, r3, #8
 8003d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d02:	4b3a      	ldr	r3, [pc, #232]	@ (8003dec <HAL_UART_MspInit+0x15c>)
 8003d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003d0e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003d12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d16:	2302      	movs	r3, #2
 8003d18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d22:	2303      	movs	r3, #3
 8003d24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003d28:	2307      	movs	r3, #7
 8003d2a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d2e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003d32:	4619      	mov	r1, r3
 8003d34:	482e      	ldr	r0, [pc, #184]	@ (8003df0 <HAL_UART_MspInit+0x160>)
 8003d36:	f000 fdd1 	bl	80048dc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	2105      	movs	r1, #5
 8003d3e:	2027      	movs	r0, #39	@ 0x27
 8003d40:	f000 fd10 	bl	8004764 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003d44:	2027      	movs	r0, #39	@ 0x27
 8003d46:	f000 fd29 	bl	800479c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003d4a:	e048      	b.n	8003dde <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART6)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a28      	ldr	r2, [pc, #160]	@ (8003df4 <HAL_UART_MspInit+0x164>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d143      	bne.n	8003dde <HAL_UART_MspInit+0x14e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003d56:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003d5a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d60:	f107 031c 	add.w	r3, r7, #28
 8003d64:	4618      	mov	r0, r3
 8003d66:	f002 fb21 	bl	80063ac <HAL_RCCEx_PeriphCLKConfig>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <HAL_UART_MspInit+0xe4>
      Error_Handler();
 8003d70:	f7ff f9b8 	bl	80030e4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003d74:	4b1d      	ldr	r3, [pc, #116]	@ (8003dec <HAL_UART_MspInit+0x15c>)
 8003d76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d78:	4a1c      	ldr	r2, [pc, #112]	@ (8003dec <HAL_UART_MspInit+0x15c>)
 8003d7a:	f043 0320 	orr.w	r3, r3, #32
 8003d7e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d80:	4b1a      	ldr	r3, [pc, #104]	@ (8003dec <HAL_UART_MspInit+0x15c>)
 8003d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d84:	f003 0320 	and.w	r3, r3, #32
 8003d88:	613b      	str	r3, [r7, #16]
 8003d8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d8c:	4b17      	ldr	r3, [pc, #92]	@ (8003dec <HAL_UART_MspInit+0x15c>)
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d90:	4a16      	ldr	r2, [pc, #88]	@ (8003dec <HAL_UART_MspInit+0x15c>)
 8003d92:	f043 0304 	orr.w	r3, r3, #4
 8003d96:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d98:	4b14      	ldr	r3, [pc, #80]	@ (8003dec <HAL_UART_MspInit+0x15c>)
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003da4:	23c0      	movs	r3, #192	@ 0xc0
 8003da6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003daa:	2302      	movs	r3, #2
 8003dac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db0:	2300      	movs	r3, #0
 8003db2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003db6:	2303      	movs	r3, #3
 8003db8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003dbc:	2308      	movs	r3, #8
 8003dbe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dc2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	480b      	ldr	r0, [pc, #44]	@ (8003df8 <HAL_UART_MspInit+0x168>)
 8003dca:	f000 fd87 	bl	80048dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003dce:	2200      	movs	r2, #0
 8003dd0:	2105      	movs	r1, #5
 8003dd2:	2047      	movs	r0, #71	@ 0x47
 8003dd4:	f000 fcc6 	bl	8004764 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003dd8:	2047      	movs	r0, #71	@ 0x47
 8003dda:	f000 fcdf 	bl	800479c <HAL_NVIC_EnableIRQ>
}
 8003dde:	bf00      	nop
 8003de0:	37c0      	adds	r7, #192	@ 0xc0
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	40004800 	.word	0x40004800
 8003dec:	40023800 	.word	0x40023800
 8003df0:	40020c00 	.word	0x40020c00
 8003df4:	40011400 	.word	0x40011400
 8003df8:	40020800 	.word	0x40020800

08003dfc <init_bmp280>:

uint8_t state = WAITING_FOR_PING;

//___________________________________________SENSOR DE PRESSAO E TEMPERATURA____________________________________________

void init_bmp280(int targetID){
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
	if (targetID == 4) {
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d157      	bne.n	8003eba <init_bmp280+0xbe>
		printf("\r\nBMP280 Test Application\r\n");
 8003e0a:	482e      	ldr	r0, [pc, #184]	@ (8003ec4 <init_bmp280+0xc8>)
 8003e0c:	f009 fa06 	bl	800d21c <puts>

		bmp280_params_t params;
		bmp280_init_default_params(&params);
 8003e10:	f107 030c 	add.w	r3, r7, #12
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fd f9a3 	bl	8001160 <bmp280_init_default_params>
		params.mode = BMP280_MODE_NORMAL;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	733b      	strb	r3, [r7, #12]
		params.filter = BMP280_FILTER_OFF;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	737b      	strb	r3, [r7, #13]
		params.oversampling_pressure = BMP280_STANDARD;
 8003e22:	2303      	movs	r3, #3
 8003e24:	73bb      	strb	r3, [r7, #14]
		params.oversampling_temperature = BMP280_STANDARD;
 8003e26:	2303      	movs	r3, #3
 8003e28:	73fb      	strb	r3, [r7, #15]
		params.oversampling_humidity = BMP280_STANDARD;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	743b      	strb	r3, [r7, #16]
		params.standby = BMP280_STANDBY_250;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	747b      	strb	r3, [r7, #17]

		if (!bmp280_init(&bmp280, &params)) {
 8003e32:	f107 030c 	add.w	r3, r7, #12
 8003e36:	4619      	mov	r1, r3
 8003e38:	4823      	ldr	r0, [pc, #140]	@ (8003ec8 <init_bmp280+0xcc>)
 8003e3a:	f7fd fb0b 	bl	8001454 <bmp280_init>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	f083 0301 	eor.w	r3, r3, #1
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d011      	beq.n	8003e6e <init_bmp280+0x72>
			int len = snprintf(debugMsg, sizeof(debugMsg), "Erro ao inicializar o BMP280\r\n");
 8003e4a:	4a20      	ldr	r2, [pc, #128]	@ (8003ecc <init_bmp280+0xd0>)
 8003e4c:	2180      	movs	r1, #128	@ 0x80
 8003e4e:	4820      	ldr	r0, [pc, #128]	@ (8003ed0 <init_bmp280+0xd4>)
 8003e50:	f009 f9ec 	bl	800d22c <sniprintf>
 8003e54:	6178      	str	r0, [r7, #20]
			HAL_UART_Transmit_IT(&huart3, (uint8_t*)debugMsg, len);
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	491c      	ldr	r1, [pc, #112]	@ (8003ed0 <init_bmp280+0xd4>)
 8003e5e:	481d      	ldr	r0, [pc, #116]	@ (8003ed4 <init_bmp280+0xd8>)
 8003e60:	f004 fe46 	bl	8008af0 <HAL_UART_Transmit_IT>
			HAL_Delay(100);
 8003e64:	2064      	movs	r0, #100	@ 0x64
 8003e66:	f000 fba1 	bl	80045ac <HAL_Delay>

			while (1);
 8003e6a:	bf00      	nop
 8003e6c:	e7fd      	b.n	8003e6a <init_bmp280+0x6e>
		}

		int len = snprintf(debugMsg, sizeof(debugMsg), "Sensor inicializado com sucesso\r\n");
 8003e6e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ed8 <init_bmp280+0xdc>)
 8003e70:	2180      	movs	r1, #128	@ 0x80
 8003e72:	4817      	ldr	r0, [pc, #92]	@ (8003ed0 <init_bmp280+0xd4>)
 8003e74:	f009 f9da 	bl	800d22c <sniprintf>
 8003e78:	61f8      	str	r0, [r7, #28]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*)debugMsg, len);
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	461a      	mov	r2, r3
 8003e80:	4913      	ldr	r1, [pc, #76]	@ (8003ed0 <init_bmp280+0xd4>)
 8003e82:	4814      	ldr	r0, [pc, #80]	@ (8003ed4 <init_bmp280+0xd8>)
 8003e84:	f004 fe34 	bl	8008af0 <HAL_UART_Transmit_IT>
		HAL_Delay(100);
 8003e88:	2064      	movs	r0, #100	@ 0x64
 8003e8a:	f000 fb8f 	bl	80045ac <HAL_Delay>
		if (bmp280.id == BMP280_CHIP_ID) {
 8003e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8003ec8 <init_bmp280+0xcc>)
 8003e90:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003e94:	2b58      	cmp	r3, #88	@ 0x58
 8003e96:	d10d      	bne.n	8003eb4 <init_bmp280+0xb8>
			int len = snprintf(debugMsg, sizeof(debugMsg), "Sensor detectado: BMP280\r\n");
 8003e98:	4a10      	ldr	r2, [pc, #64]	@ (8003edc <init_bmp280+0xe0>)
 8003e9a:	2180      	movs	r1, #128	@ 0x80
 8003e9c:	480c      	ldr	r0, [pc, #48]	@ (8003ed0 <init_bmp280+0xd4>)
 8003e9e:	f009 f9c5 	bl	800d22c <sniprintf>
 8003ea2:	61b8      	str	r0, [r7, #24]
			HAL_UART_Transmit_IT(&huart3, (uint8_t*)debugMsg, len);
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4909      	ldr	r1, [pc, #36]	@ (8003ed0 <init_bmp280+0xd4>)
 8003eac:	4809      	ldr	r0, [pc, #36]	@ (8003ed4 <init_bmp280+0xd8>)
 8003eae:	f004 fe1f 	bl	8008af0 <HAL_UART_Transmit_IT>
		} else {
			printf("ERROR\r\n");
		}
	}
}
 8003eb2:	e002      	b.n	8003eba <init_bmp280+0xbe>
			printf("ERROR\r\n");
 8003eb4:	480a      	ldr	r0, [pc, #40]	@ (8003ee0 <init_bmp280+0xe4>)
 8003eb6:	f009 f9b1 	bl	800d21c <puts>
}
 8003eba:	bf00      	nop
 8003ebc:	3720      	adds	r7, #32
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	08010e70 	.word	0x08010e70
 8003ec8:	20000180 	.word	0x20000180
 8003ecc:	08010e8c 	.word	0x08010e8c
 8003ed0:	20000b50 	.word	0x20000b50
 8003ed4:	20000a00 	.word	0x20000a00
 8003ed8:	08010eac 	.word	0x08010eac
 8003edc:	08010ed0 	.word	0x08010ed0
 8003ee0:	08010eec 	.word	0x08010eec

08003ee4 <read_temp>:

float read_temp(int targetID){
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af02      	add	r7, sp, #8
 8003eea:	6078      	str	r0, [r7, #4]
	if (targetID == 4) {
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d125      	bne.n	8003f3e <read_temp+0x5a>
		if (bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8003ef2:	4b15      	ldr	r3, [pc, #84]	@ (8003f48 <read_temp+0x64>)
 8003ef4:	4a15      	ldr	r2, [pc, #84]	@ (8003f4c <read_temp+0x68>)
 8003ef6:	4916      	ldr	r1, [pc, #88]	@ (8003f50 <read_temp+0x6c>)
 8003ef8:	4816      	ldr	r0, [pc, #88]	@ (8003f54 <read_temp+0x70>)
 8003efa:	f7fd ff13 	bl	8001d24 <bmp280_read_float>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d014      	beq.n	8003f2e <read_temp+0x4a>
			int len = snprintf(debugMsg, sizeof(debugMsg), "Temperature: %.2f C\r\n", temperature);
 8003f04:	4b12      	ldr	r3, [pc, #72]	@ (8003f50 <read_temp+0x6c>)
 8003f06:	edd3 7a00 	vldr	s15, [r3]
 8003f0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f0e:	ed8d 7b00 	vstr	d7, [sp]
 8003f12:	4a11      	ldr	r2, [pc, #68]	@ (8003f58 <read_temp+0x74>)
 8003f14:	2180      	movs	r1, #128	@ 0x80
 8003f16:	4811      	ldr	r0, [pc, #68]	@ (8003f5c <read_temp+0x78>)
 8003f18:	f009 f988 	bl	800d22c <sniprintf>
 8003f1c:	60f8      	str	r0, [r7, #12]
			HAL_UART_Transmit_IT(&huart3, (uint8_t*)debugMsg, len);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	461a      	mov	r2, r3
 8003f24:	490d      	ldr	r1, [pc, #52]	@ (8003f5c <read_temp+0x78>)
 8003f26:	480e      	ldr	r0, [pc, #56]	@ (8003f60 <read_temp+0x7c>)
 8003f28:	f004 fde2 	bl	8008af0 <HAL_UART_Transmit_IT>
 8003f2c:	e002      	b.n	8003f34 <read_temp+0x50>
		} else {
			printf("Error\r\n");
 8003f2e:	480d      	ldr	r0, [pc, #52]	@ (8003f64 <read_temp+0x80>)
 8003f30:	f009 f974 	bl	800d21c <puts>
		}
		return temperature;
 8003f34:	4b06      	ldr	r3, [pc, #24]	@ (8003f50 <read_temp+0x6c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	ee07 3a90 	vmov	s15, r3
 8003f3c:	e7ff      	b.n	8003f3e <read_temp+0x5a>
	}
}
 8003f3e:	eeb0 0a67 	vmov.f32	s0, s15
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	20000b4c 	.word	0x20000b4c
 8003f4c:	20000b48 	.word	0x20000b48
 8003f50:	20000b44 	.word	0x20000b44
 8003f54:	20000180 	.word	0x20000180
 8003f58:	08010ef4 	.word	0x08010ef4
 8003f5c:	20000b50 	.word	0x20000b50
 8003f60:	20000a00 	.word	0x20000a00
 8003f64:	08010f0c 	.word	0x08010f0c

08003f68 <read_pressure>:

float read_pressure(int targetID){
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af02      	add	r7, sp, #8
 8003f6e:	6078      	str	r0, [r7, #4]
	if (targetID == 4) {
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d13e      	bne.n	8003ff4 <read_pressure+0x8c>
		int len;
		if (bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8003f76:	4b22      	ldr	r3, [pc, #136]	@ (8004000 <read_pressure+0x98>)
 8003f78:	4a22      	ldr	r2, [pc, #136]	@ (8004004 <read_pressure+0x9c>)
 8003f7a:	4923      	ldr	r1, [pc, #140]	@ (8004008 <read_pressure+0xa0>)
 8003f7c:	4823      	ldr	r0, [pc, #140]	@ (800400c <read_pressure+0xa4>)
 8003f7e:	f7fd fed1 	bl	8001d24 <bmp280_read_float>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d02d      	beq.n	8003fe4 <read_pressure+0x7c>
			len = snprintf(debugMsg, sizeof(debugMsg),"Pressure: %.2f Pa\r\n", pressure);
 8003f88:	4b1e      	ldr	r3, [pc, #120]	@ (8004004 <read_pressure+0x9c>)
 8003f8a:	edd3 7a00 	vldr	s15, [r3]
 8003f8e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f92:	ed8d 7b00 	vstr	d7, [sp]
 8003f96:	4a1e      	ldr	r2, [pc, #120]	@ (8004010 <read_pressure+0xa8>)
 8003f98:	2180      	movs	r1, #128	@ 0x80
 8003f9a:	481e      	ldr	r0, [pc, #120]	@ (8004014 <read_pressure+0xac>)
 8003f9c:	f009 f946 	bl	800d22c <sniprintf>
 8003fa0:	60f8      	str	r0, [r7, #12]
			HAL_UART_Transmit_IT(&huart3, (uint8_t*)debugMsg, len);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	491a      	ldr	r1, [pc, #104]	@ (8004014 <read_pressure+0xac>)
 8003faa:	481b      	ldr	r0, [pc, #108]	@ (8004018 <read_pressure+0xb0>)
 8003fac:	f004 fda0 	bl	8008af0 <HAL_UART_Transmit_IT>

			if (bmp280.id == BMP280_CHIP_ID) {
 8003fb0:	4b16      	ldr	r3, [pc, #88]	@ (800400c <read_pressure+0xa4>)
 8003fb2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003fb6:	2b58      	cmp	r3, #88	@ 0x58
 8003fb8:	d117      	bne.n	8003fea <read_pressure+0x82>
				len = snprintf(debugMsg, sizeof(debugMsg),"Humity: %.2f %%\r\n", humidity);
 8003fba:	4b11      	ldr	r3, [pc, #68]	@ (8004000 <read_pressure+0x98>)
 8003fbc:	edd3 7a00 	vldr	s15, [r3]
 8003fc0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003fc4:	ed8d 7b00 	vstr	d7, [sp]
 8003fc8:	4a14      	ldr	r2, [pc, #80]	@ (800401c <read_pressure+0xb4>)
 8003fca:	2180      	movs	r1, #128	@ 0x80
 8003fcc:	4811      	ldr	r0, [pc, #68]	@ (8004014 <read_pressure+0xac>)
 8003fce:	f009 f92d 	bl	800d22c <sniprintf>
 8003fd2:	60f8      	str	r0, [r7, #12]
				HAL_UART_Transmit_IT(&huart3, (uint8_t*)debugMsg, len);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	461a      	mov	r2, r3
 8003fda:	490e      	ldr	r1, [pc, #56]	@ (8004014 <read_pressure+0xac>)
 8003fdc:	480e      	ldr	r0, [pc, #56]	@ (8004018 <read_pressure+0xb0>)
 8003fde:	f004 fd87 	bl	8008af0 <HAL_UART_Transmit_IT>
 8003fe2:	e002      	b.n	8003fea <read_pressure+0x82>
			}
		} else {
			printf("Error\r\n");
 8003fe4:	480e      	ldr	r0, [pc, #56]	@ (8004020 <read_pressure+0xb8>)
 8003fe6:	f009 f919 	bl	800d21c <puts>
		}
		return pressure;
 8003fea:	4b06      	ldr	r3, [pc, #24]	@ (8004004 <read_pressure+0x9c>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	ee07 3a90 	vmov	s15, r3
 8003ff2:	e7ff      	b.n	8003ff4 <read_pressure+0x8c>
	}
}
 8003ff4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	20000b4c 	.word	0x20000b4c
 8004004:	20000b48 	.word	0x20000b48
 8004008:	20000b44 	.word	0x20000b44
 800400c:	20000180 	.word	0x20000180
 8004010:	08010f14 	.word	0x08010f14
 8004014:	20000b50 	.word	0x20000b50
 8004018:	20000a00 	.word	0x20000a00
 800401c:	08010f28 	.word	0x08010f28
 8004020:	08010f0c 	.word	0x08010f0c

08004024 <init_imu>:


//__________________________________________________SENSOR INERTIAL ICM20608____________________________________________

void init_imu(int targetID) {
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
	if (targetID == 5) {
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b05      	cmp	r3, #5
 8004030:	d116      	bne.n	8004060 <init_imu+0x3c>
		if (ICM20608_Init(&hi2c1) == HAL_OK) {
 8004032:	480d      	ldr	r0, [pc, #52]	@ (8004068 <init_imu+0x44>)
 8004034:	f7fe fd9e 	bl	8002b74 <ICM20608_Init>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10d      	bne.n	800405a <init_imu+0x36>
			int len = snprintf(debugMsg, sizeof(debugMsg), "IMU initialized\n");
 800403e:	4a0b      	ldr	r2, [pc, #44]	@ (800406c <init_imu+0x48>)
 8004040:	2180      	movs	r1, #128	@ 0x80
 8004042:	480b      	ldr	r0, [pc, #44]	@ (8004070 <init_imu+0x4c>)
 8004044:	f009 f8f2 	bl	800d22c <sniprintf>
 8004048:	60f8      	str	r0, [r7, #12]
			HAL_UART_Transmit_IT(&huart3, (uint8_t*)debugMsg, len);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	b29b      	uxth	r3, r3
 800404e:	461a      	mov	r2, r3
 8004050:	4907      	ldr	r1, [pc, #28]	@ (8004070 <init_imu+0x4c>)
 8004052:	4808      	ldr	r0, [pc, #32]	@ (8004074 <init_imu+0x50>)
 8004054:	f004 fd4c 	bl	8008af0 <HAL_UART_Transmit_IT>
		} else {
			printf("Error Read IMU\n");
		}
	}
}
 8004058:	e002      	b.n	8004060 <init_imu+0x3c>
			printf("Error Read IMU\n");
 800405a:	4807      	ldr	r0, [pc, #28]	@ (8004078 <init_imu+0x54>)
 800405c:	f009 f8de 	bl	800d21c <puts>
}
 8004060:	bf00      	nop
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	200006e8 	.word	0x200006e8
 800406c:	08010f3c 	.word	0x08010f3c
 8004070:	20000b50 	.word	0x20000b50
 8004074:	20000a00 	.word	0x20000a00
 8004078:	08010f50 	.word	0x08010f50

0800407c <read_imu>:

void read_imu(int targetID) {
 800407c:	b580      	push	{r7, lr}
 800407e:	b08a      	sub	sp, #40	@ 0x28
 8004080:	af06      	add	r7, sp, #24
 8004082:	6078      	str	r0, [r7, #4]
	if (targetID == 5) {
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b05      	cmp	r3, #5
 8004088:	d14c      	bne.n	8004124 <read_imu+0xa8>
		if (ICM20608_ReadAll(&imu) == HAL_OK) {
 800408a:	4828      	ldr	r0, [pc, #160]	@ (800412c <read_imu+0xb0>)
 800408c:	f7fe fe04 	bl	8002c98 <ICM20608_ReadAll>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d146      	bne.n	8004124 <read_imu+0xa8>
			int len = snprintf(debugMsg, sizeof(debugMsg), "Ax: %.2f Ay: %.2f Az: %.2f\n", imu.accel_x, imu.accel_y, imu.accel_z);
 8004096:	4b25      	ldr	r3, [pc, #148]	@ (800412c <read_imu+0xb0>)
 8004098:	edd3 7a00 	vldr	s15, [r3]
 800409c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80040a0:	4b22      	ldr	r3, [pc, #136]	@ (800412c <read_imu+0xb0>)
 80040a2:	edd3 6a01 	vldr	s13, [r3, #4]
 80040a6:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80040aa:	4b20      	ldr	r3, [pc, #128]	@ (800412c <read_imu+0xb0>)
 80040ac:	edd3 5a02 	vldr	s11, [r3, #8]
 80040b0:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 80040b4:	ed8d 5b04 	vstr	d5, [sp, #16]
 80040b8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80040bc:	ed8d 7b00 	vstr	d7, [sp]
 80040c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004130 <read_imu+0xb4>)
 80040c2:	2180      	movs	r1, #128	@ 0x80
 80040c4:	481b      	ldr	r0, [pc, #108]	@ (8004134 <read_imu+0xb8>)
 80040c6:	f009 f8b1 	bl	800d22c <sniprintf>
 80040ca:	60f8      	str	r0, [r7, #12]
			HAL_UART_Transmit_IT(&huart3, (uint8_t*)debugMsg, len);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	461a      	mov	r2, r3
 80040d2:	4918      	ldr	r1, [pc, #96]	@ (8004134 <read_imu+0xb8>)
 80040d4:	4818      	ldr	r0, [pc, #96]	@ (8004138 <read_imu+0xbc>)
 80040d6:	f004 fd0b 	bl	8008af0 <HAL_UART_Transmit_IT>
			HAL_Delay(100);
 80040da:	2064      	movs	r0, #100	@ 0x64
 80040dc:	f000 fa66 	bl	80045ac <HAL_Delay>
			int len1 = snprintf(debugMsg, sizeof(debugMsg), "Gx: %.2f Gy: %.2f Gz: %.2f\n", imu.gyro_x, imu.gyro_y, imu.gyro_z);
 80040e0:	4b12      	ldr	r3, [pc, #72]	@ (800412c <read_imu+0xb0>)
 80040e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80040e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80040ea:	4b10      	ldr	r3, [pc, #64]	@ (800412c <read_imu+0xb0>)
 80040ec:	edd3 6a04 	vldr	s13, [r3, #16]
 80040f0:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80040f4:	4b0d      	ldr	r3, [pc, #52]	@ (800412c <read_imu+0xb0>)
 80040f6:	edd3 5a05 	vldr	s11, [r3, #20]
 80040fa:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 80040fe:	ed8d 5b04 	vstr	d5, [sp, #16]
 8004102:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004106:	ed8d 7b00 	vstr	d7, [sp]
 800410a:	4a0c      	ldr	r2, [pc, #48]	@ (800413c <read_imu+0xc0>)
 800410c:	2180      	movs	r1, #128	@ 0x80
 800410e:	4809      	ldr	r0, [pc, #36]	@ (8004134 <read_imu+0xb8>)
 8004110:	f009 f88c 	bl	800d22c <sniprintf>
 8004114:	60b8      	str	r0, [r7, #8]
			HAL_UART_Transmit_IT(&huart3, (uint8_t*)debugMsg, len1);
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	b29b      	uxth	r3, r3
 800411a:	461a      	mov	r2, r3
 800411c:	4905      	ldr	r1, [pc, #20]	@ (8004134 <read_imu+0xb8>)
 800411e:	4806      	ldr	r0, [pc, #24]	@ (8004138 <read_imu+0xbc>)
 8004120:	f004 fce6 	bl	8008af0 <HAL_UART_Transmit_IT>
		}
	}
}
 8004124:	bf00      	nop
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	20000b10 	.word	0x20000b10
 8004130:	08010f60 	.word	0x08010f60
 8004134:	20000b50 	.word	0x20000b50
 8004138:	20000a00 	.word	0x20000a00
 800413c:	08010f7c 	.word	0x08010f7c

08004140 <LoRa_Receive>:
	  printf("Failed to enter TX mode\n");
	}
	packet_id++;
}

int LoRa_Receive(){
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
	if(!(SX1278_LoRaEntryRx(&SX1278, 64, 2000))){
 8004146:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800414a:	2140      	movs	r1, #64	@ 0x40
 800414c:	4821      	ldr	r0, [pc, #132]	@ (80041d4 <LoRa_Receive+0x94>)
 800414e:	f7fc fe95 	bl	8000e7c <SX1278_LoRaEntryRx>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d104      	bne.n	8004162 <LoRa_Receive+0x22>
			printf("RX Mode Failed!\n");
 8004158:	481f      	ldr	r0, [pc, #124]	@ (80041d8 <LoRa_Receive+0x98>)
 800415a:	f009 f85f 	bl	800d21c <puts>
		    while (1);  // Halt or retry
 800415e:	bf00      	nop
 8004160:	e7fd      	b.n	800415e <LoRa_Receive+0x1e>
		}
	printf("RX Mode Successfully Set!\n");
 8004162:	481e      	ldr	r0, [pc, #120]	@ (80041dc <LoRa_Receive+0x9c>)
 8004164:	f009 f85a 	bl	800d21c <puts>
	int ret = SX1278_LoRaRxPacket(&SX1278);
 8004168:	481a      	ldr	r0, [pc, #104]	@ (80041d4 <LoRa_Receive+0x94>)
 800416a:	f7fc feec 	bl	8000f46 <SX1278_LoRaRxPacket>
 800416e:	4603      	mov	r3, r0
 8004170:	607b      	str	r3, [r7, #4]
	if (ret >= 0){
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	db27      	blt.n	80041c8 <LoRa_Receive+0x88>
		SX1278_read(&SX1278, rx_buffer, ret);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	b2db      	uxtb	r3, r3
 800417c:	461a      	mov	r2, r3
 800417e:	4918      	ldr	r1, [pc, #96]	@ (80041e0 <LoRa_Receive+0xa0>)
 8004180:	4814      	ldr	r0, [pc, #80]	@ (80041d4 <LoRa_Receive+0x94>)
 8004182:	f7fc ff24 	bl	8000fce <SX1278_read>
		dest = rx_buffer[0];
 8004186:	4b16      	ldr	r3, [pc, #88]	@ (80041e0 <LoRa_Receive+0xa0>)
 8004188:	781a      	ldrb	r2, [r3, #0]
 800418a:	4b16      	ldr	r3, [pc, #88]	@ (80041e4 <LoRa_Receive+0xa4>)
 800418c:	701a      	strb	r2, [r3, #0]
		src  = rx_buffer[1];
 800418e:	4b14      	ldr	r3, [pc, #80]	@ (80041e0 <LoRa_Receive+0xa0>)
 8004190:	785a      	ldrb	r2, [r3, #1]
 8004192:	4b15      	ldr	r3, [pc, #84]	@ (80041e8 <LoRa_Receive+0xa8>)
 8004194:	701a      	strb	r2, [r3, #0]
		rx_buffer[ret] = '\0';
 8004196:	4a12      	ldr	r2, [pc, #72]	@ (80041e0 <LoRa_Receive+0xa0>)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4413      	add	r3, r2
 800419c:	2200      	movs	r2, #0
 800419e:	701a      	strb	r2, [r3, #0]
		char* payload = (char*)&rx_buffer[2];
 80041a0:	4b12      	ldr	r3, [pc, #72]	@ (80041ec <LoRa_Receive+0xac>)
 80041a2:	603b      	str	r3, [r7, #0]

		if (dest == SLAVE_ID || dest == BROADCAST_ID){
 80041a4:	4b0f      	ldr	r3, [pc, #60]	@ (80041e4 <LoRa_Receive+0xa4>)
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d003      	beq.n	80041b4 <LoRa_Receive+0x74>
 80041ac:	4b0d      	ldr	r3, [pc, #52]	@ (80041e4 <LoRa_Receive+0xa4>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	2bff      	cmp	r3, #255	@ 0xff
 80041b2:	d106      	bne.n	80041c2 <LoRa_Receive+0x82>
			printf("[DATA] From 0x%02X: %s\r\n", src, payload);
 80041b4:	4b0c      	ldr	r3, [pc, #48]	@ (80041e8 <LoRa_Receive+0xa8>)
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	4619      	mov	r1, r3
 80041bc:	480c      	ldr	r0, [pc, #48]	@ (80041f0 <LoRa_Receive+0xb0>)
 80041be:	f008 ffc5 	bl	800d14c <iprintf>
		}
		HAL_Delay(10);
 80041c2:	200a      	movs	r0, #10
 80041c4:	f000 f9f2 	bl	80045ac <HAL_Delay>
	}
	return ret;
 80041c8:	687b      	ldr	r3, [r7, #4]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	20000bd0 	.word	0x20000bd0
 80041d8:	08010f98 	.word	0x08010f98
 80041dc:	08010fa8 	.word	0x08010fa8
 80041e0:	20000ce8 	.word	0x20000ce8
 80041e4:	20000d28 	.word	0x20000d28
 80041e8:	20000d29 	.word	0x20000d29
 80041ec:	20000cea 	.word	0x20000cea
 80041f0:	08011018 	.word	0x08011018

080041f4 <_write>:

    packet_id++;
    HAL_Delay(10);  // Optional delay after TX
}

int _write(int file, char *ptr, int len){
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
	(void)file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004200:	2300      	movs	r3, #0
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	e00a      	b.n	800421c <_write+0x28>
		HAL_UART_Transmit(&huart3, (uint8_t*) &ptr[DataIdx], 1, 100);
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	18d1      	adds	r1, r2, r3
 800420c:	2364      	movs	r3, #100	@ 0x64
 800420e:	2201      	movs	r2, #1
 8004210:	4807      	ldr	r0, [pc, #28]	@ (8004230 <_write+0x3c>)
 8004212:	f004 fbe3 	bl	80089dc <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	3301      	adds	r3, #1
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	429a      	cmp	r2, r3
 8004222:	dbf0      	blt.n	8004206 <_write+0x12>

	return len;
 8004224:	687b      	ldr	r3, [r7, #4]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3718      	adds	r7, #24
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	20000a00 	.word	0x20000a00

08004234 <Buzzer_PWM_Init>:
volatile uint8_t beep_active = 0;
volatile uint16_t beep_count = 0;
volatile uint16_t beep_duration = 100;
volatile uint16_t beep_pause = 100;

void Buzzer_PWM_Init(TIM_HandleTypeDef *htim, uint32_t channel) {
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
    HAL_TIM_PWM_Start(htim, channel);
 800423e:	6839      	ldr	r1, [r7, #0]
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f003 fbe5 	bl	8007a10 <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(htim, channel, 0);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d104      	bne.n	8004256 <Buzzer_PWM_Init+0x22>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2200      	movs	r2, #0
 8004252:	635a      	str	r2, [r3, #52]	@ 0x34
 8004254:	e023      	b.n	800429e <Buzzer_PWM_Init+0x6a>
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	2b04      	cmp	r3, #4
 800425a:	d104      	bne.n	8004266 <Buzzer_PWM_Init+0x32>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	2300      	movs	r3, #0
 8004262:	6393      	str	r3, [r2, #56]	@ 0x38
 8004264:	e01b      	b.n	800429e <Buzzer_PWM_Init+0x6a>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b08      	cmp	r3, #8
 800426a:	d104      	bne.n	8004276 <Buzzer_PWM_Init+0x42>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	2300      	movs	r3, #0
 8004272:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8004274:	e013      	b.n	800429e <Buzzer_PWM_Init+0x6a>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	2b0c      	cmp	r3, #12
 800427a:	d104      	bne.n	8004286 <Buzzer_PWM_Init+0x52>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	2300      	movs	r3, #0
 8004282:	6413      	str	r3, [r2, #64]	@ 0x40
 8004284:	e00b      	b.n	800429e <Buzzer_PWM_Init+0x6a>
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	2b10      	cmp	r3, #16
 800428a:	d104      	bne.n	8004296 <Buzzer_PWM_Init+0x62>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	2300      	movs	r3, #0
 8004292:	6593      	str	r3, [r2, #88]	@ 0x58
 8004294:	e003      	b.n	800429e <Buzzer_PWM_Init+0x6a>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	2300      	movs	r3, #0
 800429c:	65d3      	str	r3, [r2, #92]	@ 0x5c
    HAL_Delay(100);
 800429e:	2064      	movs	r0, #100	@ 0x64
 80042a0:	f000 f984 	bl	80045ac <HAL_Delay>
    int len = snprintf(debugMsg, sizeof(debugMsg), "Buzzer Init\n");
 80042a4:	4a08      	ldr	r2, [pc, #32]	@ (80042c8 <Buzzer_PWM_Init+0x94>)
 80042a6:	2180      	movs	r1, #128	@ 0x80
 80042a8:	4808      	ldr	r0, [pc, #32]	@ (80042cc <Buzzer_PWM_Init+0x98>)
 80042aa:	f008 ffbf 	bl	800d22c <sniprintf>
 80042ae:	60f8      	str	r0, [r7, #12]
    HAL_UART_Transmit(&huart3, (uint8_t*)debugMsg, len, HAL_MAX_DELAY); // Bloqueante
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	f04f 33ff 	mov.w	r3, #4294967295
 80042b8:	4904      	ldr	r1, [pc, #16]	@ (80042cc <Buzzer_PWM_Init+0x98>)
 80042ba:	4805      	ldr	r0, [pc, #20]	@ (80042d0 <Buzzer_PWM_Init+0x9c>)
 80042bc:	f004 fb8e 	bl	80089dc <HAL_UART_Transmit>
}
 80042c0:	bf00      	nop
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	08011144 	.word	0x08011144
 80042cc:	20000b50 	.word	0x20000b50
 80042d0:	20000a00 	.word	0x20000a00

080042d4 <init_buzzer>:

void init_buzzer(int targetID, int commandID, const char *params, int n) {
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
 80042e0:	603b      	str	r3, [r7, #0]
    if (targetID == 7) {
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2b07      	cmp	r3, #7
 80042e6:	d11d      	bne.n	8004324 <init_buzzer+0x50>
        for(uint8_t i = 0; i < n; i++) {
 80042e8:	2300      	movs	r3, #0
 80042ea:	75fb      	strb	r3, [r7, #23]
 80042ec:	e015      	b.n	800431a <init_buzzer+0x46>
            HAL_UART_Transmit(&huart3, (uint8_t*)"Start Buzzer\n", strlen("Start Buzzer\n"), HAL_MAX_DELAY);
 80042ee:	f04f 33ff 	mov.w	r3, #4294967295
 80042f2:	220d      	movs	r2, #13
 80042f4:	4914      	ldr	r1, [pc, #80]	@ (8004348 <init_buzzer+0x74>)
 80042f6:	4815      	ldr	r0, [pc, #84]	@ (800434c <init_buzzer+0x78>)
 80042f8:	f004 fb70 	bl	80089dc <HAL_UART_Transmit>
            HAL_Delay(100);
 80042fc:	2064      	movs	r0, #100	@ 0x64
 80042fe:	f000 f955 	bl	80045ac <HAL_Delay>
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 5000);
 8004302:	4b13      	ldr	r3, [pc, #76]	@ (8004350 <init_buzzer+0x7c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f241 3288 	movw	r2, #5000	@ 0x1388
 800430a:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800430c:	4b10      	ldr	r3, [pc, #64]	@ (8004350 <init_buzzer+0x7c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2200      	movs	r2, #0
 8004312:	635a      	str	r2, [r3, #52]	@ 0x34
        for(uint8_t i = 0; i < n; i++) {
 8004314:	7dfb      	ldrb	r3, [r7, #23]
 8004316:	3301      	adds	r3, #1
 8004318:	75fb      	strb	r3, [r7, #23]
 800431a:	7dfb      	ldrb	r3, [r7, #23]
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	429a      	cmp	r2, r3
 8004320:	dce5      	bgt.n	80042ee <init_buzzer+0x1a>
        }
    } else {
        int len = snprintf(debugMsg, sizeof(debugMsg), "Invalid Target");
        HAL_UART_Transmit(&huart3, (uint8_t*)debugMsg, len, HAL_MAX_DELAY);
    }
}
 8004322:	e00d      	b.n	8004340 <init_buzzer+0x6c>
        int len = snprintf(debugMsg, sizeof(debugMsg), "Invalid Target");
 8004324:	4a0b      	ldr	r2, [pc, #44]	@ (8004354 <init_buzzer+0x80>)
 8004326:	2180      	movs	r1, #128	@ 0x80
 8004328:	480b      	ldr	r0, [pc, #44]	@ (8004358 <init_buzzer+0x84>)
 800432a:	f008 ff7f 	bl	800d22c <sniprintf>
 800432e:	6138      	str	r0, [r7, #16]
        HAL_UART_Transmit(&huart3, (uint8_t*)debugMsg, len, HAL_MAX_DELAY);
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	b29a      	uxth	r2, r3
 8004334:	f04f 33ff 	mov.w	r3, #4294967295
 8004338:	4907      	ldr	r1, [pc, #28]	@ (8004358 <init_buzzer+0x84>)
 800433a:	4804      	ldr	r0, [pc, #16]	@ (800434c <init_buzzer+0x78>)
 800433c:	f004 fb4e 	bl	80089dc <HAL_UART_Transmit>
}
 8004340:	bf00      	nop
 8004342:	3718      	adds	r7, #24
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	08011154 	.word	0x08011154
 800434c:	20000a00 	.word	0x20000a00
 8004350:	200009b4 	.word	0x200009b4
 8004354:	08011164 	.word	0x08011164
 8004358:	20000b50 	.word	0x20000b50

0800435c <stop_buzzer>:

void stop_buzzer(int targetID,int commandID, const char *params){
 800435c:	b580      	push	{r7, lr}
 800435e:	b088      	sub	sp, #32
 8004360:	af02      	add	r7, sp, #8
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
	if (targetID == 7) {
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2b07      	cmp	r3, #7
 800436c:	d11d      	bne.n	80043aa <stop_buzzer+0x4e>
		int len = snprintf(debugMsg, sizeof(debugMsg), "Stop BEEP: Target=%d | CmdID=%d | Params=%s\n",targetID, commandID, params);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	9301      	str	r3, [sp, #4]
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	4a0e      	ldr	r2, [pc, #56]	@ (80043b4 <stop_buzzer+0x58>)
 800437a:	2180      	movs	r1, #128	@ 0x80
 800437c:	480e      	ldr	r0, [pc, #56]	@ (80043b8 <stop_buzzer+0x5c>)
 800437e:	f008 ff55 	bl	800d22c <sniprintf>
 8004382:	6178      	str	r0, [r7, #20]
		HAL_UART_Transmit_IT(&huart3, (uint8_t*)debugMsg, len);
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	b29b      	uxth	r3, r3
 8004388:	461a      	mov	r2, r3
 800438a:	490b      	ldr	r1, [pc, #44]	@ (80043b8 <stop_buzzer+0x5c>)
 800438c:	480b      	ldr	r0, [pc, #44]	@ (80043bc <stop_buzzer+0x60>)
 800438e:	f004 fbaf 	bl	8008af0 <HAL_UART_Transmit_IT>
		HAL_Delay(100);
 8004392:	2064      	movs	r0, #100	@ 0x64
 8004394:	f000 f90a 	bl	80045ac <HAL_Delay>
		HAL_UART_Transmit_IT(&huart3, (uint8_t*)"Stop Buzzer\n", strlen("Stop Buzzer\n"));
 8004398:	220c      	movs	r2, #12
 800439a:	4909      	ldr	r1, [pc, #36]	@ (80043c0 <stop_buzzer+0x64>)
 800439c:	4807      	ldr	r0, [pc, #28]	@ (80043bc <stop_buzzer+0x60>)
 800439e:	f004 fba7 	bl	8008af0 <HAL_UART_Transmit_IT>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80043a2:	4b08      	ldr	r3, [pc, #32]	@ (80043c4 <stop_buzzer+0x68>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2200      	movs	r2, #0
 80043a8:	635a      	str	r2, [r3, #52]	@ 0x34
	}
}
 80043aa:	bf00      	nop
 80043ac:	3718      	adds	r7, #24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	08011174 	.word	0x08011174
 80043b8:	20000b50 	.word	0x20000b50
 80043bc:	20000a00 	.word	0x20000a00
 80043c0:	080111a4 	.word	0x080111a4
 80043c4:	200009b4 	.word	0x200009b4

080043c8 <morse>:

void morse(const char *params){
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08c      	sub	sp, #48	@ 0x30
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
			/* Y */ "-.--",   /* Z */ "--..",
			/* 0 */ "-----",  /* 1 */ ".----",  /* 2 */ "..---",  /* 3 */ "...--",
			/* 4 */ "....-",  /* 5 */ ".....",  /* 6 */ "-....",  /* 7 */ "--...",
			/* 8 */ "---..",  /* 9 */ "----."
		};
	const int dotDuration = 100;
 80043d0:	2364      	movs	r3, #100	@ 0x64
 80043d2:	627b      	str	r3, [r7, #36]	@ 0x24
	const int dashDuration = 300;
 80043d4:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80043d8:	623b      	str	r3, [r7, #32]
	const int gapDuration = 100;
 80043da:	2364      	movs	r3, #100	@ 0x64
 80043dc:	61fb      	str	r3, [r7, #28]
	const int letterGap = 300;
 80043de:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80043e2:	61bb      	str	r3, [r7, #24]
	const int wordGap = 700;
 80043e4:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 80043e8:	617b      	str	r3, [r7, #20]

	for (const char *p = params; *p; p++) {
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043ee:	e071      	b.n	80044d4 <morse+0x10c>
		char c = toupper(*p);
 80043f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	74fb      	strb	r3, [r7, #19]
 80043f6:	7cfb      	ldrb	r3, [r7, #19]
 80043f8:	3301      	adds	r3, #1
 80043fa:	4a3b      	ldr	r2, [pc, #236]	@ (80044e8 <morse+0x120>)
 80043fc:	4413      	add	r3, r2
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	f003 0303 	and.w	r3, r3, #3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d102      	bne.n	800440e <morse+0x46>
 8004408:	7cfb      	ldrb	r3, [r7, #19]
 800440a:	3b20      	subs	r3, #32
 800440c:	e000      	b.n	8004410 <morse+0x48>
 800440e:	7cfb      	ldrb	r3, [r7, #19]
 8004410:	74bb      	strb	r3, [r7, #18]

		if (c == ' ') {
 8004412:	7cbb      	ldrb	r3, [r7, #18]
 8004414:	2b20      	cmp	r3, #32
 8004416:	d104      	bne.n	8004422 <morse+0x5a>
			HAL_Delay(wordGap);
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	4618      	mov	r0, r3
 800441c:	f000 f8c6 	bl	80045ac <HAL_Delay>
			continue;
 8004420:	e055      	b.n	80044ce <morse+0x106>
		}
		if ((c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')) {
 8004422:	7cbb      	ldrb	r3, [r7, #18]
 8004424:	2b40      	cmp	r3, #64	@ 0x40
 8004426:	d902      	bls.n	800442e <morse+0x66>
 8004428:	7cbb      	ldrb	r3, [r7, #18]
 800442a:	2b5a      	cmp	r3, #90	@ 0x5a
 800442c:	d905      	bls.n	800443a <morse+0x72>
 800442e:	7cbb      	ldrb	r3, [r7, #18]
 8004430:	2b2f      	cmp	r3, #47	@ 0x2f
 8004432:	d94c      	bls.n	80044ce <morse+0x106>
 8004434:	7cbb      	ldrb	r3, [r7, #18]
 8004436:	2b39      	cmp	r3, #57	@ 0x39
 8004438:	d849      	bhi.n	80044ce <morse+0x106>
			const char *morse = morseCodes[(c >= 'A') ? (c - 'A') : (26 + c - '0')];
 800443a:	7cbb      	ldrb	r3, [r7, #18]
 800443c:	2b40      	cmp	r3, #64	@ 0x40
 800443e:	d902      	bls.n	8004446 <morse+0x7e>
 8004440:	7cbb      	ldrb	r3, [r7, #18]
 8004442:	3b41      	subs	r3, #65	@ 0x41
 8004444:	e001      	b.n	800444a <morse+0x82>
 8004446:	7cbb      	ldrb	r3, [r7, #18]
 8004448:	3b16      	subs	r3, #22
 800444a:	4a28      	ldr	r2, [pc, #160]	@ (80044ec <morse+0x124>)
 800444c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004450:	60fb      	str	r3, [r7, #12]
			for (const char *s = morse; *s; s++) {
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004456:	e028      	b.n	80044aa <morse+0xe2>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 5000);
 8004458:	4b25      	ldr	r3, [pc, #148]	@ (80044f0 <morse+0x128>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004460:	635a      	str	r2, [r3, #52]	@ 0x34
				HAL_Delay((*s == '.') ? dotDuration : dashDuration);
 8004462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	2b2e      	cmp	r3, #46	@ 0x2e
 8004468:	d101      	bne.n	800446e <morse+0xa6>
 800446a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446c:	e000      	b.n	8004470 <morse+0xa8>
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	4618      	mov	r0, r3
 8004472:	f000 f89b 	bl	80045ac <HAL_Delay>
				HAL_UART_Transmit_IT(&huart3, (uint8_t*)"beep\n", strlen("beep\n"));
 8004476:	2205      	movs	r2, #5
 8004478:	491e      	ldr	r1, [pc, #120]	@ (80044f4 <morse+0x12c>)
 800447a:	481f      	ldr	r0, [pc, #124]	@ (80044f8 <morse+0x130>)
 800447c:	f004 fb38 	bl	8008af0 <HAL_UART_Transmit_IT>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8004480:	4b1b      	ldr	r3, [pc, #108]	@ (80044f0 <morse+0x128>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2200      	movs	r2, #0
 8004486:	635a      	str	r2, [r3, #52]	@ 0x34
				if (*(s+1)) HAL_Delay(gapDuration);
 8004488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800448a:	3301      	adds	r3, #1
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <morse+0xd2>
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	4618      	mov	r0, r3
 8004496:	f000 f889 	bl	80045ac <HAL_Delay>
				HAL_UART_Transmit_IT(&huart3, (uint8_t*)"-\n", strlen("-"));
 800449a:	2201      	movs	r2, #1
 800449c:	4917      	ldr	r1, [pc, #92]	@ (80044fc <morse+0x134>)
 800449e:	4816      	ldr	r0, [pc, #88]	@ (80044f8 <morse+0x130>)
 80044a0:	f004 fb26 	bl	8008af0 <HAL_UART_Transmit_IT>
			for (const char *s = morse; *s; s++) {
 80044a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044a6:	3301      	adds	r3, #1
 80044a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1d2      	bne.n	8004458 <morse+0x90>
			}

			if (*(p+1) && *(p+1) != ' ') HAL_Delay(letterGap);
 80044b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044b4:	3301      	adds	r3, #1
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d008      	beq.n	80044ce <morse+0x106>
 80044bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044be:	3301      	adds	r3, #1
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b20      	cmp	r3, #32
 80044c4:	d003      	beq.n	80044ce <morse+0x106>
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 f86f 	bl	80045ac <HAL_Delay>
	for (const char *p = params; *p; p++) {
 80044ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044d0:	3301      	adds	r3, #1
 80044d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d189      	bne.n	80043f0 <morse+0x28>
		}
	}
}
 80044dc:	bf00      	nop
 80044de:	bf00      	nop
 80044e0:	3730      	adds	r7, #48	@ 0x30
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	080112e8 	.word	0x080112e8
 80044ec:	200001b4 	.word	0x200001b4
 80044f0:	200009b4 	.word	0x200009b4
 80044f4:	080111b4 	.word	0x080111b4
 80044f8:	20000a00 	.word	0x20000a00
 80044fc:	080111bc 	.word	0x080111bc

08004500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004500:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004538 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004504:	f7ff f9cc 	bl	80038a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004508:	480c      	ldr	r0, [pc, #48]	@ (800453c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800450a:	490d      	ldr	r1, [pc, #52]	@ (8004540 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800450c:	4a0d      	ldr	r2, [pc, #52]	@ (8004544 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800450e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004510:	e002      	b.n	8004518 <LoopCopyDataInit>

08004512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004516:	3304      	adds	r3, #4

08004518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800451a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800451c:	d3f9      	bcc.n	8004512 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800451e:	4a0a      	ldr	r2, [pc, #40]	@ (8004548 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004520:	4c0a      	ldr	r4, [pc, #40]	@ (800454c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004524:	e001      	b.n	800452a <LoopFillZerobss>

08004526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004528:	3204      	adds	r2, #4

0800452a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800452a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800452c:	d3fb      	bcc.n	8004526 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800452e:	f009 f8d9 	bl	800d6e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004532:	f7fe fd36 	bl	8002fa2 <main>
  bx  lr    
 8004536:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004538:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800453c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004540:	20000418 	.word	0x20000418
  ldr r2, =_sidata
 8004544:	08011784 	.word	0x08011784
  ldr r2, =_sbss
 8004548:	20000418 	.word	0x20000418
  ldr r4, =_ebss
 800454c:	20004bc8 	.word	0x20004bc8

08004550 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004550:	e7fe      	b.n	8004550 <ADC_IRQHandler>

08004552 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004556:	2003      	movs	r0, #3
 8004558:	f000 f8f9 	bl	800474e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800455c:	200f      	movs	r0, #15
 800455e:	f7ff f841 	bl	80035e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004562:	f7ff f817 	bl	8003594 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	bd80      	pop	{r7, pc}

0800456c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004570:	4b06      	ldr	r3, [pc, #24]	@ (800458c <HAL_IncTick+0x20>)
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	461a      	mov	r2, r3
 8004576:	4b06      	ldr	r3, [pc, #24]	@ (8004590 <HAL_IncTick+0x24>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4413      	add	r3, r2
 800457c:	4a04      	ldr	r2, [pc, #16]	@ (8004590 <HAL_IncTick+0x24>)
 800457e:	6013      	str	r3, [r2, #0]
}
 8004580:	bf00      	nop
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	20000248 	.word	0x20000248
 8004590:	20000d2c 	.word	0x20000d2c

08004594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
  return uwTick;
 8004598:	4b03      	ldr	r3, [pc, #12]	@ (80045a8 <HAL_GetTick+0x14>)
 800459a:	681b      	ldr	r3, [r3, #0]
}
 800459c:	4618      	mov	r0, r3
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	20000d2c 	.word	0x20000d2c

080045ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045b4:	f7ff ffee 	bl	8004594 <HAL_GetTick>
 80045b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c4:	d005      	beq.n	80045d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045c6:	4b0a      	ldr	r3, [pc, #40]	@ (80045f0 <HAL_Delay+0x44>)
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4413      	add	r3, r2
 80045d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80045d2:	bf00      	nop
 80045d4:	f7ff ffde 	bl	8004594 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d8f7      	bhi.n	80045d4 <HAL_Delay+0x28>
  {
  }
}
 80045e4:	bf00      	nop
 80045e6:	bf00      	nop
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	20000248 	.word	0x20000248

080045f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f003 0307 	and.w	r3, r3, #7
 8004602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004604:	4b0b      	ldr	r3, [pc, #44]	@ (8004634 <__NVIC_SetPriorityGrouping+0x40>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004610:	4013      	ands	r3, r2
 8004612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800461c:	4b06      	ldr	r3, [pc, #24]	@ (8004638 <__NVIC_SetPriorityGrouping+0x44>)
 800461e:	4313      	orrs	r3, r2
 8004620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004622:	4a04      	ldr	r2, [pc, #16]	@ (8004634 <__NVIC_SetPriorityGrouping+0x40>)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	60d3      	str	r3, [r2, #12]
}
 8004628:	bf00      	nop
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	e000ed00 	.word	0xe000ed00
 8004638:	05fa0000 	.word	0x05fa0000

0800463c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004640:	4b04      	ldr	r3, [pc, #16]	@ (8004654 <__NVIC_GetPriorityGrouping+0x18>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	0a1b      	lsrs	r3, r3, #8
 8004646:	f003 0307 	and.w	r3, r3, #7
}
 800464a:	4618      	mov	r0, r3
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr
 8004654:	e000ed00 	.word	0xe000ed00

08004658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	4603      	mov	r3, r0
 8004660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004666:	2b00      	cmp	r3, #0
 8004668:	db0b      	blt.n	8004682 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800466a:	79fb      	ldrb	r3, [r7, #7]
 800466c:	f003 021f 	and.w	r2, r3, #31
 8004670:	4907      	ldr	r1, [pc, #28]	@ (8004690 <__NVIC_EnableIRQ+0x38>)
 8004672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004676:	095b      	lsrs	r3, r3, #5
 8004678:	2001      	movs	r0, #1
 800467a:	fa00 f202 	lsl.w	r2, r0, r2
 800467e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004682:	bf00      	nop
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	e000e100 	.word	0xe000e100

08004694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	4603      	mov	r3, r0
 800469c:	6039      	str	r1, [r7, #0]
 800469e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	db0a      	blt.n	80046be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	490c      	ldr	r1, [pc, #48]	@ (80046e0 <__NVIC_SetPriority+0x4c>)
 80046ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b2:	0112      	lsls	r2, r2, #4
 80046b4:	b2d2      	uxtb	r2, r2
 80046b6:	440b      	add	r3, r1
 80046b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046bc:	e00a      	b.n	80046d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	4908      	ldr	r1, [pc, #32]	@ (80046e4 <__NVIC_SetPriority+0x50>)
 80046c4:	79fb      	ldrb	r3, [r7, #7]
 80046c6:	f003 030f 	and.w	r3, r3, #15
 80046ca:	3b04      	subs	r3, #4
 80046cc:	0112      	lsls	r2, r2, #4
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	440b      	add	r3, r1
 80046d2:	761a      	strb	r2, [r3, #24]
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	e000e100 	.word	0xe000e100
 80046e4:	e000ed00 	.word	0xe000ed00

080046e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b089      	sub	sp, #36	@ 0x24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	f1c3 0307 	rsb	r3, r3, #7
 8004702:	2b04      	cmp	r3, #4
 8004704:	bf28      	it	cs
 8004706:	2304      	movcs	r3, #4
 8004708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	3304      	adds	r3, #4
 800470e:	2b06      	cmp	r3, #6
 8004710:	d902      	bls.n	8004718 <NVIC_EncodePriority+0x30>
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	3b03      	subs	r3, #3
 8004716:	e000      	b.n	800471a <NVIC_EncodePriority+0x32>
 8004718:	2300      	movs	r3, #0
 800471a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800471c:	f04f 32ff 	mov.w	r2, #4294967295
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	43da      	mvns	r2, r3
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	401a      	ands	r2, r3
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004730:	f04f 31ff 	mov.w	r1, #4294967295
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	fa01 f303 	lsl.w	r3, r1, r3
 800473a:	43d9      	mvns	r1, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004740:	4313      	orrs	r3, r2
         );
}
 8004742:	4618      	mov	r0, r3
 8004744:	3724      	adds	r7, #36	@ 0x24
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b082      	sub	sp, #8
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7ff ff4c 	bl	80045f4 <__NVIC_SetPriorityGrouping>
}
 800475c:	bf00      	nop
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	4603      	mov	r3, r0
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
 8004770:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004772:	2300      	movs	r3, #0
 8004774:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004776:	f7ff ff61 	bl	800463c <__NVIC_GetPriorityGrouping>
 800477a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	68b9      	ldr	r1, [r7, #8]
 8004780:	6978      	ldr	r0, [r7, #20]
 8004782:	f7ff ffb1 	bl	80046e8 <NVIC_EncodePriority>
 8004786:	4602      	mov	r2, r0
 8004788:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800478c:	4611      	mov	r1, r2
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff ff80 	bl	8004694 <__NVIC_SetPriority>
}
 8004794:	bf00      	nop
 8004796:	3718      	adds	r7, #24
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	4603      	mov	r3, r0
 80047a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7ff ff54 	bl	8004658 <__NVIC_EnableIRQ>
}
 80047b0:	bf00      	nop
 80047b2:	3708      	adds	r7, #8
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80047c6:	f7ff fee5 	bl	8004594 <HAL_GetTick>
 80047ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d008      	beq.n	80047ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2280      	movs	r2, #128	@ 0x80
 80047dc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e052      	b.n	8004890 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0216 	bic.w	r2, r2, #22
 80047f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	695a      	ldr	r2, [r3, #20]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004808:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480e:	2b00      	cmp	r3, #0
 8004810:	d103      	bne.n	800481a <HAL_DMA_Abort+0x62>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004816:	2b00      	cmp	r3, #0
 8004818:	d007      	beq.n	800482a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 0208 	bic.w	r2, r2, #8
 8004828:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 0201 	bic.w	r2, r2, #1
 8004838:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800483a:	e013      	b.n	8004864 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800483c:	f7ff feaa 	bl	8004594 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b05      	cmp	r3, #5
 8004848:	d90c      	bls.n	8004864 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2220      	movs	r2, #32
 800484e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2203      	movs	r2, #3
 8004854:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e015      	b.n	8004890 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1e4      	bne.n	800483c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004876:	223f      	movs	r2, #63	@ 0x3f
 8004878:	409a      	lsls	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d004      	beq.n	80048b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2280      	movs	r2, #128	@ 0x80
 80048b0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e00c      	b.n	80048d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2205      	movs	r2, #5
 80048ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 0201 	bic.w	r2, r2, #1
 80048cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048dc:	b480      	push	{r7}
 80048de:	b089      	sub	sp, #36	@ 0x24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80048e6:	2300      	movs	r3, #0
 80048e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80048ea:	2300      	movs	r3, #0
 80048ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80048ee:	2300      	movs	r3, #0
 80048f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80048f2:	2300      	movs	r3, #0
 80048f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80048f6:	2300      	movs	r3, #0
 80048f8:	61fb      	str	r3, [r7, #28]
 80048fa:	e175      	b.n	8004be8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80048fc:	2201      	movs	r2, #1
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	fa02 f303 	lsl.w	r3, r2, r3
 8004904:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	4013      	ands	r3, r2
 800490e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	429a      	cmp	r2, r3
 8004916:	f040 8164 	bne.w	8004be2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	2b01      	cmp	r3, #1
 8004924:	d005      	beq.n	8004932 <HAL_GPIO_Init+0x56>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d130      	bne.n	8004994 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	2203      	movs	r2, #3
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	43db      	mvns	r3, r3
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	4013      	ands	r3, r2
 8004948:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	fa02 f303 	lsl.w	r3, r2, r3
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	4313      	orrs	r3, r2
 800495a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004968:	2201      	movs	r2, #1
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	fa02 f303 	lsl.w	r3, r2, r3
 8004970:	43db      	mvns	r3, r3
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	4013      	ands	r3, r2
 8004976:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	091b      	lsrs	r3, r3, #4
 800497e:	f003 0201 	and.w	r2, r3, #1
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	fa02 f303 	lsl.w	r3, r2, r3
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	4313      	orrs	r3, r2
 800498c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f003 0303 	and.w	r3, r3, #3
 800499c:	2b03      	cmp	r3, #3
 800499e:	d017      	beq.n	80049d0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	2203      	movs	r2, #3
 80049ac:	fa02 f303 	lsl.w	r3, r2, r3
 80049b0:	43db      	mvns	r3, r3
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	4013      	ands	r3, r2
 80049b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	fa02 f303 	lsl.w	r3, r2, r3
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f003 0303 	and.w	r3, r3, #3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d123      	bne.n	8004a24 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	08da      	lsrs	r2, r3, #3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3208      	adds	r2, #8
 80049e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	f003 0307 	and.w	r3, r3, #7
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	220f      	movs	r2, #15
 80049f4:	fa02 f303 	lsl.w	r3, r2, r3
 80049f8:	43db      	mvns	r3, r3
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	4013      	ands	r3, r2
 80049fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	691a      	ldr	r2, [r3, #16]
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	08da      	lsrs	r2, r3, #3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3208      	adds	r2, #8
 8004a1e:	69b9      	ldr	r1, [r7, #24]
 8004a20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	2203      	movs	r2, #3
 8004a30:	fa02 f303 	lsl.w	r3, r2, r3
 8004a34:	43db      	mvns	r3, r3
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	4013      	ands	r3, r2
 8004a3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f003 0203 	and.w	r2, r3, #3
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	005b      	lsls	r3, r3, #1
 8004a48:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4c:	69ba      	ldr	r2, [r7, #24]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f000 80be 	beq.w	8004be2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a66:	4b66      	ldr	r3, [pc, #408]	@ (8004c00 <HAL_GPIO_Init+0x324>)
 8004a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a6a:	4a65      	ldr	r2, [pc, #404]	@ (8004c00 <HAL_GPIO_Init+0x324>)
 8004a6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a70:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a72:	4b63      	ldr	r3, [pc, #396]	@ (8004c00 <HAL_GPIO_Init+0x324>)
 8004a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a7a:	60fb      	str	r3, [r7, #12]
 8004a7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004a7e:	4a61      	ldr	r2, [pc, #388]	@ (8004c04 <HAL_GPIO_Init+0x328>)
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	089b      	lsrs	r3, r3, #2
 8004a84:	3302      	adds	r3, #2
 8004a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	220f      	movs	r2, #15
 8004a96:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9a:	43db      	mvns	r3, r3
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a58      	ldr	r2, [pc, #352]	@ (8004c08 <HAL_GPIO_Init+0x32c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d037      	beq.n	8004b1a <HAL_GPIO_Init+0x23e>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a57      	ldr	r2, [pc, #348]	@ (8004c0c <HAL_GPIO_Init+0x330>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d031      	beq.n	8004b16 <HAL_GPIO_Init+0x23a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a56      	ldr	r2, [pc, #344]	@ (8004c10 <HAL_GPIO_Init+0x334>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d02b      	beq.n	8004b12 <HAL_GPIO_Init+0x236>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a55      	ldr	r2, [pc, #340]	@ (8004c14 <HAL_GPIO_Init+0x338>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d025      	beq.n	8004b0e <HAL_GPIO_Init+0x232>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a54      	ldr	r2, [pc, #336]	@ (8004c18 <HAL_GPIO_Init+0x33c>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d01f      	beq.n	8004b0a <HAL_GPIO_Init+0x22e>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a53      	ldr	r2, [pc, #332]	@ (8004c1c <HAL_GPIO_Init+0x340>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d019      	beq.n	8004b06 <HAL_GPIO_Init+0x22a>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a52      	ldr	r2, [pc, #328]	@ (8004c20 <HAL_GPIO_Init+0x344>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d013      	beq.n	8004b02 <HAL_GPIO_Init+0x226>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a51      	ldr	r2, [pc, #324]	@ (8004c24 <HAL_GPIO_Init+0x348>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d00d      	beq.n	8004afe <HAL_GPIO_Init+0x222>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a50      	ldr	r2, [pc, #320]	@ (8004c28 <HAL_GPIO_Init+0x34c>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d007      	beq.n	8004afa <HAL_GPIO_Init+0x21e>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a4f      	ldr	r2, [pc, #316]	@ (8004c2c <HAL_GPIO_Init+0x350>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d101      	bne.n	8004af6 <HAL_GPIO_Init+0x21a>
 8004af2:	2309      	movs	r3, #9
 8004af4:	e012      	b.n	8004b1c <HAL_GPIO_Init+0x240>
 8004af6:	230a      	movs	r3, #10
 8004af8:	e010      	b.n	8004b1c <HAL_GPIO_Init+0x240>
 8004afa:	2308      	movs	r3, #8
 8004afc:	e00e      	b.n	8004b1c <HAL_GPIO_Init+0x240>
 8004afe:	2307      	movs	r3, #7
 8004b00:	e00c      	b.n	8004b1c <HAL_GPIO_Init+0x240>
 8004b02:	2306      	movs	r3, #6
 8004b04:	e00a      	b.n	8004b1c <HAL_GPIO_Init+0x240>
 8004b06:	2305      	movs	r3, #5
 8004b08:	e008      	b.n	8004b1c <HAL_GPIO_Init+0x240>
 8004b0a:	2304      	movs	r3, #4
 8004b0c:	e006      	b.n	8004b1c <HAL_GPIO_Init+0x240>
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e004      	b.n	8004b1c <HAL_GPIO_Init+0x240>
 8004b12:	2302      	movs	r3, #2
 8004b14:	e002      	b.n	8004b1c <HAL_GPIO_Init+0x240>
 8004b16:	2301      	movs	r3, #1
 8004b18:	e000      	b.n	8004b1c <HAL_GPIO_Init+0x240>
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	69fa      	ldr	r2, [r7, #28]
 8004b1e:	f002 0203 	and.w	r2, r2, #3
 8004b22:	0092      	lsls	r2, r2, #2
 8004b24:	4093      	lsls	r3, r2
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004b2c:	4935      	ldr	r1, [pc, #212]	@ (8004c04 <HAL_GPIO_Init+0x328>)
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	089b      	lsrs	r3, r3, #2
 8004b32:	3302      	adds	r3, #2
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b3a:	4b3d      	ldr	r3, [pc, #244]	@ (8004c30 <HAL_GPIO_Init+0x354>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	43db      	mvns	r3, r3
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	4013      	ands	r3, r2
 8004b48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b5e:	4a34      	ldr	r2, [pc, #208]	@ (8004c30 <HAL_GPIO_Init+0x354>)
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b64:	4b32      	ldr	r3, [pc, #200]	@ (8004c30 <HAL_GPIO_Init+0x354>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	43db      	mvns	r3, r3
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	4013      	ands	r3, r2
 8004b72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d003      	beq.n	8004b88 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b88:	4a29      	ldr	r2, [pc, #164]	@ (8004c30 <HAL_GPIO_Init+0x354>)
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004b8e:	4b28      	ldr	r3, [pc, #160]	@ (8004c30 <HAL_GPIO_Init+0x354>)
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	43db      	mvns	r3, r3
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d003      	beq.n	8004bb2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004bb2:	4a1f      	ldr	r2, [pc, #124]	@ (8004c30 <HAL_GPIO_Init+0x354>)
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8004c30 <HAL_GPIO_Init+0x354>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	43db      	mvns	r3, r3
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d003      	beq.n	8004bdc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004bdc:	4a14      	ldr	r2, [pc, #80]	@ (8004c30 <HAL_GPIO_Init+0x354>)
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	3301      	adds	r3, #1
 8004be6:	61fb      	str	r3, [r7, #28]
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	2b0f      	cmp	r3, #15
 8004bec:	f67f ae86 	bls.w	80048fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004bf0:	bf00      	nop
 8004bf2:	bf00      	nop
 8004bf4:	3724      	adds	r7, #36	@ 0x24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	40023800 	.word	0x40023800
 8004c04:	40013800 	.word	0x40013800
 8004c08:	40020000 	.word	0x40020000
 8004c0c:	40020400 	.word	0x40020400
 8004c10:	40020800 	.word	0x40020800
 8004c14:	40020c00 	.word	0x40020c00
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	40021400 	.word	0x40021400
 8004c20:	40021800 	.word	0x40021800
 8004c24:	40021c00 	.word	0x40021c00
 8004c28:	40022000 	.word	0x40022000
 8004c2c:	40022400 	.word	0x40022400
 8004c30:	40013c00 	.word	0x40013c00

08004c34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	691a      	ldr	r2, [r3, #16]
 8004c44:	887b      	ldrh	r3, [r7, #2]
 8004c46:	4013      	ands	r3, r2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d002      	beq.n	8004c52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	73fb      	strb	r3, [r7, #15]
 8004c50:	e001      	b.n	8004c56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c52:	2300      	movs	r3, #0
 8004c54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3714      	adds	r7, #20
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	807b      	strh	r3, [r7, #2]
 8004c70:	4613      	mov	r3, r2
 8004c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c74:	787b      	ldrb	r3, [r7, #1]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c7a:	887a      	ldrh	r2, [r7, #2]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004c80:	e003      	b.n	8004c8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004c82:	887b      	ldrh	r3, [r7, #2]
 8004c84:	041a      	lsls	r2, r3, #16
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	619a      	str	r2, [r3, #24]
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
	...

08004c98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e08b      	b.n	8004dc2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d106      	bne.n	8004cc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7fd feb0 	bl	8002a24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2224      	movs	r2, #36	@ 0x24
 8004cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 0201 	bic.w	r2, r2, #1
 8004cda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004ce8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004cf8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d107      	bne.n	8004d12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689a      	ldr	r2, [r3, #8]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d0e:	609a      	str	r2, [r3, #8]
 8004d10:	e006      	b.n	8004d20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689a      	ldr	r2, [r3, #8]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004d1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d108      	bne.n	8004d3a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d36:	605a      	str	r2, [r3, #4]
 8004d38:	e007      	b.n	8004d4a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	685a      	ldr	r2, [r3, #4]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6859      	ldr	r1, [r3, #4]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	4b1d      	ldr	r3, [pc, #116]	@ (8004dcc <HAL_I2C_Init+0x134>)
 8004d56:	430b      	orrs	r3, r1
 8004d58:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68da      	ldr	r2, [r3, #12]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d68:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	691a      	ldr	r2, [r3, #16]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	69d9      	ldr	r1, [r3, #28]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a1a      	ldr	r2, [r3, #32]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0201 	orr.w	r2, r2, #1
 8004da2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2220      	movs	r2, #32
 8004dae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	02008000 	.word	0x02008000

08004dd0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b088      	sub	sp, #32
 8004dd4:	af02      	add	r7, sp, #8
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	4608      	mov	r0, r1
 8004dda:	4611      	mov	r1, r2
 8004ddc:	461a      	mov	r2, r3
 8004dde:	4603      	mov	r3, r0
 8004de0:	817b      	strh	r3, [r7, #10]
 8004de2:	460b      	mov	r3, r1
 8004de4:	813b      	strh	r3, [r7, #8]
 8004de6:	4613      	mov	r3, r2
 8004de8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b20      	cmp	r3, #32
 8004df4:	f040 80f9 	bne.w	8004fea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d002      	beq.n	8004e04 <HAL_I2C_Mem_Write+0x34>
 8004dfe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d105      	bne.n	8004e10 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e0a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e0ed      	b.n	8004fec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d101      	bne.n	8004e1e <HAL_I2C_Mem_Write+0x4e>
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	e0e6      	b.n	8004fec <HAL_I2C_Mem_Write+0x21c>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e26:	f7ff fbb5 	bl	8004594 <HAL_GetTick>
 8004e2a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	2319      	movs	r3, #25
 8004e32:	2201      	movs	r2, #1
 8004e34:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 fac3 	bl	80053c4 <I2C_WaitOnFlagUntilTimeout>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d001      	beq.n	8004e48 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e0d1      	b.n	8004fec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2221      	movs	r2, #33	@ 0x21
 8004e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2240      	movs	r2, #64	@ 0x40
 8004e54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6a3a      	ldr	r2, [r7, #32]
 8004e62:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004e68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e70:	88f8      	ldrh	r0, [r7, #6]
 8004e72:	893a      	ldrh	r2, [r7, #8]
 8004e74:	8979      	ldrh	r1, [r7, #10]
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	9301      	str	r3, [sp, #4]
 8004e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e7c:	9300      	str	r3, [sp, #0]
 8004e7e:	4603      	mov	r3, r0
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f000 f9d3 	bl	800522c <I2C_RequestMemoryWrite>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d005      	beq.n	8004e98 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e0a9      	b.n	8004fec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	2bff      	cmp	r3, #255	@ 0xff
 8004ea0:	d90e      	bls.n	8004ec0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	22ff      	movs	r2, #255	@ 0xff
 8004ea6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	8979      	ldrh	r1, [r7, #10]
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f000 fc47 	bl	800574c <I2C_TransferConfig>
 8004ebe:	e00f      	b.n	8004ee0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ece:	b2da      	uxtb	r2, r3
 8004ed0:	8979      	ldrh	r1, [r7, #10]
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	9300      	str	r3, [sp, #0]
 8004ed6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 fc36 	bl	800574c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 fac6 	bl	8005476 <I2C_WaitOnTXISFlagUntilTimeout>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e07b      	b.n	8004fec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef8:	781a      	ldrb	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f04:	1c5a      	adds	r2, r3, #1
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	3b01      	subs	r3, #1
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d034      	beq.n	8004f98 <HAL_I2C_Mem_Write+0x1c8>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d130      	bne.n	8004f98 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	2180      	movs	r1, #128	@ 0x80
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f000 fa3f 	bl	80053c4 <I2C_WaitOnFlagUntilTimeout>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e04d      	b.n	8004fec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	2bff      	cmp	r3, #255	@ 0xff
 8004f58:	d90e      	bls.n	8004f78 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	22ff      	movs	r2, #255	@ 0xff
 8004f5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f64:	b2da      	uxtb	r2, r3
 8004f66:	8979      	ldrh	r1, [r7, #10]
 8004f68:	2300      	movs	r3, #0
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f000 fbeb 	bl	800574c <I2C_TransferConfig>
 8004f76:	e00f      	b.n	8004f98 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f86:	b2da      	uxtb	r2, r3
 8004f88:	8979      	ldrh	r1, [r7, #10]
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 fbda 	bl	800574c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d19e      	bne.n	8004ee0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f000 faac 	bl	8005504 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e01a      	b.n	8004fec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6859      	ldr	r1, [r3, #4]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ff4 <HAL_I2C_Mem_Write+0x224>)
 8004fca:	400b      	ands	r3, r1
 8004fcc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	e000      	b.n	8004fec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004fea:	2302      	movs	r3, #2
  }
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3718      	adds	r7, #24
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	fe00e800 	.word	0xfe00e800

08004ff8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b088      	sub	sp, #32
 8004ffc:	af02      	add	r7, sp, #8
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	4608      	mov	r0, r1
 8005002:	4611      	mov	r1, r2
 8005004:	461a      	mov	r2, r3
 8005006:	4603      	mov	r3, r0
 8005008:	817b      	strh	r3, [r7, #10]
 800500a:	460b      	mov	r3, r1
 800500c:	813b      	strh	r3, [r7, #8]
 800500e:	4613      	mov	r3, r2
 8005010:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b20      	cmp	r3, #32
 800501c:	f040 80fd 	bne.w	800521a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005020:	6a3b      	ldr	r3, [r7, #32]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d002      	beq.n	800502c <HAL_I2C_Mem_Read+0x34>
 8005026:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005028:	2b00      	cmp	r3, #0
 800502a:	d105      	bne.n	8005038 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005032:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e0f1      	b.n	800521c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800503e:	2b01      	cmp	r3, #1
 8005040:	d101      	bne.n	8005046 <HAL_I2C_Mem_Read+0x4e>
 8005042:	2302      	movs	r3, #2
 8005044:	e0ea      	b.n	800521c <HAL_I2C_Mem_Read+0x224>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800504e:	f7ff faa1 	bl	8004594 <HAL_GetTick>
 8005052:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	2319      	movs	r3, #25
 800505a:	2201      	movs	r2, #1
 800505c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 f9af 	bl	80053c4 <I2C_WaitOnFlagUntilTimeout>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e0d5      	b.n	800521c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2222      	movs	r2, #34	@ 0x22
 8005074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2240      	movs	r2, #64	@ 0x40
 800507c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6a3a      	ldr	r2, [r7, #32]
 800508a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005090:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005098:	88f8      	ldrh	r0, [r7, #6]
 800509a:	893a      	ldrh	r2, [r7, #8]
 800509c:	8979      	ldrh	r1, [r7, #10]
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	9301      	str	r3, [sp, #4]
 80050a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	4603      	mov	r3, r0
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 f913 	bl	80052d4 <I2C_RequestMemoryRead>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d005      	beq.n	80050c0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e0ad      	b.n	800521c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	2bff      	cmp	r3, #255	@ 0xff
 80050c8:	d90e      	bls.n	80050e8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2201      	movs	r2, #1
 80050ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	8979      	ldrh	r1, [r7, #10]
 80050d8:	4b52      	ldr	r3, [pc, #328]	@ (8005224 <HAL_I2C_Mem_Read+0x22c>)
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 fb33 	bl	800574c <I2C_TransferConfig>
 80050e6:	e00f      	b.n	8005108 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050f6:	b2da      	uxtb	r2, r3
 80050f8:	8979      	ldrh	r1, [r7, #10]
 80050fa:	4b4a      	ldr	r3, [pc, #296]	@ (8005224 <HAL_I2C_Mem_Read+0x22c>)
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 fb22 	bl	800574c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800510e:	2200      	movs	r2, #0
 8005110:	2104      	movs	r1, #4
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f000 f956 	bl	80053c4 <I2C_WaitOnFlagUntilTimeout>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e07c      	b.n	800521c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512c:	b2d2      	uxtb	r2, r2
 800512e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800513e:	3b01      	subs	r3, #1
 8005140:	b29a      	uxth	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800514a:	b29b      	uxth	r3, r3
 800514c:	3b01      	subs	r3, #1
 800514e:	b29a      	uxth	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005158:	b29b      	uxth	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d034      	beq.n	80051c8 <HAL_I2C_Mem_Read+0x1d0>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005162:	2b00      	cmp	r3, #0
 8005164:	d130      	bne.n	80051c8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800516c:	2200      	movs	r2, #0
 800516e:	2180      	movs	r1, #128	@ 0x80
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f000 f927 	bl	80053c4 <I2C_WaitOnFlagUntilTimeout>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e04d      	b.n	800521c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005184:	b29b      	uxth	r3, r3
 8005186:	2bff      	cmp	r3, #255	@ 0xff
 8005188:	d90e      	bls.n	80051a8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2201      	movs	r2, #1
 800518e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005194:	b2da      	uxtb	r2, r3
 8005196:	8979      	ldrh	r1, [r7, #10]
 8005198:	2300      	movs	r3, #0
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f000 fad3 	bl	800574c <I2C_TransferConfig>
 80051a6:	e00f      	b.n	80051c8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	8979      	ldrh	r1, [r7, #10]
 80051ba:	2300      	movs	r3, #0
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f000 fac2 	bl	800574c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d19a      	bne.n	8005108 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f000 f994 	bl	8005504 <I2C_WaitOnSTOPFlagUntilTimeout>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d001      	beq.n	80051e6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e01a      	b.n	800521c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2220      	movs	r2, #32
 80051ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	6859      	ldr	r1, [r3, #4]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005228 <HAL_I2C_Mem_Read+0x230>)
 80051fa:	400b      	ands	r3, r1
 80051fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2220      	movs	r2, #32
 8005202:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005216:	2300      	movs	r3, #0
 8005218:	e000      	b.n	800521c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800521a:	2302      	movs	r3, #2
  }
}
 800521c:	4618      	mov	r0, r3
 800521e:	3718      	adds	r7, #24
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	80002400 	.word	0x80002400
 8005228:	fe00e800 	.word	0xfe00e800

0800522c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af02      	add	r7, sp, #8
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	4608      	mov	r0, r1
 8005236:	4611      	mov	r1, r2
 8005238:	461a      	mov	r2, r3
 800523a:	4603      	mov	r3, r0
 800523c:	817b      	strh	r3, [r7, #10]
 800523e:	460b      	mov	r3, r1
 8005240:	813b      	strh	r3, [r7, #8]
 8005242:	4613      	mov	r3, r2
 8005244:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005246:	88fb      	ldrh	r3, [r7, #6]
 8005248:	b2da      	uxtb	r2, r3
 800524a:	8979      	ldrh	r1, [r7, #10]
 800524c:	4b20      	ldr	r3, [pc, #128]	@ (80052d0 <I2C_RequestMemoryWrite+0xa4>)
 800524e:	9300      	str	r3, [sp, #0]
 8005250:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 fa79 	bl	800574c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800525a:	69fa      	ldr	r2, [r7, #28]
 800525c:	69b9      	ldr	r1, [r7, #24]
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 f909 	bl	8005476 <I2C_WaitOnTXISFlagUntilTimeout>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e02c      	b.n	80052c8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800526e:	88fb      	ldrh	r3, [r7, #6]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d105      	bne.n	8005280 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005274:	893b      	ldrh	r3, [r7, #8]
 8005276:	b2da      	uxtb	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	629a      	str	r2, [r3, #40]	@ 0x28
 800527e:	e015      	b.n	80052ac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005280:	893b      	ldrh	r3, [r7, #8]
 8005282:	0a1b      	lsrs	r3, r3, #8
 8005284:	b29b      	uxth	r3, r3
 8005286:	b2da      	uxtb	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800528e:	69fa      	ldr	r2, [r7, #28]
 8005290:	69b9      	ldr	r1, [r7, #24]
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f000 f8ef 	bl	8005476 <I2C_WaitOnTXISFlagUntilTimeout>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e012      	b.n	80052c8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052a2:	893b      	ldrh	r3, [r7, #8]
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	9300      	str	r3, [sp, #0]
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	2200      	movs	r2, #0
 80052b4:	2180      	movs	r1, #128	@ 0x80
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f000 f884 	bl	80053c4 <I2C_WaitOnFlagUntilTimeout>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e000      	b.n	80052c8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	80002000 	.word	0x80002000

080052d4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b086      	sub	sp, #24
 80052d8:	af02      	add	r7, sp, #8
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	4608      	mov	r0, r1
 80052de:	4611      	mov	r1, r2
 80052e0:	461a      	mov	r2, r3
 80052e2:	4603      	mov	r3, r0
 80052e4:	817b      	strh	r3, [r7, #10]
 80052e6:	460b      	mov	r3, r1
 80052e8:	813b      	strh	r3, [r7, #8]
 80052ea:	4613      	mov	r3, r2
 80052ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80052ee:	88fb      	ldrh	r3, [r7, #6]
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	8979      	ldrh	r1, [r7, #10]
 80052f4:	4b20      	ldr	r3, [pc, #128]	@ (8005378 <I2C_RequestMemoryRead+0xa4>)
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	2300      	movs	r3, #0
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 fa26 	bl	800574c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005300:	69fa      	ldr	r2, [r7, #28]
 8005302:	69b9      	ldr	r1, [r7, #24]
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 f8b6 	bl	8005476 <I2C_WaitOnTXISFlagUntilTimeout>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d001      	beq.n	8005314 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e02c      	b.n	800536e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005314:	88fb      	ldrh	r3, [r7, #6]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d105      	bne.n	8005326 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800531a:	893b      	ldrh	r3, [r7, #8]
 800531c:	b2da      	uxtb	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	629a      	str	r2, [r3, #40]	@ 0x28
 8005324:	e015      	b.n	8005352 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005326:	893b      	ldrh	r3, [r7, #8]
 8005328:	0a1b      	lsrs	r3, r3, #8
 800532a:	b29b      	uxth	r3, r3
 800532c:	b2da      	uxtb	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005334:	69fa      	ldr	r2, [r7, #28]
 8005336:	69b9      	ldr	r1, [r7, #24]
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f000 f89c 	bl	8005476 <I2C_WaitOnTXISFlagUntilTimeout>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d001      	beq.n	8005348 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e012      	b.n	800536e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005348:	893b      	ldrh	r3, [r7, #8]
 800534a:	b2da      	uxtb	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	2200      	movs	r2, #0
 800535a:	2140      	movs	r1, #64	@ 0x40
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 f831 	bl	80053c4 <I2C_WaitOnFlagUntilTimeout>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e000      	b.n	800536e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	80002000 	.word	0x80002000

0800537c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b02      	cmp	r3, #2
 8005390:	d103      	bne.n	800539a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2200      	movs	r2, #0
 8005398:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d007      	beq.n	80053b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	699a      	ldr	r2, [r3, #24]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f042 0201 	orr.w	r2, r2, #1
 80053b6:	619a      	str	r2, [r3, #24]
  }
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	603b      	str	r3, [r7, #0]
 80053d0:	4613      	mov	r3, r2
 80053d2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053d4:	e03b      	b.n	800544e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	6839      	ldr	r1, [r7, #0]
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f000 f8d6 	bl	800558c <I2C_IsErrorOccurred>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e041      	b.n	800546e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f0:	d02d      	beq.n	800544e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053f2:	f7ff f8cf 	bl	8004594 <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d302      	bcc.n	8005408 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d122      	bne.n	800544e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699a      	ldr	r2, [r3, #24]
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	4013      	ands	r3, r2
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	429a      	cmp	r2, r3
 8005416:	bf0c      	ite	eq
 8005418:	2301      	moveq	r3, #1
 800541a:	2300      	movne	r3, #0
 800541c:	b2db      	uxtb	r3, r3
 800541e:	461a      	mov	r2, r3
 8005420:	79fb      	ldrb	r3, [r7, #7]
 8005422:	429a      	cmp	r2, r3
 8005424:	d113      	bne.n	800544e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800542a:	f043 0220 	orr.w	r2, r3, #32
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2220      	movs	r2, #32
 8005436:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e00f      	b.n	800546e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	699a      	ldr	r2, [r3, #24]
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	4013      	ands	r3, r2
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	429a      	cmp	r2, r3
 800545c:	bf0c      	ite	eq
 800545e:	2301      	moveq	r3, #1
 8005460:	2300      	movne	r3, #0
 8005462:	b2db      	uxtb	r3, r3
 8005464:	461a      	mov	r2, r3
 8005466:	79fb      	ldrb	r3, [r7, #7]
 8005468:	429a      	cmp	r2, r3
 800546a:	d0b4      	beq.n	80053d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b084      	sub	sp, #16
 800547a:	af00      	add	r7, sp, #0
 800547c:	60f8      	str	r0, [r7, #12]
 800547e:	60b9      	str	r1, [r7, #8]
 8005480:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005482:	e033      	b.n	80054ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	68b9      	ldr	r1, [r7, #8]
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f000 f87f 	bl	800558c <I2C_IsErrorOccurred>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d001      	beq.n	8005498 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e031      	b.n	80054fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549e:	d025      	beq.n	80054ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054a0:	f7ff f878 	bl	8004594 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d302      	bcc.n	80054b6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d11a      	bne.n	80054ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d013      	beq.n	80054ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054c8:	f043 0220 	orr.w	r2, r3, #32
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2220      	movs	r2, #32
 80054d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e007      	b.n	80054fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d1c4      	bne.n	8005484 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005510:	e02f      	b.n	8005572 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	68b9      	ldr	r1, [r7, #8]
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f000 f838 	bl	800558c <I2C_IsErrorOccurred>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e02d      	b.n	8005582 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005526:	f7ff f835 	bl	8004594 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	429a      	cmp	r2, r3
 8005534:	d302      	bcc.n	800553c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d11a      	bne.n	8005572 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	f003 0320 	and.w	r3, r3, #32
 8005546:	2b20      	cmp	r3, #32
 8005548:	d013      	beq.n	8005572 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800554e:	f043 0220 	orr.w	r2, r3, #32
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2220      	movs	r2, #32
 800555a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e007      	b.n	8005582 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	f003 0320 	and.w	r3, r3, #32
 800557c:	2b20      	cmp	r3, #32
 800557e:	d1c8      	bne.n	8005512 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
	...

0800558c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b08a      	sub	sp, #40	@ 0x28
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005598:	2300      	movs	r3, #0
 800559a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80055a6:	2300      	movs	r3, #0
 80055a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	f003 0310 	and.w	r3, r3, #16
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d068      	beq.n	800568a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2210      	movs	r2, #16
 80055be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80055c0:	e049      	b.n	8005656 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c8:	d045      	beq.n	8005656 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80055ca:	f7fe ffe3 	bl	8004594 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d302      	bcc.n	80055e0 <I2C_IsErrorOccurred+0x54>
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d13a      	bne.n	8005656 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80055fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005602:	d121      	bne.n	8005648 <I2C_IsErrorOccurred+0xbc>
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800560a:	d01d      	beq.n	8005648 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800560c:	7cfb      	ldrb	r3, [r7, #19]
 800560e:	2b20      	cmp	r3, #32
 8005610:	d01a      	beq.n	8005648 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005620:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005622:	f7fe ffb7 	bl	8004594 <HAL_GetTick>
 8005626:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005628:	e00e      	b.n	8005648 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800562a:	f7fe ffb3 	bl	8004594 <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	2b19      	cmp	r3, #25
 8005636:	d907      	bls.n	8005648 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005638:	6a3b      	ldr	r3, [r7, #32]
 800563a:	f043 0320 	orr.w	r3, r3, #32
 800563e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005646:	e006      	b.n	8005656 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	f003 0320 	and.w	r3, r3, #32
 8005652:	2b20      	cmp	r3, #32
 8005654:	d1e9      	bne.n	800562a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	f003 0320 	and.w	r3, r3, #32
 8005660:	2b20      	cmp	r3, #32
 8005662:	d003      	beq.n	800566c <I2C_IsErrorOccurred+0xe0>
 8005664:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0aa      	beq.n	80055c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800566c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005670:	2b00      	cmp	r3, #0
 8005672:	d103      	bne.n	800567c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2220      	movs	r2, #32
 800567a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800567c:	6a3b      	ldr	r3, [r7, #32]
 800567e:	f043 0304 	orr.w	r3, r3, #4
 8005682:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00b      	beq.n	80056b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	f043 0301 	orr.w	r3, r3, #1
 80056a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80056ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00b      	beq.n	80056d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	f043 0308 	orr.w	r3, r3, #8
 80056c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80056ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00b      	beq.n	80056f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	f043 0302 	orr.w	r3, r3, #2
 80056e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80056f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d01c      	beq.n	800573a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f7ff fe3b 	bl	800537c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6859      	ldr	r1, [r3, #4]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	4b0d      	ldr	r3, [pc, #52]	@ (8005748 <I2C_IsErrorOccurred+0x1bc>)
 8005712:	400b      	ands	r3, r1
 8005714:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	431a      	orrs	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2220      	movs	r2, #32
 8005726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800573a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800573e:	4618      	mov	r0, r3
 8005740:	3728      	adds	r7, #40	@ 0x28
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	fe00e800 	.word	0xfe00e800

0800574c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	607b      	str	r3, [r7, #4]
 8005756:	460b      	mov	r3, r1
 8005758:	817b      	strh	r3, [r7, #10]
 800575a:	4613      	mov	r3, r2
 800575c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800575e:	897b      	ldrh	r3, [r7, #10]
 8005760:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005764:	7a7b      	ldrb	r3, [r7, #9]
 8005766:	041b      	lsls	r3, r3, #16
 8005768:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800576c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	4313      	orrs	r3, r2
 8005776:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800577a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	0d5b      	lsrs	r3, r3, #21
 8005786:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800578a:	4b08      	ldr	r3, [pc, #32]	@ (80057ac <I2C_TransferConfig+0x60>)
 800578c:	430b      	orrs	r3, r1
 800578e:	43db      	mvns	r3, r3
 8005790:	ea02 0103 	and.w	r1, r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	430a      	orrs	r2, r1
 800579c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800579e:	bf00      	nop
 80057a0:	371c      	adds	r7, #28
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	03ff63ff 	.word	0x03ff63ff

080057b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b20      	cmp	r3, #32
 80057c4:	d138      	bne.n	8005838 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d101      	bne.n	80057d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80057d0:	2302      	movs	r3, #2
 80057d2:	e032      	b.n	800583a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2224      	movs	r2, #36	@ 0x24
 80057e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f022 0201 	bic.w	r2, r2, #1
 80057f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005802:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6819      	ldr	r1, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	430a      	orrs	r2, r1
 8005812:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f042 0201 	orr.w	r2, r2, #1
 8005822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2220      	movs	r2, #32
 8005828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005834:	2300      	movs	r3, #0
 8005836:	e000      	b.n	800583a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005838:	2302      	movs	r3, #2
  }
}
 800583a:	4618      	mov	r0, r3
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005846:	b480      	push	{r7}
 8005848:	b085      	sub	sp, #20
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
 800584e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b20      	cmp	r3, #32
 800585a:	d139      	bne.n	80058d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005862:	2b01      	cmp	r3, #1
 8005864:	d101      	bne.n	800586a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005866:	2302      	movs	r3, #2
 8005868:	e033      	b.n	80058d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2224      	movs	r2, #36	@ 0x24
 8005876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 0201 	bic.w	r2, r2, #1
 8005888:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005898:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	021b      	lsls	r3, r3, #8
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0201 	orr.w	r2, r2, #1
 80058ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2220      	movs	r2, #32
 80058c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80058cc:	2300      	movs	r3, #0
 80058ce:	e000      	b.n	80058d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80058d0:	2302      	movs	r3, #2
  }
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3714      	adds	r7, #20
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
	...

080058e0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80058e0:	b480      	push	{r7}
 80058e2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058e4:	4b05      	ldr	r3, [pc, #20]	@ (80058fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a04      	ldr	r2, [pc, #16]	@ (80058fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80058ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058ee:	6013      	str	r3, [r2, #0]
}
 80058f0:	bf00      	nop
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	40007000 	.word	0x40007000

08005900 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005906:	2300      	movs	r3, #0
 8005908:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800590a:	4b23      	ldr	r3, [pc, #140]	@ (8005998 <HAL_PWREx_EnableOverDrive+0x98>)
 800590c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590e:	4a22      	ldr	r2, [pc, #136]	@ (8005998 <HAL_PWREx_EnableOverDrive+0x98>)
 8005910:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005914:	6413      	str	r3, [r2, #64]	@ 0x40
 8005916:	4b20      	ldr	r3, [pc, #128]	@ (8005998 <HAL_PWREx_EnableOverDrive+0x98>)
 8005918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800591a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800591e:	603b      	str	r3, [r7, #0]
 8005920:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005922:	4b1e      	ldr	r3, [pc, #120]	@ (800599c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a1d      	ldr	r2, [pc, #116]	@ (800599c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800592c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800592e:	f7fe fe31 	bl	8004594 <HAL_GetTick>
 8005932:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005934:	e009      	b.n	800594a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005936:	f7fe fe2d 	bl	8004594 <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005944:	d901      	bls.n	800594a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e022      	b.n	8005990 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800594a:	4b14      	ldr	r3, [pc, #80]	@ (800599c <HAL_PWREx_EnableOverDrive+0x9c>)
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005952:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005956:	d1ee      	bne.n	8005936 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005958:	4b10      	ldr	r3, [pc, #64]	@ (800599c <HAL_PWREx_EnableOverDrive+0x9c>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a0f      	ldr	r2, [pc, #60]	@ (800599c <HAL_PWREx_EnableOverDrive+0x9c>)
 800595e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005962:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005964:	f7fe fe16 	bl	8004594 <HAL_GetTick>
 8005968:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800596a:	e009      	b.n	8005980 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800596c:	f7fe fe12 	bl	8004594 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800597a:	d901      	bls.n	8005980 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e007      	b.n	8005990 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005980:	4b06      	ldr	r3, [pc, #24]	@ (800599c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005988:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800598c:	d1ee      	bne.n	800596c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	3708      	adds	r7, #8
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	40023800 	.word	0x40023800
 800599c:	40007000 	.word	0x40007000

080059a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80059a8:	2300      	movs	r3, #0
 80059aa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e29b      	b.n	8005eee <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f000 8087 	beq.w	8005ad2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80059c4:	4b96      	ldr	r3, [pc, #600]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f003 030c 	and.w	r3, r3, #12
 80059cc:	2b04      	cmp	r3, #4
 80059ce:	d00c      	beq.n	80059ea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059d0:	4b93      	ldr	r3, [pc, #588]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f003 030c 	and.w	r3, r3, #12
 80059d8:	2b08      	cmp	r3, #8
 80059da:	d112      	bne.n	8005a02 <HAL_RCC_OscConfig+0x62>
 80059dc:	4b90      	ldr	r3, [pc, #576]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059e8:	d10b      	bne.n	8005a02 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059ea:	4b8d      	ldr	r3, [pc, #564]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d06c      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x130>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d168      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e275      	b.n	8005eee <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a0a:	d106      	bne.n	8005a1a <HAL_RCC_OscConfig+0x7a>
 8005a0c:	4b84      	ldr	r3, [pc, #528]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a83      	ldr	r2, [pc, #524]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 8005a12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a16:	6013      	str	r3, [r2, #0]
 8005a18:	e02e      	b.n	8005a78 <HAL_RCC_OscConfig+0xd8>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10c      	bne.n	8005a3c <HAL_RCC_OscConfig+0x9c>
 8005a22:	4b7f      	ldr	r3, [pc, #508]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a7e      	ldr	r2, [pc, #504]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 8005a28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a2c:	6013      	str	r3, [r2, #0]
 8005a2e:	4b7c      	ldr	r3, [pc, #496]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a7b      	ldr	r2, [pc, #492]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 8005a34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a38:	6013      	str	r3, [r2, #0]
 8005a3a:	e01d      	b.n	8005a78 <HAL_RCC_OscConfig+0xd8>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a44:	d10c      	bne.n	8005a60 <HAL_RCC_OscConfig+0xc0>
 8005a46:	4b76      	ldr	r3, [pc, #472]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a75      	ldr	r2, [pc, #468]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 8005a4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a50:	6013      	str	r3, [r2, #0]
 8005a52:	4b73      	ldr	r3, [pc, #460]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a72      	ldr	r2, [pc, #456]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 8005a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a5c:	6013      	str	r3, [r2, #0]
 8005a5e:	e00b      	b.n	8005a78 <HAL_RCC_OscConfig+0xd8>
 8005a60:	4b6f      	ldr	r3, [pc, #444]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a6e      	ldr	r2, [pc, #440]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 8005a66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a6a:	6013      	str	r3, [r2, #0]
 8005a6c:	4b6c      	ldr	r3, [pc, #432]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a6b      	ldr	r2, [pc, #428]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 8005a72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d013      	beq.n	8005aa8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a80:	f7fe fd88 	bl	8004594 <HAL_GetTick>
 8005a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a86:	e008      	b.n	8005a9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a88:	f7fe fd84 	bl	8004594 <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	2b64      	cmp	r3, #100	@ 0x64
 8005a94:	d901      	bls.n	8005a9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e229      	b.n	8005eee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a9a:	4b61      	ldr	r3, [pc, #388]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d0f0      	beq.n	8005a88 <HAL_RCC_OscConfig+0xe8>
 8005aa6:	e014      	b.n	8005ad2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa8:	f7fe fd74 	bl	8004594 <HAL_GetTick>
 8005aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005aae:	e008      	b.n	8005ac2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ab0:	f7fe fd70 	bl	8004594 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	2b64      	cmp	r3, #100	@ 0x64
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e215      	b.n	8005eee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ac2:	4b57      	ldr	r3, [pc, #348]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1f0      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x110>
 8005ace:	e000      	b.n	8005ad2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d069      	beq.n	8005bb2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ade:	4b50      	ldr	r3, [pc, #320]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f003 030c 	and.w	r3, r3, #12
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00b      	beq.n	8005b02 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005aea:	4b4d      	ldr	r3, [pc, #308]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f003 030c 	and.w	r3, r3, #12
 8005af2:	2b08      	cmp	r3, #8
 8005af4:	d11c      	bne.n	8005b30 <HAL_RCC_OscConfig+0x190>
 8005af6:	4b4a      	ldr	r3, [pc, #296]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d116      	bne.n	8005b30 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b02:	4b47      	ldr	r3, [pc, #284]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0302 	and.w	r3, r3, #2
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d005      	beq.n	8005b1a <HAL_RCC_OscConfig+0x17a>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d001      	beq.n	8005b1a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e1e9      	b.n	8005eee <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b1a:	4b41      	ldr	r3, [pc, #260]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	00db      	lsls	r3, r3, #3
 8005b28:	493d      	ldr	r1, [pc, #244]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b2e:	e040      	b.n	8005bb2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d023      	beq.n	8005b80 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b38:	4b39      	ldr	r3, [pc, #228]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a38      	ldr	r2, [pc, #224]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 8005b3e:	f043 0301 	orr.w	r3, r3, #1
 8005b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b44:	f7fe fd26 	bl	8004594 <HAL_GetTick>
 8005b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b4a:	e008      	b.n	8005b5e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b4c:	f7fe fd22 	bl	8004594 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d901      	bls.n	8005b5e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e1c7      	b.n	8005eee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b5e:	4b30      	ldr	r3, [pc, #192]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d0f0      	beq.n	8005b4c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b6a:	4b2d      	ldr	r3, [pc, #180]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	00db      	lsls	r3, r3, #3
 8005b78:	4929      	ldr	r1, [pc, #164]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	600b      	str	r3, [r1, #0]
 8005b7e:	e018      	b.n	8005bb2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b80:	4b27      	ldr	r3, [pc, #156]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a26      	ldr	r2, [pc, #152]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 8005b86:	f023 0301 	bic.w	r3, r3, #1
 8005b8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b8c:	f7fe fd02 	bl	8004594 <HAL_GetTick>
 8005b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b92:	e008      	b.n	8005ba6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b94:	f7fe fcfe 	bl	8004594 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d901      	bls.n	8005ba6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e1a3      	b.n	8005eee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0302 	and.w	r3, r3, #2
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1f0      	bne.n	8005b94 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0308 	and.w	r3, r3, #8
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d038      	beq.n	8005c30 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d019      	beq.n	8005bfa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bc6:	4b16      	ldr	r3, [pc, #88]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 8005bc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bca:	4a15      	ldr	r2, [pc, #84]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 8005bcc:	f043 0301 	orr.w	r3, r3, #1
 8005bd0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bd2:	f7fe fcdf 	bl	8004594 <HAL_GetTick>
 8005bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bd8:	e008      	b.n	8005bec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bda:	f7fe fcdb 	bl	8004594 <HAL_GetTick>
 8005bde:	4602      	mov	r2, r0
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d901      	bls.n	8005bec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e180      	b.n	8005eee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bec:	4b0c      	ldr	r3, [pc, #48]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 8005bee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bf0:	f003 0302 	and.w	r3, r3, #2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d0f0      	beq.n	8005bda <HAL_RCC_OscConfig+0x23a>
 8005bf8:	e01a      	b.n	8005c30 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bfa:	4b09      	ldr	r3, [pc, #36]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 8005bfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bfe:	4a08      	ldr	r2, [pc, #32]	@ (8005c20 <HAL_RCC_OscConfig+0x280>)
 8005c00:	f023 0301 	bic.w	r3, r3, #1
 8005c04:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c06:	f7fe fcc5 	bl	8004594 <HAL_GetTick>
 8005c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c0c:	e00a      	b.n	8005c24 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c0e:	f7fe fcc1 	bl	8004594 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d903      	bls.n	8005c24 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e166      	b.n	8005eee <HAL_RCC_OscConfig+0x54e>
 8005c20:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c24:	4b92      	ldr	r3, [pc, #584]	@ (8005e70 <HAL_RCC_OscConfig+0x4d0>)
 8005c26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1ee      	bne.n	8005c0e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0304 	and.w	r3, r3, #4
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f000 80a4 	beq.w	8005d86 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c3e:	4b8c      	ldr	r3, [pc, #560]	@ (8005e70 <HAL_RCC_OscConfig+0x4d0>)
 8005c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10d      	bne.n	8005c66 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c4a:	4b89      	ldr	r3, [pc, #548]	@ (8005e70 <HAL_RCC_OscConfig+0x4d0>)
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c4e:	4a88      	ldr	r2, [pc, #544]	@ (8005e70 <HAL_RCC_OscConfig+0x4d0>)
 8005c50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c56:	4b86      	ldr	r3, [pc, #536]	@ (8005e70 <HAL_RCC_OscConfig+0x4d0>)
 8005c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c5e:	60bb      	str	r3, [r7, #8]
 8005c60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c62:	2301      	movs	r3, #1
 8005c64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c66:	4b83      	ldr	r3, [pc, #524]	@ (8005e74 <HAL_RCC_OscConfig+0x4d4>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d118      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005c72:	4b80      	ldr	r3, [pc, #512]	@ (8005e74 <HAL_RCC_OscConfig+0x4d4>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a7f      	ldr	r2, [pc, #508]	@ (8005e74 <HAL_RCC_OscConfig+0x4d4>)
 8005c78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c7e:	f7fe fc89 	bl	8004594 <HAL_GetTick>
 8005c82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c84:	e008      	b.n	8005c98 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c86:	f7fe fc85 	bl	8004594 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b64      	cmp	r3, #100	@ 0x64
 8005c92:	d901      	bls.n	8005c98 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e12a      	b.n	8005eee <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c98:	4b76      	ldr	r3, [pc, #472]	@ (8005e74 <HAL_RCC_OscConfig+0x4d4>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0f0      	beq.n	8005c86 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d106      	bne.n	8005cba <HAL_RCC_OscConfig+0x31a>
 8005cac:	4b70      	ldr	r3, [pc, #448]	@ (8005e70 <HAL_RCC_OscConfig+0x4d0>)
 8005cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cb0:	4a6f      	ldr	r2, [pc, #444]	@ (8005e70 <HAL_RCC_OscConfig+0x4d0>)
 8005cb2:	f043 0301 	orr.w	r3, r3, #1
 8005cb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cb8:	e02d      	b.n	8005d16 <HAL_RCC_OscConfig+0x376>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10c      	bne.n	8005cdc <HAL_RCC_OscConfig+0x33c>
 8005cc2:	4b6b      	ldr	r3, [pc, #428]	@ (8005e70 <HAL_RCC_OscConfig+0x4d0>)
 8005cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cc6:	4a6a      	ldr	r2, [pc, #424]	@ (8005e70 <HAL_RCC_OscConfig+0x4d0>)
 8005cc8:	f023 0301 	bic.w	r3, r3, #1
 8005ccc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cce:	4b68      	ldr	r3, [pc, #416]	@ (8005e70 <HAL_RCC_OscConfig+0x4d0>)
 8005cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cd2:	4a67      	ldr	r2, [pc, #412]	@ (8005e70 <HAL_RCC_OscConfig+0x4d0>)
 8005cd4:	f023 0304 	bic.w	r3, r3, #4
 8005cd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cda:	e01c      	b.n	8005d16 <HAL_RCC_OscConfig+0x376>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	2b05      	cmp	r3, #5
 8005ce2:	d10c      	bne.n	8005cfe <HAL_RCC_OscConfig+0x35e>
 8005ce4:	4b62      	ldr	r3, [pc, #392]	@ (8005e70 <HAL_RCC_OscConfig+0x4d0>)
 8005ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce8:	4a61      	ldr	r2, [pc, #388]	@ (8005e70 <HAL_RCC_OscConfig+0x4d0>)
 8005cea:	f043 0304 	orr.w	r3, r3, #4
 8005cee:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cf0:	4b5f      	ldr	r3, [pc, #380]	@ (8005e70 <HAL_RCC_OscConfig+0x4d0>)
 8005cf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cf4:	4a5e      	ldr	r2, [pc, #376]	@ (8005e70 <HAL_RCC_OscConfig+0x4d0>)
 8005cf6:	f043 0301 	orr.w	r3, r3, #1
 8005cfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cfc:	e00b      	b.n	8005d16 <HAL_RCC_OscConfig+0x376>
 8005cfe:	4b5c      	ldr	r3, [pc, #368]	@ (8005e70 <HAL_RCC_OscConfig+0x4d0>)
 8005d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d02:	4a5b      	ldr	r2, [pc, #364]	@ (8005e70 <HAL_RCC_OscConfig+0x4d0>)
 8005d04:	f023 0301 	bic.w	r3, r3, #1
 8005d08:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d0a:	4b59      	ldr	r3, [pc, #356]	@ (8005e70 <HAL_RCC_OscConfig+0x4d0>)
 8005d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d0e:	4a58      	ldr	r2, [pc, #352]	@ (8005e70 <HAL_RCC_OscConfig+0x4d0>)
 8005d10:	f023 0304 	bic.w	r3, r3, #4
 8005d14:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d015      	beq.n	8005d4a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d1e:	f7fe fc39 	bl	8004594 <HAL_GetTick>
 8005d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d24:	e00a      	b.n	8005d3c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d26:	f7fe fc35 	bl	8004594 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d901      	bls.n	8005d3c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e0d8      	b.n	8005eee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d3c:	4b4c      	ldr	r3, [pc, #304]	@ (8005e70 <HAL_RCC_OscConfig+0x4d0>)
 8005d3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d40:	f003 0302 	and.w	r3, r3, #2
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d0ee      	beq.n	8005d26 <HAL_RCC_OscConfig+0x386>
 8005d48:	e014      	b.n	8005d74 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d4a:	f7fe fc23 	bl	8004594 <HAL_GetTick>
 8005d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d50:	e00a      	b.n	8005d68 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d52:	f7fe fc1f 	bl	8004594 <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d901      	bls.n	8005d68 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e0c2      	b.n	8005eee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d68:	4b41      	ldr	r3, [pc, #260]	@ (8005e70 <HAL_RCC_OscConfig+0x4d0>)
 8005d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d6c:	f003 0302 	and.w	r3, r3, #2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1ee      	bne.n	8005d52 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d74:	7dfb      	ldrb	r3, [r7, #23]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d105      	bne.n	8005d86 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d7a:	4b3d      	ldr	r3, [pc, #244]	@ (8005e70 <HAL_RCC_OscConfig+0x4d0>)
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d7e:	4a3c      	ldr	r2, [pc, #240]	@ (8005e70 <HAL_RCC_OscConfig+0x4d0>)
 8005d80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d84:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f000 80ae 	beq.w	8005eec <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d90:	4b37      	ldr	r3, [pc, #220]	@ (8005e70 <HAL_RCC_OscConfig+0x4d0>)
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	f003 030c 	and.w	r3, r3, #12
 8005d98:	2b08      	cmp	r3, #8
 8005d9a:	d06d      	beq.n	8005e78 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d14b      	bne.n	8005e3c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005da4:	4b32      	ldr	r3, [pc, #200]	@ (8005e70 <HAL_RCC_OscConfig+0x4d0>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a31      	ldr	r2, [pc, #196]	@ (8005e70 <HAL_RCC_OscConfig+0x4d0>)
 8005daa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005dae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db0:	f7fe fbf0 	bl	8004594 <HAL_GetTick>
 8005db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005db6:	e008      	b.n	8005dca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005db8:	f7fe fbec 	bl	8004594 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e091      	b.n	8005eee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dca:	4b29      	ldr	r3, [pc, #164]	@ (8005e70 <HAL_RCC_OscConfig+0x4d0>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1f0      	bne.n	8005db8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	69da      	ldr	r2, [r3, #28]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	431a      	orrs	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de4:	019b      	lsls	r3, r3, #6
 8005de6:	431a      	orrs	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dec:	085b      	lsrs	r3, r3, #1
 8005dee:	3b01      	subs	r3, #1
 8005df0:	041b      	lsls	r3, r3, #16
 8005df2:	431a      	orrs	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df8:	061b      	lsls	r3, r3, #24
 8005dfa:	431a      	orrs	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e00:	071b      	lsls	r3, r3, #28
 8005e02:	491b      	ldr	r1, [pc, #108]	@ (8005e70 <HAL_RCC_OscConfig+0x4d0>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e08:	4b19      	ldr	r3, [pc, #100]	@ (8005e70 <HAL_RCC_OscConfig+0x4d0>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a18      	ldr	r2, [pc, #96]	@ (8005e70 <HAL_RCC_OscConfig+0x4d0>)
 8005e0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e14:	f7fe fbbe 	bl	8004594 <HAL_GetTick>
 8005e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e1a:	e008      	b.n	8005e2e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e1c:	f7fe fbba 	bl	8004594 <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d901      	bls.n	8005e2e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e05f      	b.n	8005eee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e2e:	4b10      	ldr	r3, [pc, #64]	@ (8005e70 <HAL_RCC_OscConfig+0x4d0>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d0f0      	beq.n	8005e1c <HAL_RCC_OscConfig+0x47c>
 8005e3a:	e057      	b.n	8005eec <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8005e70 <HAL_RCC_OscConfig+0x4d0>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a0b      	ldr	r2, [pc, #44]	@ (8005e70 <HAL_RCC_OscConfig+0x4d0>)
 8005e42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e48:	f7fe fba4 	bl	8004594 <HAL_GetTick>
 8005e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e4e:	e008      	b.n	8005e62 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e50:	f7fe fba0 	bl	8004594 <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e045      	b.n	8005eee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e62:	4b03      	ldr	r3, [pc, #12]	@ (8005e70 <HAL_RCC_OscConfig+0x4d0>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1f0      	bne.n	8005e50 <HAL_RCC_OscConfig+0x4b0>
 8005e6e:	e03d      	b.n	8005eec <HAL_RCC_OscConfig+0x54c>
 8005e70:	40023800 	.word	0x40023800
 8005e74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005e78:	4b1f      	ldr	r3, [pc, #124]	@ (8005ef8 <HAL_RCC_OscConfig+0x558>)
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d030      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d129      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d122      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005eae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d119      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ebe:	085b      	lsrs	r3, r3, #1
 8005ec0:	3b01      	subs	r3, #1
 8005ec2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d10f      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d107      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ee2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d001      	beq.n	8005eec <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e000      	b.n	8005eee <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3718      	adds	r7, #24
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	40023800 	.word	0x40023800

08005efc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005f06:	2300      	movs	r3, #0
 8005f08:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d101      	bne.n	8005f14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e0d0      	b.n	80060b6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f14:	4b6a      	ldr	r3, [pc, #424]	@ (80060c0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 030f 	and.w	r3, r3, #15
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d910      	bls.n	8005f44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f22:	4b67      	ldr	r3, [pc, #412]	@ (80060c0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f023 020f 	bic.w	r2, r3, #15
 8005f2a:	4965      	ldr	r1, [pc, #404]	@ (80060c0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f32:	4b63      	ldr	r3, [pc, #396]	@ (80060c0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 030f 	and.w	r3, r3, #15
 8005f3a:	683a      	ldr	r2, [r7, #0]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d001      	beq.n	8005f44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e0b8      	b.n	80060b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0302 	and.w	r3, r3, #2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d020      	beq.n	8005f92 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0304 	and.w	r3, r3, #4
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d005      	beq.n	8005f68 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f5c:	4b59      	ldr	r3, [pc, #356]	@ (80060c4 <HAL_RCC_ClockConfig+0x1c8>)
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	4a58      	ldr	r2, [pc, #352]	@ (80060c4 <HAL_RCC_ClockConfig+0x1c8>)
 8005f62:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005f66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0308 	and.w	r3, r3, #8
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d005      	beq.n	8005f80 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f74:	4b53      	ldr	r3, [pc, #332]	@ (80060c4 <HAL_RCC_ClockConfig+0x1c8>)
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	4a52      	ldr	r2, [pc, #328]	@ (80060c4 <HAL_RCC_ClockConfig+0x1c8>)
 8005f7a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005f7e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f80:	4b50      	ldr	r3, [pc, #320]	@ (80060c4 <HAL_RCC_ClockConfig+0x1c8>)
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	494d      	ldr	r1, [pc, #308]	@ (80060c4 <HAL_RCC_ClockConfig+0x1c8>)
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d040      	beq.n	8006020 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d107      	bne.n	8005fb6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fa6:	4b47      	ldr	r3, [pc, #284]	@ (80060c4 <HAL_RCC_ClockConfig+0x1c8>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d115      	bne.n	8005fde <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e07f      	b.n	80060b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d107      	bne.n	8005fce <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fbe:	4b41      	ldr	r3, [pc, #260]	@ (80060c4 <HAL_RCC_ClockConfig+0x1c8>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d109      	bne.n	8005fde <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e073      	b.n	80060b6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fce:	4b3d      	ldr	r3, [pc, #244]	@ (80060c4 <HAL_RCC_ClockConfig+0x1c8>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e06b      	b.n	80060b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fde:	4b39      	ldr	r3, [pc, #228]	@ (80060c4 <HAL_RCC_ClockConfig+0x1c8>)
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	f023 0203 	bic.w	r2, r3, #3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	4936      	ldr	r1, [pc, #216]	@ (80060c4 <HAL_RCC_ClockConfig+0x1c8>)
 8005fec:	4313      	orrs	r3, r2
 8005fee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ff0:	f7fe fad0 	bl	8004594 <HAL_GetTick>
 8005ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ff6:	e00a      	b.n	800600e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ff8:	f7fe facc 	bl	8004594 <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006006:	4293      	cmp	r3, r2
 8006008:	d901      	bls.n	800600e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e053      	b.n	80060b6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800600e:	4b2d      	ldr	r3, [pc, #180]	@ (80060c4 <HAL_RCC_ClockConfig+0x1c8>)
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f003 020c 	and.w	r2, r3, #12
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	429a      	cmp	r2, r3
 800601e:	d1eb      	bne.n	8005ff8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006020:	4b27      	ldr	r3, [pc, #156]	@ (80060c0 <HAL_RCC_ClockConfig+0x1c4>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 030f 	and.w	r3, r3, #15
 8006028:	683a      	ldr	r2, [r7, #0]
 800602a:	429a      	cmp	r2, r3
 800602c:	d210      	bcs.n	8006050 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800602e:	4b24      	ldr	r3, [pc, #144]	@ (80060c0 <HAL_RCC_ClockConfig+0x1c4>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f023 020f 	bic.w	r2, r3, #15
 8006036:	4922      	ldr	r1, [pc, #136]	@ (80060c0 <HAL_RCC_ClockConfig+0x1c4>)
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	4313      	orrs	r3, r2
 800603c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800603e:	4b20      	ldr	r3, [pc, #128]	@ (80060c0 <HAL_RCC_ClockConfig+0x1c4>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 030f 	and.w	r3, r3, #15
 8006046:	683a      	ldr	r2, [r7, #0]
 8006048:	429a      	cmp	r2, r3
 800604a:	d001      	beq.n	8006050 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e032      	b.n	80060b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0304 	and.w	r3, r3, #4
 8006058:	2b00      	cmp	r3, #0
 800605a:	d008      	beq.n	800606e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800605c:	4b19      	ldr	r3, [pc, #100]	@ (80060c4 <HAL_RCC_ClockConfig+0x1c8>)
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	4916      	ldr	r1, [pc, #88]	@ (80060c4 <HAL_RCC_ClockConfig+0x1c8>)
 800606a:	4313      	orrs	r3, r2
 800606c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0308 	and.w	r3, r3, #8
 8006076:	2b00      	cmp	r3, #0
 8006078:	d009      	beq.n	800608e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800607a:	4b12      	ldr	r3, [pc, #72]	@ (80060c4 <HAL_RCC_ClockConfig+0x1c8>)
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	00db      	lsls	r3, r3, #3
 8006088:	490e      	ldr	r1, [pc, #56]	@ (80060c4 <HAL_RCC_ClockConfig+0x1c8>)
 800608a:	4313      	orrs	r3, r2
 800608c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800608e:	f000 f821 	bl	80060d4 <HAL_RCC_GetSysClockFreq>
 8006092:	4602      	mov	r2, r0
 8006094:	4b0b      	ldr	r3, [pc, #44]	@ (80060c4 <HAL_RCC_ClockConfig+0x1c8>)
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	091b      	lsrs	r3, r3, #4
 800609a:	f003 030f 	and.w	r3, r3, #15
 800609e:	490a      	ldr	r1, [pc, #40]	@ (80060c8 <HAL_RCC_ClockConfig+0x1cc>)
 80060a0:	5ccb      	ldrb	r3, [r1, r3]
 80060a2:	fa22 f303 	lsr.w	r3, r2, r3
 80060a6:	4a09      	ldr	r2, [pc, #36]	@ (80060cc <HAL_RCC_ClockConfig+0x1d0>)
 80060a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80060aa:	4b09      	ldr	r3, [pc, #36]	@ (80060d0 <HAL_RCC_ClockConfig+0x1d4>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fd fa98 	bl	80035e4 <HAL_InitTick>

  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	40023c00 	.word	0x40023c00
 80060c4:	40023800 	.word	0x40023800
 80060c8:	080112d0 	.word	0x080112d0
 80060cc:	2000017c 	.word	0x2000017c
 80060d0:	20000244 	.word	0x20000244

080060d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060d8:	b094      	sub	sp, #80	@ 0x50
 80060da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80060dc:	2300      	movs	r3, #0
 80060de:	647b      	str	r3, [r7, #68]	@ 0x44
 80060e0:	2300      	movs	r3, #0
 80060e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060e4:	2300      	movs	r3, #0
 80060e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80060e8:	2300      	movs	r3, #0
 80060ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060ec:	4b79      	ldr	r3, [pc, #484]	@ (80062d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f003 030c 	and.w	r3, r3, #12
 80060f4:	2b08      	cmp	r3, #8
 80060f6:	d00d      	beq.n	8006114 <HAL_RCC_GetSysClockFreq+0x40>
 80060f8:	2b08      	cmp	r3, #8
 80060fa:	f200 80e1 	bhi.w	80062c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d002      	beq.n	8006108 <HAL_RCC_GetSysClockFreq+0x34>
 8006102:	2b04      	cmp	r3, #4
 8006104:	d003      	beq.n	800610e <HAL_RCC_GetSysClockFreq+0x3a>
 8006106:	e0db      	b.n	80062c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006108:	4b73      	ldr	r3, [pc, #460]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800610a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800610c:	e0db      	b.n	80062c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800610e:	4b73      	ldr	r3, [pc, #460]	@ (80062dc <HAL_RCC_GetSysClockFreq+0x208>)
 8006110:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006112:	e0d8      	b.n	80062c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006114:	4b6f      	ldr	r3, [pc, #444]	@ (80062d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800611c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800611e:	4b6d      	ldr	r3, [pc, #436]	@ (80062d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d063      	beq.n	80061f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800612a:	4b6a      	ldr	r3, [pc, #424]	@ (80062d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	099b      	lsrs	r3, r3, #6
 8006130:	2200      	movs	r2, #0
 8006132:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006134:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800613c:	633b      	str	r3, [r7, #48]	@ 0x30
 800613e:	2300      	movs	r3, #0
 8006140:	637b      	str	r3, [r7, #52]	@ 0x34
 8006142:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006146:	4622      	mov	r2, r4
 8006148:	462b      	mov	r3, r5
 800614a:	f04f 0000 	mov.w	r0, #0
 800614e:	f04f 0100 	mov.w	r1, #0
 8006152:	0159      	lsls	r1, r3, #5
 8006154:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006158:	0150      	lsls	r0, r2, #5
 800615a:	4602      	mov	r2, r0
 800615c:	460b      	mov	r3, r1
 800615e:	4621      	mov	r1, r4
 8006160:	1a51      	subs	r1, r2, r1
 8006162:	6139      	str	r1, [r7, #16]
 8006164:	4629      	mov	r1, r5
 8006166:	eb63 0301 	sbc.w	r3, r3, r1
 800616a:	617b      	str	r3, [r7, #20]
 800616c:	f04f 0200 	mov.w	r2, #0
 8006170:	f04f 0300 	mov.w	r3, #0
 8006174:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006178:	4659      	mov	r1, fp
 800617a:	018b      	lsls	r3, r1, #6
 800617c:	4651      	mov	r1, sl
 800617e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006182:	4651      	mov	r1, sl
 8006184:	018a      	lsls	r2, r1, #6
 8006186:	4651      	mov	r1, sl
 8006188:	ebb2 0801 	subs.w	r8, r2, r1
 800618c:	4659      	mov	r1, fp
 800618e:	eb63 0901 	sbc.w	r9, r3, r1
 8006192:	f04f 0200 	mov.w	r2, #0
 8006196:	f04f 0300 	mov.w	r3, #0
 800619a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800619e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061a6:	4690      	mov	r8, r2
 80061a8:	4699      	mov	r9, r3
 80061aa:	4623      	mov	r3, r4
 80061ac:	eb18 0303 	adds.w	r3, r8, r3
 80061b0:	60bb      	str	r3, [r7, #8]
 80061b2:	462b      	mov	r3, r5
 80061b4:	eb49 0303 	adc.w	r3, r9, r3
 80061b8:	60fb      	str	r3, [r7, #12]
 80061ba:	f04f 0200 	mov.w	r2, #0
 80061be:	f04f 0300 	mov.w	r3, #0
 80061c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80061c6:	4629      	mov	r1, r5
 80061c8:	024b      	lsls	r3, r1, #9
 80061ca:	4621      	mov	r1, r4
 80061cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80061d0:	4621      	mov	r1, r4
 80061d2:	024a      	lsls	r2, r1, #9
 80061d4:	4610      	mov	r0, r2
 80061d6:	4619      	mov	r1, r3
 80061d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061da:	2200      	movs	r2, #0
 80061dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80061e4:	f7fa faa0 	bl	8000728 <__aeabi_uldivmod>
 80061e8:	4602      	mov	r2, r0
 80061ea:	460b      	mov	r3, r1
 80061ec:	4613      	mov	r3, r2
 80061ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061f0:	e058      	b.n	80062a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061f2:	4b38      	ldr	r3, [pc, #224]	@ (80062d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	099b      	lsrs	r3, r3, #6
 80061f8:	2200      	movs	r2, #0
 80061fa:	4618      	mov	r0, r3
 80061fc:	4611      	mov	r1, r2
 80061fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006202:	623b      	str	r3, [r7, #32]
 8006204:	2300      	movs	r3, #0
 8006206:	627b      	str	r3, [r7, #36]	@ 0x24
 8006208:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800620c:	4642      	mov	r2, r8
 800620e:	464b      	mov	r3, r9
 8006210:	f04f 0000 	mov.w	r0, #0
 8006214:	f04f 0100 	mov.w	r1, #0
 8006218:	0159      	lsls	r1, r3, #5
 800621a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800621e:	0150      	lsls	r0, r2, #5
 8006220:	4602      	mov	r2, r0
 8006222:	460b      	mov	r3, r1
 8006224:	4641      	mov	r1, r8
 8006226:	ebb2 0a01 	subs.w	sl, r2, r1
 800622a:	4649      	mov	r1, r9
 800622c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006230:	f04f 0200 	mov.w	r2, #0
 8006234:	f04f 0300 	mov.w	r3, #0
 8006238:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800623c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006240:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006244:	ebb2 040a 	subs.w	r4, r2, sl
 8006248:	eb63 050b 	sbc.w	r5, r3, fp
 800624c:	f04f 0200 	mov.w	r2, #0
 8006250:	f04f 0300 	mov.w	r3, #0
 8006254:	00eb      	lsls	r3, r5, #3
 8006256:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800625a:	00e2      	lsls	r2, r4, #3
 800625c:	4614      	mov	r4, r2
 800625e:	461d      	mov	r5, r3
 8006260:	4643      	mov	r3, r8
 8006262:	18e3      	adds	r3, r4, r3
 8006264:	603b      	str	r3, [r7, #0]
 8006266:	464b      	mov	r3, r9
 8006268:	eb45 0303 	adc.w	r3, r5, r3
 800626c:	607b      	str	r3, [r7, #4]
 800626e:	f04f 0200 	mov.w	r2, #0
 8006272:	f04f 0300 	mov.w	r3, #0
 8006276:	e9d7 4500 	ldrd	r4, r5, [r7]
 800627a:	4629      	mov	r1, r5
 800627c:	028b      	lsls	r3, r1, #10
 800627e:	4621      	mov	r1, r4
 8006280:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006284:	4621      	mov	r1, r4
 8006286:	028a      	lsls	r2, r1, #10
 8006288:	4610      	mov	r0, r2
 800628a:	4619      	mov	r1, r3
 800628c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800628e:	2200      	movs	r2, #0
 8006290:	61bb      	str	r3, [r7, #24]
 8006292:	61fa      	str	r2, [r7, #28]
 8006294:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006298:	f7fa fa46 	bl	8000728 <__aeabi_uldivmod>
 800629c:	4602      	mov	r2, r0
 800629e:	460b      	mov	r3, r1
 80062a0:	4613      	mov	r3, r2
 80062a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80062a4:	4b0b      	ldr	r3, [pc, #44]	@ (80062d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	0c1b      	lsrs	r3, r3, #16
 80062aa:	f003 0303 	and.w	r3, r3, #3
 80062ae:	3301      	adds	r3, #1
 80062b0:	005b      	lsls	r3, r3, #1
 80062b2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80062b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80062b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80062be:	e002      	b.n	80062c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062c0:	4b05      	ldr	r3, [pc, #20]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80062c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80062c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3750      	adds	r7, #80	@ 0x50
 80062cc:	46bd      	mov	sp, r7
 80062ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062d2:	bf00      	nop
 80062d4:	40023800 	.word	0x40023800
 80062d8:	00f42400 	.word	0x00f42400
 80062dc:	007a1200 	.word	0x007a1200

080062e0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062e0:	b480      	push	{r7}
 80062e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062e4:	4b03      	ldr	r3, [pc, #12]	@ (80062f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80062e6:	681b      	ldr	r3, [r3, #0]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	2000017c 	.word	0x2000017c

080062f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80062fc:	f7ff fff0 	bl	80062e0 <HAL_RCC_GetHCLKFreq>
 8006300:	4602      	mov	r2, r0
 8006302:	4b05      	ldr	r3, [pc, #20]	@ (8006318 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	0a9b      	lsrs	r3, r3, #10
 8006308:	f003 0307 	and.w	r3, r3, #7
 800630c:	4903      	ldr	r1, [pc, #12]	@ (800631c <HAL_RCC_GetPCLK1Freq+0x24>)
 800630e:	5ccb      	ldrb	r3, [r1, r3]
 8006310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006314:	4618      	mov	r0, r3
 8006316:	bd80      	pop	{r7, pc}
 8006318:	40023800 	.word	0x40023800
 800631c:	080112e0 	.word	0x080112e0

08006320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006324:	f7ff ffdc 	bl	80062e0 <HAL_RCC_GetHCLKFreq>
 8006328:	4602      	mov	r2, r0
 800632a:	4b05      	ldr	r3, [pc, #20]	@ (8006340 <HAL_RCC_GetPCLK2Freq+0x20>)
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	0b5b      	lsrs	r3, r3, #13
 8006330:	f003 0307 	and.w	r3, r3, #7
 8006334:	4903      	ldr	r1, [pc, #12]	@ (8006344 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006336:	5ccb      	ldrb	r3, [r1, r3]
 8006338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800633c:	4618      	mov	r0, r3
 800633e:	bd80      	pop	{r7, pc}
 8006340:	40023800 	.word	0x40023800
 8006344:	080112e0 	.word	0x080112e0

08006348 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	220f      	movs	r2, #15
 8006356:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006358:	4b12      	ldr	r3, [pc, #72]	@ (80063a4 <HAL_RCC_GetClockConfig+0x5c>)
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f003 0203 	and.w	r2, r3, #3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006364:	4b0f      	ldr	r3, [pc, #60]	@ (80063a4 <HAL_RCC_GetClockConfig+0x5c>)
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006370:	4b0c      	ldr	r3, [pc, #48]	@ (80063a4 <HAL_RCC_GetClockConfig+0x5c>)
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800637c:	4b09      	ldr	r3, [pc, #36]	@ (80063a4 <HAL_RCC_GetClockConfig+0x5c>)
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	08db      	lsrs	r3, r3, #3
 8006382:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800638a:	4b07      	ldr	r3, [pc, #28]	@ (80063a8 <HAL_RCC_GetClockConfig+0x60>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 020f 	and.w	r2, r3, #15
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	601a      	str	r2, [r3, #0]
}
 8006396:	bf00      	nop
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	40023800 	.word	0x40023800
 80063a8:	40023c00 	.word	0x40023c00

080063ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b088      	sub	sp, #32
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80063b4:	2300      	movs	r3, #0
 80063b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80063b8:	2300      	movs	r3, #0
 80063ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80063bc:	2300      	movs	r3, #0
 80063be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80063c0:	2300      	movs	r3, #0
 80063c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80063c4:	2300      	movs	r3, #0
 80063c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0301 	and.w	r3, r3, #1
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d012      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80063d4:	4b69      	ldr	r3, [pc, #420]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	4a68      	ldr	r2, [pc, #416]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063da:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80063de:	6093      	str	r3, [r2, #8]
 80063e0:	4b66      	ldr	r3, [pc, #408]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063e2:	689a      	ldr	r2, [r3, #8]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063e8:	4964      	ldr	r1, [pc, #400]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d101      	bne.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80063f6:	2301      	movs	r3, #1
 80063f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d017      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006406:	4b5d      	ldr	r3, [pc, #372]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006408:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800640c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006414:	4959      	ldr	r1, [pc, #356]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006416:	4313      	orrs	r3, r2
 8006418:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006420:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006424:	d101      	bne.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006426:	2301      	movs	r3, #1
 8006428:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800642e:	2b00      	cmp	r3, #0
 8006430:	d101      	bne.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006432:	2301      	movs	r3, #1
 8006434:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d017      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006442:	4b4e      	ldr	r3, [pc, #312]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006444:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006448:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006450:	494a      	ldr	r1, [pc, #296]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006452:	4313      	orrs	r3, r2
 8006454:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800645c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006460:	d101      	bne.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006462:	2301      	movs	r3, #1
 8006464:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800646e:	2301      	movs	r3, #1
 8006470:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d001      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800647e:	2301      	movs	r3, #1
 8006480:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0320 	and.w	r3, r3, #32
 800648a:	2b00      	cmp	r3, #0
 800648c:	f000 808b 	beq.w	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006490:	4b3a      	ldr	r3, [pc, #232]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006494:	4a39      	ldr	r2, [pc, #228]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006496:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800649a:	6413      	str	r3, [r2, #64]	@ 0x40
 800649c:	4b37      	ldr	r3, [pc, #220]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800649e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064a4:	60bb      	str	r3, [r7, #8]
 80064a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80064a8:	4b35      	ldr	r3, [pc, #212]	@ (8006580 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a34      	ldr	r2, [pc, #208]	@ (8006580 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80064ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064b4:	f7fe f86e 	bl	8004594 <HAL_GetTick>
 80064b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80064ba:	e008      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064bc:	f7fe f86a 	bl	8004594 <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	2b64      	cmp	r3, #100	@ 0x64
 80064c8:	d901      	bls.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e38f      	b.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80064ce:	4b2c      	ldr	r3, [pc, #176]	@ (8006580 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d0f0      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80064da:	4b28      	ldr	r3, [pc, #160]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d035      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d02e      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80064f8:	4b20      	ldr	r3, [pc, #128]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006500:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006502:	4b1e      	ldr	r3, [pc, #120]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006506:	4a1d      	ldr	r2, [pc, #116]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006508:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800650c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800650e:	4b1b      	ldr	r3, [pc, #108]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006512:	4a1a      	ldr	r2, [pc, #104]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006514:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006518:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800651a:	4a18      	ldr	r2, [pc, #96]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006520:	4b16      	ldr	r3, [pc, #88]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006524:	f003 0301 	and.w	r3, r3, #1
 8006528:	2b01      	cmp	r3, #1
 800652a:	d114      	bne.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800652c:	f7fe f832 	bl	8004594 <HAL_GetTick>
 8006530:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006532:	e00a      	b.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006534:	f7fe f82e 	bl	8004594 <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006542:	4293      	cmp	r3, r2
 8006544:	d901      	bls.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e351      	b.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800654a:	4b0c      	ldr	r3, [pc, #48]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800654c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d0ee      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800655a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800655e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006562:	d111      	bne.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006564:	4b05      	ldr	r3, [pc, #20]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006570:	4b04      	ldr	r3, [pc, #16]	@ (8006584 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006572:	400b      	ands	r3, r1
 8006574:	4901      	ldr	r1, [pc, #4]	@ (800657c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006576:	4313      	orrs	r3, r2
 8006578:	608b      	str	r3, [r1, #8]
 800657a:	e00b      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800657c:	40023800 	.word	0x40023800
 8006580:	40007000 	.word	0x40007000
 8006584:	0ffffcff 	.word	0x0ffffcff
 8006588:	4bac      	ldr	r3, [pc, #688]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	4aab      	ldr	r2, [pc, #684]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800658e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006592:	6093      	str	r3, [r2, #8]
 8006594:	4ba9      	ldr	r3, [pc, #676]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006596:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800659c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065a0:	49a6      	ldr	r1, [pc, #664]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0310 	and.w	r3, r3, #16
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d010      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80065b2:	4ba2      	ldr	r3, [pc, #648]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065b8:	4aa0      	ldr	r2, [pc, #640]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065be:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80065c2:	4b9e      	ldr	r3, [pc, #632]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065cc:	499b      	ldr	r1, [pc, #620]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00a      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80065e0:	4b96      	ldr	r3, [pc, #600]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065e6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065ee:	4993      	ldr	r1, [pc, #588]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00a      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006602:	4b8e      	ldr	r3, [pc, #568]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006608:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006610:	498a      	ldr	r1, [pc, #552]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006612:	4313      	orrs	r3, r2
 8006614:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00a      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006624:	4b85      	ldr	r3, [pc, #532]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800662a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006632:	4982      	ldr	r1, [pc, #520]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006634:	4313      	orrs	r3, r2
 8006636:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00a      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006646:	4b7d      	ldr	r3, [pc, #500]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800664c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006654:	4979      	ldr	r1, [pc, #484]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006656:	4313      	orrs	r3, r2
 8006658:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00a      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006668:	4b74      	ldr	r3, [pc, #464]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800666a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800666e:	f023 0203 	bic.w	r2, r3, #3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006676:	4971      	ldr	r1, [pc, #452]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006678:	4313      	orrs	r3, r2
 800667a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00a      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800668a:	4b6c      	ldr	r3, [pc, #432]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800668c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006690:	f023 020c 	bic.w	r2, r3, #12
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006698:	4968      	ldr	r1, [pc, #416]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800669a:	4313      	orrs	r3, r2
 800669c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00a      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80066ac:	4b63      	ldr	r3, [pc, #396]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80066ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066b2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066ba:	4960      	ldr	r1, [pc, #384]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00a      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80066ce:	4b5b      	ldr	r3, [pc, #364]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80066d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066d4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066dc:	4957      	ldr	r1, [pc, #348]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00a      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80066f0:	4b52      	ldr	r3, [pc, #328]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80066f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066f6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066fe:	494f      	ldr	r1, [pc, #316]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006700:	4313      	orrs	r3, r2
 8006702:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00a      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006712:	4b4a      	ldr	r3, [pc, #296]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006714:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006718:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006720:	4946      	ldr	r1, [pc, #280]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006722:	4313      	orrs	r3, r2
 8006724:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00a      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006734:	4b41      	ldr	r3, [pc, #260]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800673a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006742:	493e      	ldr	r1, [pc, #248]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006744:	4313      	orrs	r3, r2
 8006746:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00a      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006756:	4b39      	ldr	r3, [pc, #228]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800675c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006764:	4935      	ldr	r1, [pc, #212]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006766:	4313      	orrs	r3, r2
 8006768:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00a      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006778:	4b30      	ldr	r3, [pc, #192]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800677a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800677e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006786:	492d      	ldr	r1, [pc, #180]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006788:	4313      	orrs	r3, r2
 800678a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006796:	2b00      	cmp	r3, #0
 8006798:	d011      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800679a:	4b28      	ldr	r3, [pc, #160]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800679c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067a0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80067a8:	4924      	ldr	r1, [pc, #144]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80067aa:	4313      	orrs	r3, r2
 80067ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80067b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067b8:	d101      	bne.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80067ba:	2301      	movs	r3, #1
 80067bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0308 	and.w	r3, r3, #8
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d001      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80067ca:	2301      	movs	r3, #1
 80067cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00a      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067da:	4b18      	ldr	r3, [pc, #96]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80067dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067e0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067e8:	4914      	ldr	r1, [pc, #80]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80067ea:	4313      	orrs	r3, r2
 80067ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00b      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80067fc:	4b0f      	ldr	r3, [pc, #60]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80067fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006802:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800680c:	490b      	ldr	r1, [pc, #44]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800680e:	4313      	orrs	r3, r2
 8006810:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00f      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006820:	4b06      	ldr	r3, [pc, #24]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006826:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006830:	4902      	ldr	r1, [pc, #8]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006832:	4313      	orrs	r3, r2
 8006834:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006838:	e002      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800683a:	bf00      	nop
 800683c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00b      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800684c:	4b8a      	ldr	r3, [pc, #552]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800684e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006852:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800685c:	4986      	ldr	r1, [pc, #536]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800685e:	4313      	orrs	r3, r2
 8006860:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00b      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006870:	4b81      	ldr	r3, [pc, #516]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006872:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006876:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006880:	497d      	ldr	r1, [pc, #500]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006882:	4313      	orrs	r3, r2
 8006884:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d006      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 80d6 	beq.w	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800689c:	4b76      	ldr	r3, [pc, #472]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a75      	ldr	r2, [pc, #468]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80068a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80068a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068a8:	f7fd fe74 	bl	8004594 <HAL_GetTick>
 80068ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068ae:	e008      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80068b0:	f7fd fe70 	bl	8004594 <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	2b64      	cmp	r3, #100	@ 0x64
 80068bc:	d901      	bls.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	e195      	b.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80068c2:	4b6d      	ldr	r3, [pc, #436]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1f0      	bne.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d021      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d11d      	bne.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80068e2:	4b65      	ldr	r3, [pc, #404]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80068e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068e8:	0c1b      	lsrs	r3, r3, #16
 80068ea:	f003 0303 	and.w	r3, r3, #3
 80068ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80068f0:	4b61      	ldr	r3, [pc, #388]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80068f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068f6:	0e1b      	lsrs	r3, r3, #24
 80068f8:	f003 030f 	and.w	r3, r3, #15
 80068fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	019a      	lsls	r2, r3, #6
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	041b      	lsls	r3, r3, #16
 8006908:	431a      	orrs	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	061b      	lsls	r3, r3, #24
 800690e:	431a      	orrs	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	071b      	lsls	r3, r3, #28
 8006916:	4958      	ldr	r1, [pc, #352]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006918:	4313      	orrs	r3, r2
 800691a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006926:	2b00      	cmp	r3, #0
 8006928:	d004      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800692e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006932:	d00a      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800693c:	2b00      	cmp	r3, #0
 800693e:	d02e      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006944:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006948:	d129      	bne.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800694a:	4b4b      	ldr	r3, [pc, #300]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800694c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006950:	0c1b      	lsrs	r3, r3, #16
 8006952:	f003 0303 	and.w	r3, r3, #3
 8006956:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006958:	4b47      	ldr	r3, [pc, #284]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800695a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800695e:	0f1b      	lsrs	r3, r3, #28
 8006960:	f003 0307 	and.w	r3, r3, #7
 8006964:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	019a      	lsls	r2, r3, #6
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	041b      	lsls	r3, r3, #16
 8006970:	431a      	orrs	r2, r3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	061b      	lsls	r3, r3, #24
 8006978:	431a      	orrs	r2, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	071b      	lsls	r3, r3, #28
 800697e:	493e      	ldr	r1, [pc, #248]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006980:	4313      	orrs	r3, r2
 8006982:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006986:	4b3c      	ldr	r3, [pc, #240]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006988:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800698c:	f023 021f 	bic.w	r2, r3, #31
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006994:	3b01      	subs	r3, #1
 8006996:	4938      	ldr	r1, [pc, #224]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006998:	4313      	orrs	r3, r2
 800699a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d01d      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80069aa:	4b33      	ldr	r3, [pc, #204]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80069ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069b0:	0e1b      	lsrs	r3, r3, #24
 80069b2:	f003 030f 	and.w	r3, r3, #15
 80069b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80069b8:	4b2f      	ldr	r3, [pc, #188]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80069ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069be:	0f1b      	lsrs	r3, r3, #28
 80069c0:	f003 0307 	and.w	r3, r3, #7
 80069c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	019a      	lsls	r2, r3, #6
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	041b      	lsls	r3, r3, #16
 80069d2:	431a      	orrs	r2, r3
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	061b      	lsls	r3, r3, #24
 80069d8:	431a      	orrs	r2, r3
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	071b      	lsls	r3, r3, #28
 80069de:	4926      	ldr	r1, [pc, #152]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80069e0:	4313      	orrs	r3, r2
 80069e2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d011      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	019a      	lsls	r2, r3, #6
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	041b      	lsls	r3, r3, #16
 80069fe:	431a      	orrs	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	061b      	lsls	r3, r3, #24
 8006a06:	431a      	orrs	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	071b      	lsls	r3, r3, #28
 8006a0e:	491a      	ldr	r1, [pc, #104]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a10:	4313      	orrs	r3, r2
 8006a12:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006a16:	4b18      	ldr	r3, [pc, #96]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a17      	ldr	r2, [pc, #92]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a1c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006a20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a22:	f7fd fdb7 	bl	8004594 <HAL_GetTick>
 8006a26:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a28:	e008      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a2a:	f7fd fdb3 	bl	8004594 <HAL_GetTick>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	2b64      	cmp	r3, #100	@ 0x64
 8006a36:	d901      	bls.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e0d8      	b.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d0f0      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	f040 80ce 	bne.w	8006bec <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006a50:	4b09      	ldr	r3, [pc, #36]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a08      	ldr	r2, [pc, #32]	@ (8006a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006a56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a5c:	f7fd fd9a 	bl	8004594 <HAL_GetTick>
 8006a60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a62:	e00b      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006a64:	f7fd fd96 	bl	8004594 <HAL_GetTick>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	2b64      	cmp	r3, #100	@ 0x64
 8006a70:	d904      	bls.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e0bb      	b.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006a76:	bf00      	nop
 8006a78:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a7c:	4b5e      	ldr	r3, [pc, #376]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a88:	d0ec      	beq.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d003      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d009      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d02e      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d12a      	bne.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006ab2:	4b51      	ldr	r3, [pc, #324]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ab8:	0c1b      	lsrs	r3, r3, #16
 8006aba:	f003 0303 	and.w	r3, r3, #3
 8006abe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006ac0:	4b4d      	ldr	r3, [pc, #308]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ac6:	0f1b      	lsrs	r3, r3, #28
 8006ac8:	f003 0307 	and.w	r3, r3, #7
 8006acc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	019a      	lsls	r2, r3, #6
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	041b      	lsls	r3, r3, #16
 8006ad8:	431a      	orrs	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	061b      	lsls	r3, r3, #24
 8006ae0:	431a      	orrs	r2, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	071b      	lsls	r3, r3, #28
 8006ae6:	4944      	ldr	r1, [pc, #272]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006aee:	4b42      	ldr	r3, [pc, #264]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006af4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006afc:	3b01      	subs	r3, #1
 8006afe:	021b      	lsls	r3, r3, #8
 8006b00:	493d      	ldr	r1, [pc, #244]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b02:	4313      	orrs	r3, r2
 8006b04:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d022      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b1c:	d11d      	bne.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b1e:	4b36      	ldr	r3, [pc, #216]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b24:	0e1b      	lsrs	r3, r3, #24
 8006b26:	f003 030f 	and.w	r3, r3, #15
 8006b2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006b2c:	4b32      	ldr	r3, [pc, #200]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b32:	0f1b      	lsrs	r3, r3, #28
 8006b34:	f003 0307 	and.w	r3, r3, #7
 8006b38:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	019a      	lsls	r2, r3, #6
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a1b      	ldr	r3, [r3, #32]
 8006b44:	041b      	lsls	r3, r3, #16
 8006b46:	431a      	orrs	r2, r3
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	061b      	lsls	r3, r3, #24
 8006b4c:	431a      	orrs	r2, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	071b      	lsls	r3, r3, #28
 8006b52:	4929      	ldr	r1, [pc, #164]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b54:	4313      	orrs	r3, r2
 8006b56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0308 	and.w	r3, r3, #8
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d028      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b66:	4b24      	ldr	r3, [pc, #144]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b6c:	0e1b      	lsrs	r3, r3, #24
 8006b6e:	f003 030f 	and.w	r3, r3, #15
 8006b72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006b74:	4b20      	ldr	r3, [pc, #128]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b7a:	0c1b      	lsrs	r3, r3, #16
 8006b7c:	f003 0303 	and.w	r3, r3, #3
 8006b80:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	019a      	lsls	r2, r3, #6
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	041b      	lsls	r3, r3, #16
 8006b8c:	431a      	orrs	r2, r3
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	061b      	lsls	r3, r3, #24
 8006b92:	431a      	orrs	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	071b      	lsls	r3, r3, #28
 8006b9a:	4917      	ldr	r1, [pc, #92]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006ba2:	4b15      	ldr	r3, [pc, #84]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ba8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bb0:	4911      	ldr	r1, [pc, #68]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a0e      	ldr	r2, [pc, #56]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006bbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bc4:	f7fd fce6 	bl	8004594 <HAL_GetTick>
 8006bc8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006bca:	e008      	b.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006bcc:	f7fd fce2 	bl	8004594 <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	2b64      	cmp	r3, #100	@ 0x64
 8006bd8:	d901      	bls.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e007      	b.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006bde:	4b06      	ldr	r3, [pc, #24]	@ (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006be6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bea:	d1ef      	bne.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3720      	adds	r7, #32
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	40023800 	.word	0x40023800

08006bfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e09d      	b.n	8006d4a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d108      	bne.n	8006c28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c1e:	d009      	beq.n	8006c34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	61da      	str	r2, [r3, #28]
 8006c26:	e005      	b.n	8006c34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d106      	bne.n	8006c54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f7fc fc0c 	bl	800346c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2202      	movs	r2, #2
 8006c58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c6a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006c74:	d902      	bls.n	8006c7c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006c76:	2300      	movs	r3, #0
 8006c78:	60fb      	str	r3, [r7, #12]
 8006c7a:	e002      	b.n	8006c82 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006c7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006c80:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006c8a:	d007      	beq.n	8006c9c <HAL_SPI_Init+0xa0>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006c94:	d002      	beq.n	8006c9c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006cac:	431a      	orrs	r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	431a      	orrs	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	695b      	ldr	r3, [r3, #20]
 8006cbc:	f003 0301 	and.w	r3, r3, #1
 8006cc0:	431a      	orrs	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cca:	431a      	orrs	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	69db      	ldr	r3, [r3, #28]
 8006cd0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006cd4:	431a      	orrs	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a1b      	ldr	r3, [r3, #32]
 8006cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cde:	ea42 0103 	orr.w	r1, r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	0c1b      	lsrs	r3, r3, #16
 8006cf8:	f003 0204 	and.w	r2, r3, #4
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d00:	f003 0310 	and.w	r3, r3, #16
 8006d04:	431a      	orrs	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d0a:	f003 0308 	and.w	r3, r3, #8
 8006d0e:	431a      	orrs	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006d18:	ea42 0103 	orr.w	r1, r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	430a      	orrs	r2, r1
 8006d28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	69da      	ldr	r2, [r3, #28]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b088      	sub	sp, #32
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	60f8      	str	r0, [r7, #12]
 8006d5a:	60b9      	str	r1, [r7, #8]
 8006d5c:	603b      	str	r3, [r7, #0]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d62:	2300      	movs	r3, #0
 8006d64:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d101      	bne.n	8006d74 <HAL_SPI_Transmit+0x22>
 8006d70:	2302      	movs	r3, #2
 8006d72:	e15f      	b.n	8007034 <HAL_SPI_Transmit+0x2e2>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d7c:	f7fd fc0a 	bl	8004594 <HAL_GetTick>
 8006d80:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006d82:	88fb      	ldrh	r3, [r7, #6]
 8006d84:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d002      	beq.n	8006d98 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006d92:	2302      	movs	r3, #2
 8006d94:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d96:	e148      	b.n	800702a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d002      	beq.n	8006da4 <HAL_SPI_Transmit+0x52>
 8006d9e:	88fb      	ldrh	r3, [r7, #6]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d102      	bne.n	8006daa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006da8:	e13f      	b.n	800702a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2203      	movs	r2, #3
 8006dae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	68ba      	ldr	r2, [r7, #8]
 8006dbc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	88fa      	ldrh	r2, [r7, #6]
 8006dc2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	88fa      	ldrh	r2, [r7, #6]
 8006dc8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2200      	movs	r2, #0
 8006dea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006df4:	d10f      	bne.n	8006e16 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e14:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e20:	2b40      	cmp	r3, #64	@ 0x40
 8006e22:	d007      	beq.n	8006e34 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e3c:	d94f      	bls.n	8006ede <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d002      	beq.n	8006e4c <HAL_SPI_Transmit+0xfa>
 8006e46:	8afb      	ldrh	r3, [r7, #22]
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d142      	bne.n	8006ed2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e50:	881a      	ldrh	r2, [r3, #0]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e5c:	1c9a      	adds	r2, r3, #2
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006e70:	e02f      	b.n	8006ed2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	f003 0302 	and.w	r3, r3, #2
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d112      	bne.n	8006ea6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e84:	881a      	ldrh	r2, [r3, #0]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e90:	1c9a      	adds	r2, r3, #2
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006ea4:	e015      	b.n	8006ed2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ea6:	f7fd fb75 	bl	8004594 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d803      	bhi.n	8006ebe <HAL_SPI_Transmit+0x16c>
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ebc:	d102      	bne.n	8006ec4 <HAL_SPI_Transmit+0x172>
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d106      	bne.n	8006ed2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006ed0:	e0ab      	b.n	800702a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1ca      	bne.n	8006e72 <HAL_SPI_Transmit+0x120>
 8006edc:	e080      	b.n	8006fe0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d002      	beq.n	8006eec <HAL_SPI_Transmit+0x19a>
 8006ee6:	8afb      	ldrh	r3, [r7, #22]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d174      	bne.n	8006fd6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d912      	bls.n	8006f1c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006efa:	881a      	ldrh	r2, [r3, #0]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f06:	1c9a      	adds	r2, r3, #2
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	3b02      	subs	r3, #2
 8006f14:	b29a      	uxth	r2, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006f1a:	e05c      	b.n	8006fd6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	330c      	adds	r3, #12
 8006f26:	7812      	ldrb	r2, [r2, #0]
 8006f28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f2e:	1c5a      	adds	r2, r3, #1
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006f42:	e048      	b.n	8006fd6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f003 0302 	and.w	r3, r3, #2
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d12b      	bne.n	8006faa <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d912      	bls.n	8006f82 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f60:	881a      	ldrh	r2, [r3, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f6c:	1c9a      	adds	r2, r3, #2
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	3b02      	subs	r3, #2
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006f80:	e029      	b.n	8006fd6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	330c      	adds	r3, #12
 8006f8c:	7812      	ldrb	r2, [r2, #0]
 8006f8e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f94:	1c5a      	adds	r2, r3, #1
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006fa8:	e015      	b.n	8006fd6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006faa:	f7fd faf3 	bl	8004594 <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	683a      	ldr	r2, [r7, #0]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d803      	bhi.n	8006fc2 <HAL_SPI_Transmit+0x270>
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc0:	d102      	bne.n	8006fc8 <HAL_SPI_Transmit+0x276>
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d106      	bne.n	8006fd6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006fd4:	e029      	b.n	800702a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1b1      	bne.n	8006f44 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fe0:	69ba      	ldr	r2, [r7, #24]
 8006fe2:	6839      	ldr	r1, [r7, #0]
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f000 fb77 	bl	80076d8 <SPI_EndRxTxTransaction>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d002      	beq.n	8006ff6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10a      	bne.n	8007014 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ffe:	2300      	movs	r3, #0
 8007000:	613b      	str	r3, [r7, #16]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	613b      	str	r3, [r7, #16]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	613b      	str	r3, [r7, #16]
 8007012:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007018:	2b00      	cmp	r3, #0
 800701a:	d002      	beq.n	8007022 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	77fb      	strb	r3, [r7, #31]
 8007020:	e003      	b.n	800702a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2201      	movs	r2, #1
 8007026:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007032:	7ffb      	ldrb	r3, [r7, #31]
}
 8007034:	4618      	mov	r0, r3
 8007036:	3720      	adds	r7, #32
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b08a      	sub	sp, #40	@ 0x28
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]
 8007048:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800704a:	2301      	movs	r3, #1
 800704c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800704e:	2300      	movs	r3, #0
 8007050:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800705a:	2b01      	cmp	r3, #1
 800705c:	d101      	bne.n	8007062 <HAL_SPI_TransmitReceive+0x26>
 800705e:	2302      	movs	r3, #2
 8007060:	e20a      	b.n	8007478 <HAL_SPI_TransmitReceive+0x43c>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800706a:	f7fd fa93 	bl	8004594 <HAL_GetTick>
 800706e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007076:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800707e:	887b      	ldrh	r3, [r7, #2]
 8007080:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007082:	887b      	ldrh	r3, [r7, #2]
 8007084:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007086:	7efb      	ldrb	r3, [r7, #27]
 8007088:	2b01      	cmp	r3, #1
 800708a:	d00e      	beq.n	80070aa <HAL_SPI_TransmitReceive+0x6e>
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007092:	d106      	bne.n	80070a2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d102      	bne.n	80070a2 <HAL_SPI_TransmitReceive+0x66>
 800709c:	7efb      	ldrb	r3, [r7, #27]
 800709e:	2b04      	cmp	r3, #4
 80070a0:	d003      	beq.n	80070aa <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80070a2:	2302      	movs	r3, #2
 80070a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80070a8:	e1e0      	b.n	800746c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d005      	beq.n	80070bc <HAL_SPI_TransmitReceive+0x80>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d002      	beq.n	80070bc <HAL_SPI_TransmitReceive+0x80>
 80070b6:	887b      	ldrh	r3, [r7, #2]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d103      	bne.n	80070c4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80070c2:	e1d3      	b.n	800746c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b04      	cmp	r3, #4
 80070ce:	d003      	beq.n	80070d8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2205      	movs	r2, #5
 80070d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	887a      	ldrh	r2, [r7, #2]
 80070e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	887a      	ldrh	r2, [r7, #2]
 80070f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	887a      	ldrh	r2, [r7, #2]
 80070fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	887a      	ldrh	r2, [r7, #2]
 8007104:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800711a:	d802      	bhi.n	8007122 <HAL_SPI_TransmitReceive+0xe6>
 800711c:	8a3b      	ldrh	r3, [r7, #16]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d908      	bls.n	8007134 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007130:	605a      	str	r2, [r3, #4]
 8007132:	e007      	b.n	8007144 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	685a      	ldr	r2, [r3, #4]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007142:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800714e:	2b40      	cmp	r3, #64	@ 0x40
 8007150:	d007      	beq.n	8007162 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007160:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800716a:	f240 8081 	bls.w	8007270 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d002      	beq.n	800717c <HAL_SPI_TransmitReceive+0x140>
 8007176:	8a7b      	ldrh	r3, [r7, #18]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d16d      	bne.n	8007258 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007180:	881a      	ldrh	r2, [r3, #0]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800718c:	1c9a      	adds	r2, r3, #2
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007196:	b29b      	uxth	r3, r3
 8007198:	3b01      	subs	r3, #1
 800719a:	b29a      	uxth	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071a0:	e05a      	b.n	8007258 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	f003 0302 	and.w	r3, r3, #2
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d11b      	bne.n	80071e8 <HAL_SPI_TransmitReceive+0x1ac>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d016      	beq.n	80071e8 <HAL_SPI_TransmitReceive+0x1ac>
 80071ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d113      	bne.n	80071e8 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071c4:	881a      	ldrh	r2, [r3, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d0:	1c9a      	adds	r2, r3, #2
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071da:	b29b      	uxth	r3, r3
 80071dc:	3b01      	subs	r3, #1
 80071de:	b29a      	uxth	r2, r3
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80071e4:	2300      	movs	r3, #0
 80071e6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f003 0301 	and.w	r3, r3, #1
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d11c      	bne.n	8007230 <HAL_SPI_TransmitReceive+0x1f4>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d016      	beq.n	8007230 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68da      	ldr	r2, [r3, #12]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800720c:	b292      	uxth	r2, r2
 800720e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007214:	1c9a      	adds	r2, r3, #2
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007220:	b29b      	uxth	r3, r3
 8007222:	3b01      	subs	r3, #1
 8007224:	b29a      	uxth	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800722c:	2301      	movs	r3, #1
 800722e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007230:	f7fd f9b0 	bl	8004594 <HAL_GetTick>
 8007234:	4602      	mov	r2, r0
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800723c:	429a      	cmp	r2, r3
 800723e:	d80b      	bhi.n	8007258 <HAL_SPI_TransmitReceive+0x21c>
 8007240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007246:	d007      	beq.n	8007258 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007248:	2303      	movs	r3, #3
 800724a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007256:	e109      	b.n	800746c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800725c:	b29b      	uxth	r3, r3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d19f      	bne.n	80071a2 <HAL_SPI_TransmitReceive+0x166>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007268:	b29b      	uxth	r3, r3
 800726a:	2b00      	cmp	r3, #0
 800726c:	d199      	bne.n	80071a2 <HAL_SPI_TransmitReceive+0x166>
 800726e:	e0e3      	b.n	8007438 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d003      	beq.n	8007280 <HAL_SPI_TransmitReceive+0x244>
 8007278:	8a7b      	ldrh	r3, [r7, #18]
 800727a:	2b01      	cmp	r3, #1
 800727c:	f040 80cf 	bne.w	800741e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007284:	b29b      	uxth	r3, r3
 8007286:	2b01      	cmp	r3, #1
 8007288:	d912      	bls.n	80072b0 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800728e:	881a      	ldrh	r2, [r3, #0]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800729a:	1c9a      	adds	r2, r3, #2
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	3b02      	subs	r3, #2
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80072ae:	e0b6      	b.n	800741e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	330c      	adds	r3, #12
 80072ba:	7812      	ldrb	r2, [r2, #0]
 80072bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072c2:	1c5a      	adds	r2, r3, #1
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	3b01      	subs	r3, #1
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072d6:	e0a2      	b.n	800741e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	f003 0302 	and.w	r3, r3, #2
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d134      	bne.n	8007350 <HAL_SPI_TransmitReceive+0x314>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d02f      	beq.n	8007350 <HAL_SPI_TransmitReceive+0x314>
 80072f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d12c      	bne.n	8007350 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d912      	bls.n	8007326 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007304:	881a      	ldrh	r2, [r3, #0]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007310:	1c9a      	adds	r2, r3, #2
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800731a:	b29b      	uxth	r3, r3
 800731c:	3b02      	subs	r3, #2
 800731e:	b29a      	uxth	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007324:	e012      	b.n	800734c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	330c      	adds	r3, #12
 8007330:	7812      	ldrb	r2, [r2, #0]
 8007332:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007338:	1c5a      	adds	r2, r3, #1
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007342:	b29b      	uxth	r3, r3
 8007344:	3b01      	subs	r3, #1
 8007346:	b29a      	uxth	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800734c:	2300      	movs	r3, #0
 800734e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	2b01      	cmp	r3, #1
 800735c:	d148      	bne.n	80073f0 <HAL_SPI_TransmitReceive+0x3b4>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007364:	b29b      	uxth	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	d042      	beq.n	80073f0 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007370:	b29b      	uxth	r3, r3
 8007372:	2b01      	cmp	r3, #1
 8007374:	d923      	bls.n	80073be <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68da      	ldr	r2, [r3, #12]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007380:	b292      	uxth	r2, r2
 8007382:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007388:	1c9a      	adds	r2, r3, #2
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007394:	b29b      	uxth	r3, r3
 8007396:	3b02      	subs	r3, #2
 8007398:	b29a      	uxth	r2, r3
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d81f      	bhi.n	80073ec <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	685a      	ldr	r2, [r3, #4]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80073ba:	605a      	str	r2, [r3, #4]
 80073bc:	e016      	b.n	80073ec <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f103 020c 	add.w	r2, r3, #12
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ca:	7812      	ldrb	r2, [r2, #0]
 80073cc:	b2d2      	uxtb	r2, r2
 80073ce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d4:	1c5a      	adds	r2, r3, #1
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	3b01      	subs	r3, #1
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80073ec:	2301      	movs	r3, #1
 80073ee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80073f0:	f7fd f8d0 	bl	8004594 <HAL_GetTick>
 80073f4:	4602      	mov	r2, r0
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d803      	bhi.n	8007408 <HAL_SPI_TransmitReceive+0x3cc>
 8007400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007406:	d102      	bne.n	800740e <HAL_SPI_TransmitReceive+0x3d2>
 8007408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800740a:	2b00      	cmp	r3, #0
 800740c:	d107      	bne.n	800741e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800740e:	2303      	movs	r3, #3
 8007410:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800741c:	e026      	b.n	800746c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007422:	b29b      	uxth	r3, r3
 8007424:	2b00      	cmp	r3, #0
 8007426:	f47f af57 	bne.w	80072d8 <HAL_SPI_TransmitReceive+0x29c>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007430:	b29b      	uxth	r3, r3
 8007432:	2b00      	cmp	r3, #0
 8007434:	f47f af50 	bne.w	80072d8 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007438:	69fa      	ldr	r2, [r7, #28]
 800743a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f000 f94b 	bl	80076d8 <SPI_EndRxTxTransaction>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d005      	beq.n	8007454 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2220      	movs	r2, #32
 8007452:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007458:	2b00      	cmp	r3, #0
 800745a:	d003      	beq.n	8007464 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007462:	e003      	b.n	800746c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007474:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8007478:	4618      	mov	r0, r3
 800747a:	3728      	adds	r7, #40	@ 0x28
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800748e:	b2db      	uxtb	r3, r3
}
 8007490:	4618      	mov	r0, r3
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b088      	sub	sp, #32
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	603b      	str	r3, [r7, #0]
 80074a8:	4613      	mov	r3, r2
 80074aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80074ac:	f7fd f872 	bl	8004594 <HAL_GetTick>
 80074b0:	4602      	mov	r2, r0
 80074b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b4:	1a9b      	subs	r3, r3, r2
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	4413      	add	r3, r2
 80074ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80074bc:	f7fd f86a 	bl	8004594 <HAL_GetTick>
 80074c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80074c2:	4b39      	ldr	r3, [pc, #228]	@ (80075a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	015b      	lsls	r3, r3, #5
 80074c8:	0d1b      	lsrs	r3, r3, #20
 80074ca:	69fa      	ldr	r2, [r7, #28]
 80074cc:	fb02 f303 	mul.w	r3, r2, r3
 80074d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074d2:	e054      	b.n	800757e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074da:	d050      	beq.n	800757e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80074dc:	f7fd f85a 	bl	8004594 <HAL_GetTick>
 80074e0:	4602      	mov	r2, r0
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	69fa      	ldr	r2, [r7, #28]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d902      	bls.n	80074f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d13d      	bne.n	800756e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	685a      	ldr	r2, [r3, #4]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007500:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800750a:	d111      	bne.n	8007530 <SPI_WaitFlagStateUntilTimeout+0x94>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007514:	d004      	beq.n	8007520 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800751e:	d107      	bne.n	8007530 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800752e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007534:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007538:	d10f      	bne.n	800755a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007548:	601a      	str	r2, [r3, #0]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007558:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800756a:	2303      	movs	r3, #3
 800756c:	e017      	b.n	800759e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d101      	bne.n	8007578 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007574:	2300      	movs	r3, #0
 8007576:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	3b01      	subs	r3, #1
 800757c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	689a      	ldr	r2, [r3, #8]
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	4013      	ands	r3, r2
 8007588:	68ba      	ldr	r2, [r7, #8]
 800758a:	429a      	cmp	r2, r3
 800758c:	bf0c      	ite	eq
 800758e:	2301      	moveq	r3, #1
 8007590:	2300      	movne	r3, #0
 8007592:	b2db      	uxtb	r3, r3
 8007594:	461a      	mov	r2, r3
 8007596:	79fb      	ldrb	r3, [r7, #7]
 8007598:	429a      	cmp	r2, r3
 800759a:	d19b      	bne.n	80074d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3720      	adds	r7, #32
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	2000017c 	.word	0x2000017c

080075ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b08a      	sub	sp, #40	@ 0x28
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
 80075b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80075ba:	2300      	movs	r3, #0
 80075bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80075be:	f7fc ffe9 	bl	8004594 <HAL_GetTick>
 80075c2:	4602      	mov	r2, r0
 80075c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c6:	1a9b      	subs	r3, r3, r2
 80075c8:	683a      	ldr	r2, [r7, #0]
 80075ca:	4413      	add	r3, r2
 80075cc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80075ce:	f7fc ffe1 	bl	8004594 <HAL_GetTick>
 80075d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	330c      	adds	r3, #12
 80075da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80075dc:	4b3d      	ldr	r3, [pc, #244]	@ (80076d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	4613      	mov	r3, r2
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	4413      	add	r3, r2
 80075e6:	00da      	lsls	r2, r3, #3
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	0d1b      	lsrs	r3, r3, #20
 80075ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075ee:	fb02 f303 	mul.w	r3, r2, r3
 80075f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80075f4:	e060      	b.n	80076b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80075fc:	d107      	bne.n	800760e <SPI_WaitFifoStateUntilTimeout+0x62>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d104      	bne.n	800760e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	b2db      	uxtb	r3, r3
 800760a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800760c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007614:	d050      	beq.n	80076b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007616:	f7fc ffbd 	bl	8004594 <HAL_GetTick>
 800761a:	4602      	mov	r2, r0
 800761c:	6a3b      	ldr	r3, [r7, #32]
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007622:	429a      	cmp	r2, r3
 8007624:	d902      	bls.n	800762c <SPI_WaitFifoStateUntilTimeout+0x80>
 8007626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007628:	2b00      	cmp	r3, #0
 800762a:	d13d      	bne.n	80076a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	685a      	ldr	r2, [r3, #4]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800763a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007644:	d111      	bne.n	800766a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800764e:	d004      	beq.n	800765a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007658:	d107      	bne.n	800766a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007668:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800766e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007672:	d10f      	bne.n	8007694 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007682:	601a      	str	r2, [r3, #0]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007692:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e010      	b.n	80076ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d101      	bne.n	80076b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80076ae:	2300      	movs	r3, #0
 80076b0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	3b01      	subs	r3, #1
 80076b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	689a      	ldr	r2, [r3, #8]
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	4013      	ands	r3, r2
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d196      	bne.n	80075f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3728      	adds	r7, #40	@ 0x28
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	2000017c 	.word	0x2000017c

080076d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b088      	sub	sp, #32
 80076dc:	af02      	add	r7, sp, #8
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f7ff ff5b 	bl	80075ac <SPI_WaitFifoStateUntilTimeout>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d007      	beq.n	800770c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007700:	f043 0220 	orr.w	r2, r3, #32
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007708:	2303      	movs	r3, #3
 800770a:	e046      	b.n	800779a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800770c:	4b25      	ldr	r3, [pc, #148]	@ (80077a4 <SPI_EndRxTxTransaction+0xcc>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a25      	ldr	r2, [pc, #148]	@ (80077a8 <SPI_EndRxTxTransaction+0xd0>)
 8007712:	fba2 2303 	umull	r2, r3, r2, r3
 8007716:	0d5b      	lsrs	r3, r3, #21
 8007718:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800771c:	fb02 f303 	mul.w	r3, r2, r3
 8007720:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800772a:	d112      	bne.n	8007752 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	9300      	str	r3, [sp, #0]
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	2200      	movs	r2, #0
 8007734:	2180      	movs	r1, #128	@ 0x80
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f7ff feb0 	bl	800749c <SPI_WaitFlagStateUntilTimeout>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d016      	beq.n	8007770 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007746:	f043 0220 	orr.w	r2, r3, #32
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800774e:	2303      	movs	r3, #3
 8007750:	e023      	b.n	800779a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00a      	beq.n	800776e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	3b01      	subs	r3, #1
 800775c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007768:	2b80      	cmp	r3, #128	@ 0x80
 800776a:	d0f2      	beq.n	8007752 <SPI_EndRxTxTransaction+0x7a>
 800776c:	e000      	b.n	8007770 <SPI_EndRxTxTransaction+0x98>
        break;
 800776e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	9300      	str	r3, [sp, #0]
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	2200      	movs	r2, #0
 8007778:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	f7ff ff15 	bl	80075ac <SPI_WaitFifoStateUntilTimeout>
 8007782:	4603      	mov	r3, r0
 8007784:	2b00      	cmp	r3, #0
 8007786:	d007      	beq.n	8007798 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800778c:	f043 0220 	orr.w	r2, r3, #32
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	e000      	b.n	800779a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3718      	adds	r7, #24
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	2000017c 	.word	0x2000017c
 80077a8:	165e9f81 	.word	0x165e9f81

080077ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d101      	bne.n	80077be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e049      	b.n	8007852 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d106      	bne.n	80077d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 f841 	bl	800785a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2202      	movs	r2, #2
 80077dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	3304      	adds	r3, #4
 80077e8:	4619      	mov	r1, r3
 80077ea:	4610      	mov	r0, r2
 80077ec:	f000 fc4e 	bl	800808c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3708      	adds	r7, #8
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800785a:	b480      	push	{r7}
 800785c:	b083      	sub	sp, #12
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007862:	bf00      	nop
 8007864:	370c      	adds	r7, #12
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr
	...

08007870 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800787e:	b2db      	uxtb	r3, r3
 8007880:	2b01      	cmp	r3, #1
 8007882:	d001      	beq.n	8007888 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	e054      	b.n	8007932 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2202      	movs	r2, #2
 800788c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68da      	ldr	r2, [r3, #12]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f042 0201 	orr.w	r2, r2, #1
 800789e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a26      	ldr	r2, [pc, #152]	@ (8007940 <HAL_TIM_Base_Start_IT+0xd0>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d022      	beq.n	80078f0 <HAL_TIM_Base_Start_IT+0x80>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078b2:	d01d      	beq.n	80078f0 <HAL_TIM_Base_Start_IT+0x80>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a22      	ldr	r2, [pc, #136]	@ (8007944 <HAL_TIM_Base_Start_IT+0xd4>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d018      	beq.n	80078f0 <HAL_TIM_Base_Start_IT+0x80>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a21      	ldr	r2, [pc, #132]	@ (8007948 <HAL_TIM_Base_Start_IT+0xd8>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d013      	beq.n	80078f0 <HAL_TIM_Base_Start_IT+0x80>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a1f      	ldr	r2, [pc, #124]	@ (800794c <HAL_TIM_Base_Start_IT+0xdc>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d00e      	beq.n	80078f0 <HAL_TIM_Base_Start_IT+0x80>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a1e      	ldr	r2, [pc, #120]	@ (8007950 <HAL_TIM_Base_Start_IT+0xe0>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d009      	beq.n	80078f0 <HAL_TIM_Base_Start_IT+0x80>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a1c      	ldr	r2, [pc, #112]	@ (8007954 <HAL_TIM_Base_Start_IT+0xe4>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d004      	beq.n	80078f0 <HAL_TIM_Base_Start_IT+0x80>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a1b      	ldr	r2, [pc, #108]	@ (8007958 <HAL_TIM_Base_Start_IT+0xe8>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d115      	bne.n	800791c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	689a      	ldr	r2, [r3, #8]
 80078f6:	4b19      	ldr	r3, [pc, #100]	@ (800795c <HAL_TIM_Base_Start_IT+0xec>)
 80078f8:	4013      	ands	r3, r2
 80078fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2b06      	cmp	r3, #6
 8007900:	d015      	beq.n	800792e <HAL_TIM_Base_Start_IT+0xbe>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007908:	d011      	beq.n	800792e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f042 0201 	orr.w	r2, r2, #1
 8007918:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800791a:	e008      	b.n	800792e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f042 0201 	orr.w	r2, r2, #1
 800792a:	601a      	str	r2, [r3, #0]
 800792c:	e000      	b.n	8007930 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800792e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3714      	adds	r7, #20
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	40010000 	.word	0x40010000
 8007944:	40000400 	.word	0x40000400
 8007948:	40000800 	.word	0x40000800
 800794c:	40000c00 	.word	0x40000c00
 8007950:	40010400 	.word	0x40010400
 8007954:	40014000 	.word	0x40014000
 8007958:	40001800 	.word	0x40001800
 800795c:	00010007 	.word	0x00010007

08007960 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d101      	bne.n	8007972 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e049      	b.n	8007a06 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007978:	b2db      	uxtb	r3, r3
 800797a:	2b00      	cmp	r3, #0
 800797c:	d106      	bne.n	800798c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7fc f82c 	bl	80039e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2202      	movs	r2, #2
 8007990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	3304      	adds	r3, #4
 800799c:	4619      	mov	r1, r3
 800799e:	4610      	mov	r0, r2
 80079a0:	f000 fb74 	bl	800808c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3708      	adds	r7, #8
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
	...

08007a10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d109      	bne.n	8007a34 <HAL_TIM_PWM_Start+0x24>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	bf14      	ite	ne
 8007a2c:	2301      	movne	r3, #1
 8007a2e:	2300      	moveq	r3, #0
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	e03c      	b.n	8007aae <HAL_TIM_PWM_Start+0x9e>
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	2b04      	cmp	r3, #4
 8007a38:	d109      	bne.n	8007a4e <HAL_TIM_PWM_Start+0x3e>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	bf14      	ite	ne
 8007a46:	2301      	movne	r3, #1
 8007a48:	2300      	moveq	r3, #0
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	e02f      	b.n	8007aae <HAL_TIM_PWM_Start+0x9e>
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	2b08      	cmp	r3, #8
 8007a52:	d109      	bne.n	8007a68 <HAL_TIM_PWM_Start+0x58>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	bf14      	ite	ne
 8007a60:	2301      	movne	r3, #1
 8007a62:	2300      	moveq	r3, #0
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	e022      	b.n	8007aae <HAL_TIM_PWM_Start+0x9e>
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	2b0c      	cmp	r3, #12
 8007a6c:	d109      	bne.n	8007a82 <HAL_TIM_PWM_Start+0x72>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	bf14      	ite	ne
 8007a7a:	2301      	movne	r3, #1
 8007a7c:	2300      	moveq	r3, #0
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	e015      	b.n	8007aae <HAL_TIM_PWM_Start+0x9e>
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	2b10      	cmp	r3, #16
 8007a86:	d109      	bne.n	8007a9c <HAL_TIM_PWM_Start+0x8c>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	bf14      	ite	ne
 8007a94:	2301      	movne	r3, #1
 8007a96:	2300      	moveq	r3, #0
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	e008      	b.n	8007aae <HAL_TIM_PWM_Start+0x9e>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	bf14      	ite	ne
 8007aa8:	2301      	movne	r3, #1
 8007aaa:	2300      	moveq	r3, #0
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d001      	beq.n	8007ab6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e092      	b.n	8007bdc <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d104      	bne.n	8007ac6 <HAL_TIM_PWM_Start+0xb6>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2202      	movs	r2, #2
 8007ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ac4:	e023      	b.n	8007b0e <HAL_TIM_PWM_Start+0xfe>
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	2b04      	cmp	r3, #4
 8007aca:	d104      	bne.n	8007ad6 <HAL_TIM_PWM_Start+0xc6>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2202      	movs	r2, #2
 8007ad0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ad4:	e01b      	b.n	8007b0e <HAL_TIM_PWM_Start+0xfe>
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	2b08      	cmp	r3, #8
 8007ada:	d104      	bne.n	8007ae6 <HAL_TIM_PWM_Start+0xd6>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2202      	movs	r2, #2
 8007ae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ae4:	e013      	b.n	8007b0e <HAL_TIM_PWM_Start+0xfe>
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	2b0c      	cmp	r3, #12
 8007aea:	d104      	bne.n	8007af6 <HAL_TIM_PWM_Start+0xe6>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2202      	movs	r2, #2
 8007af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007af4:	e00b      	b.n	8007b0e <HAL_TIM_PWM_Start+0xfe>
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	2b10      	cmp	r3, #16
 8007afa:	d104      	bne.n	8007b06 <HAL_TIM_PWM_Start+0xf6>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2202      	movs	r2, #2
 8007b00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b04:	e003      	b.n	8007b0e <HAL_TIM_PWM_Start+0xfe>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2202      	movs	r2, #2
 8007b0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2201      	movs	r2, #1
 8007b14:	6839      	ldr	r1, [r7, #0]
 8007b16:	4618      	mov	r0, r3
 8007b18:	f000 fdc2 	bl	80086a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a30      	ldr	r2, [pc, #192]	@ (8007be4 <HAL_TIM_PWM_Start+0x1d4>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d004      	beq.n	8007b30 <HAL_TIM_PWM_Start+0x120>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a2f      	ldr	r2, [pc, #188]	@ (8007be8 <HAL_TIM_PWM_Start+0x1d8>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d101      	bne.n	8007b34 <HAL_TIM_PWM_Start+0x124>
 8007b30:	2301      	movs	r3, #1
 8007b32:	e000      	b.n	8007b36 <HAL_TIM_PWM_Start+0x126>
 8007b34:	2300      	movs	r3, #0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d007      	beq.n	8007b4a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007b48:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a25      	ldr	r2, [pc, #148]	@ (8007be4 <HAL_TIM_PWM_Start+0x1d4>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d022      	beq.n	8007b9a <HAL_TIM_PWM_Start+0x18a>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b5c:	d01d      	beq.n	8007b9a <HAL_TIM_PWM_Start+0x18a>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a22      	ldr	r2, [pc, #136]	@ (8007bec <HAL_TIM_PWM_Start+0x1dc>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d018      	beq.n	8007b9a <HAL_TIM_PWM_Start+0x18a>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a20      	ldr	r2, [pc, #128]	@ (8007bf0 <HAL_TIM_PWM_Start+0x1e0>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d013      	beq.n	8007b9a <HAL_TIM_PWM_Start+0x18a>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a1f      	ldr	r2, [pc, #124]	@ (8007bf4 <HAL_TIM_PWM_Start+0x1e4>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d00e      	beq.n	8007b9a <HAL_TIM_PWM_Start+0x18a>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a19      	ldr	r2, [pc, #100]	@ (8007be8 <HAL_TIM_PWM_Start+0x1d8>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d009      	beq.n	8007b9a <HAL_TIM_PWM_Start+0x18a>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a1b      	ldr	r2, [pc, #108]	@ (8007bf8 <HAL_TIM_PWM_Start+0x1e8>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d004      	beq.n	8007b9a <HAL_TIM_PWM_Start+0x18a>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a19      	ldr	r2, [pc, #100]	@ (8007bfc <HAL_TIM_PWM_Start+0x1ec>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d115      	bne.n	8007bc6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	689a      	ldr	r2, [r3, #8]
 8007ba0:	4b17      	ldr	r3, [pc, #92]	@ (8007c00 <HAL_TIM_PWM_Start+0x1f0>)
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2b06      	cmp	r3, #6
 8007baa:	d015      	beq.n	8007bd8 <HAL_TIM_PWM_Start+0x1c8>
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bb2:	d011      	beq.n	8007bd8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f042 0201 	orr.w	r2, r2, #1
 8007bc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bc4:	e008      	b.n	8007bd8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f042 0201 	orr.w	r2, r2, #1
 8007bd4:	601a      	str	r2, [r3, #0]
 8007bd6:	e000      	b.n	8007bda <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bd8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3710      	adds	r7, #16
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	40010000 	.word	0x40010000
 8007be8:	40010400 	.word	0x40010400
 8007bec:	40000400 	.word	0x40000400
 8007bf0:	40000800 	.word	0x40000800
 8007bf4:	40000c00 	.word	0x40000c00
 8007bf8:	40014000 	.word	0x40014000
 8007bfc:	40001800 	.word	0x40001800
 8007c00:	00010007 	.word	0x00010007

08007c04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	f003 0302 	and.w	r3, r3, #2
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d020      	beq.n	8007c68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f003 0302 	and.w	r3, r3, #2
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d01b      	beq.n	8007c68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f06f 0202 	mvn.w	r2, #2
 8007c38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	699b      	ldr	r3, [r3, #24]
 8007c46:	f003 0303 	and.w	r3, r3, #3
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d003      	beq.n	8007c56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 f9fe 	bl	8008050 <HAL_TIM_IC_CaptureCallback>
 8007c54:	e005      	b.n	8007c62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f9f0 	bl	800803c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 fa01 	bl	8008064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	f003 0304 	and.w	r3, r3, #4
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d020      	beq.n	8007cb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f003 0304 	and.w	r3, r3, #4
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d01b      	beq.n	8007cb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f06f 0204 	mvn.w	r2, #4
 8007c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2202      	movs	r2, #2
 8007c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d003      	beq.n	8007ca2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f9d8 	bl	8008050 <HAL_TIM_IC_CaptureCallback>
 8007ca0:	e005      	b.n	8007cae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f9ca 	bl	800803c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 f9db 	bl	8008064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	f003 0308 	and.w	r3, r3, #8
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d020      	beq.n	8007d00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f003 0308 	and.w	r3, r3, #8
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d01b      	beq.n	8007d00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f06f 0208 	mvn.w	r2, #8
 8007cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2204      	movs	r2, #4
 8007cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	69db      	ldr	r3, [r3, #28]
 8007cde:	f003 0303 	and.w	r3, r3, #3
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d003      	beq.n	8007cee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 f9b2 	bl	8008050 <HAL_TIM_IC_CaptureCallback>
 8007cec:	e005      	b.n	8007cfa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 f9a4 	bl	800803c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f9b5 	bl	8008064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	f003 0310 	and.w	r3, r3, #16
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d020      	beq.n	8007d4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f003 0310 	and.w	r3, r3, #16
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d01b      	beq.n	8007d4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f06f 0210 	mvn.w	r2, #16
 8007d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2208      	movs	r2, #8
 8007d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	69db      	ldr	r3, [r3, #28]
 8007d2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d003      	beq.n	8007d3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 f98c 	bl	8008050 <HAL_TIM_IC_CaptureCallback>
 8007d38:	e005      	b.n	8007d46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 f97e 	bl	800803c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f98f 	bl	8008064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	f003 0301 	and.w	r3, r3, #1
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00c      	beq.n	8007d70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f003 0301 	and.w	r3, r3, #1
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d007      	beq.n	8007d70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f06f 0201 	mvn.w	r2, #1
 8007d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f7fb f9a8 	bl	80030c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d104      	bne.n	8007d84 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00c      	beq.n	8007d9e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d007      	beq.n	8007d9e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007d96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 fdbd 	bl	8008918 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00c      	beq.n	8007dc2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d007      	beq.n	8007dc2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 fdb5 	bl	800892c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00c      	beq.n	8007de6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d007      	beq.n	8007de6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007dde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 f949 	bl	8008078 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	f003 0320 	and.w	r3, r3, #32
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d00c      	beq.n	8007e0a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f003 0320 	and.w	r3, r3, #32
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d007      	beq.n	8007e0a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f06f 0220 	mvn.w	r2, #32
 8007e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fd7d 	bl	8008904 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e0a:	bf00      	nop
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
	...

08007e14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b086      	sub	sp, #24
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e20:	2300      	movs	r3, #0
 8007e22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d101      	bne.n	8007e32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e2e:	2302      	movs	r3, #2
 8007e30:	e0ff      	b.n	8008032 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2b14      	cmp	r3, #20
 8007e3e:	f200 80f0 	bhi.w	8008022 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007e42:	a201      	add	r2, pc, #4	@ (adr r2, 8007e48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e48:	08007e9d 	.word	0x08007e9d
 8007e4c:	08008023 	.word	0x08008023
 8007e50:	08008023 	.word	0x08008023
 8007e54:	08008023 	.word	0x08008023
 8007e58:	08007edd 	.word	0x08007edd
 8007e5c:	08008023 	.word	0x08008023
 8007e60:	08008023 	.word	0x08008023
 8007e64:	08008023 	.word	0x08008023
 8007e68:	08007f1f 	.word	0x08007f1f
 8007e6c:	08008023 	.word	0x08008023
 8007e70:	08008023 	.word	0x08008023
 8007e74:	08008023 	.word	0x08008023
 8007e78:	08007f5f 	.word	0x08007f5f
 8007e7c:	08008023 	.word	0x08008023
 8007e80:	08008023 	.word	0x08008023
 8007e84:	08008023 	.word	0x08008023
 8007e88:	08007fa1 	.word	0x08007fa1
 8007e8c:	08008023 	.word	0x08008023
 8007e90:	08008023 	.word	0x08008023
 8007e94:	08008023 	.word	0x08008023
 8007e98:	08007fe1 	.word	0x08007fe1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	68b9      	ldr	r1, [r7, #8]
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f000 f99e 	bl	80081e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	699a      	ldr	r2, [r3, #24]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f042 0208 	orr.w	r2, r2, #8
 8007eb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	699a      	ldr	r2, [r3, #24]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f022 0204 	bic.w	r2, r2, #4
 8007ec6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	6999      	ldr	r1, [r3, #24]
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	691a      	ldr	r2, [r3, #16]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	430a      	orrs	r2, r1
 8007ed8:	619a      	str	r2, [r3, #24]
      break;
 8007eda:	e0a5      	b.n	8008028 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68b9      	ldr	r1, [r7, #8]
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f000 f9f0 	bl	80082c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	699a      	ldr	r2, [r3, #24]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ef6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	699a      	ldr	r2, [r3, #24]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	6999      	ldr	r1, [r3, #24]
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	021a      	lsls	r2, r3, #8
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	430a      	orrs	r2, r1
 8007f1a:	619a      	str	r2, [r3, #24]
      break;
 8007f1c:	e084      	b.n	8008028 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	68b9      	ldr	r1, [r7, #8]
 8007f24:	4618      	mov	r0, r3
 8007f26:	f000 fa47 	bl	80083b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	69da      	ldr	r2, [r3, #28]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f042 0208 	orr.w	r2, r2, #8
 8007f38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	69da      	ldr	r2, [r3, #28]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f022 0204 	bic.w	r2, r2, #4
 8007f48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	69d9      	ldr	r1, [r3, #28]
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	691a      	ldr	r2, [r3, #16]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	430a      	orrs	r2, r1
 8007f5a:	61da      	str	r2, [r3, #28]
      break;
 8007f5c:	e064      	b.n	8008028 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	68b9      	ldr	r1, [r7, #8]
 8007f64:	4618      	mov	r0, r3
 8007f66:	f000 fa9d 	bl	80084a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	69da      	ldr	r2, [r3, #28]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	69da      	ldr	r2, [r3, #28]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	69d9      	ldr	r1, [r3, #28]
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	691b      	ldr	r3, [r3, #16]
 8007f94:	021a      	lsls	r2, r3, #8
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	430a      	orrs	r2, r1
 8007f9c:	61da      	str	r2, [r3, #28]
      break;
 8007f9e:	e043      	b.n	8008028 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	68b9      	ldr	r1, [r7, #8]
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f000 fad4 	bl	8008554 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f042 0208 	orr.w	r2, r2, #8
 8007fba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f022 0204 	bic.w	r2, r2, #4
 8007fca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	691a      	ldr	r2, [r3, #16]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	430a      	orrs	r2, r1
 8007fdc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007fde:	e023      	b.n	8008028 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	68b9      	ldr	r1, [r7, #8]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 fb06 	bl	80085f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ffa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800800a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	021a      	lsls	r2, r3, #8
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	430a      	orrs	r2, r1
 800801e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008020:	e002      	b.n	8008028 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	75fb      	strb	r3, [r7, #23]
      break;
 8008026:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008030:	7dfb      	ldrb	r3, [r7, #23]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3718      	adds	r7, #24
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop

0800803c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008044:	bf00      	nop
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008058:	bf00      	nop
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a46      	ldr	r2, [pc, #280]	@ (80081b8 <TIM_Base_SetConfig+0x12c>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d013      	beq.n	80080cc <TIM_Base_SetConfig+0x40>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080aa:	d00f      	beq.n	80080cc <TIM_Base_SetConfig+0x40>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a43      	ldr	r2, [pc, #268]	@ (80081bc <TIM_Base_SetConfig+0x130>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d00b      	beq.n	80080cc <TIM_Base_SetConfig+0x40>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a42      	ldr	r2, [pc, #264]	@ (80081c0 <TIM_Base_SetConfig+0x134>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d007      	beq.n	80080cc <TIM_Base_SetConfig+0x40>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4a41      	ldr	r2, [pc, #260]	@ (80081c4 <TIM_Base_SetConfig+0x138>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d003      	beq.n	80080cc <TIM_Base_SetConfig+0x40>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4a40      	ldr	r2, [pc, #256]	@ (80081c8 <TIM_Base_SetConfig+0x13c>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d108      	bne.n	80080de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	4313      	orrs	r3, r2
 80080dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a35      	ldr	r2, [pc, #212]	@ (80081b8 <TIM_Base_SetConfig+0x12c>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d02b      	beq.n	800813e <TIM_Base_SetConfig+0xb2>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080ec:	d027      	beq.n	800813e <TIM_Base_SetConfig+0xb2>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a32      	ldr	r2, [pc, #200]	@ (80081bc <TIM_Base_SetConfig+0x130>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d023      	beq.n	800813e <TIM_Base_SetConfig+0xb2>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a31      	ldr	r2, [pc, #196]	@ (80081c0 <TIM_Base_SetConfig+0x134>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d01f      	beq.n	800813e <TIM_Base_SetConfig+0xb2>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4a30      	ldr	r2, [pc, #192]	@ (80081c4 <TIM_Base_SetConfig+0x138>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d01b      	beq.n	800813e <TIM_Base_SetConfig+0xb2>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a2f      	ldr	r2, [pc, #188]	@ (80081c8 <TIM_Base_SetConfig+0x13c>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d017      	beq.n	800813e <TIM_Base_SetConfig+0xb2>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a2e      	ldr	r2, [pc, #184]	@ (80081cc <TIM_Base_SetConfig+0x140>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d013      	beq.n	800813e <TIM_Base_SetConfig+0xb2>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a2d      	ldr	r2, [pc, #180]	@ (80081d0 <TIM_Base_SetConfig+0x144>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d00f      	beq.n	800813e <TIM_Base_SetConfig+0xb2>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a2c      	ldr	r2, [pc, #176]	@ (80081d4 <TIM_Base_SetConfig+0x148>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d00b      	beq.n	800813e <TIM_Base_SetConfig+0xb2>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a2b      	ldr	r2, [pc, #172]	@ (80081d8 <TIM_Base_SetConfig+0x14c>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d007      	beq.n	800813e <TIM_Base_SetConfig+0xb2>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a2a      	ldr	r2, [pc, #168]	@ (80081dc <TIM_Base_SetConfig+0x150>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d003      	beq.n	800813e <TIM_Base_SetConfig+0xb2>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4a29      	ldr	r2, [pc, #164]	@ (80081e0 <TIM_Base_SetConfig+0x154>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d108      	bne.n	8008150 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008144:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	4313      	orrs	r3, r2
 800814e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	695b      	ldr	r3, [r3, #20]
 800815a:	4313      	orrs	r3, r2
 800815c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	689a      	ldr	r2, [r3, #8]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4a10      	ldr	r2, [pc, #64]	@ (80081b8 <TIM_Base_SetConfig+0x12c>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d003      	beq.n	8008184 <TIM_Base_SetConfig+0xf8>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a12      	ldr	r2, [pc, #72]	@ (80081c8 <TIM_Base_SetConfig+0x13c>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d103      	bne.n	800818c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	691a      	ldr	r2, [r3, #16]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	f003 0301 	and.w	r3, r3, #1
 800819a:	2b01      	cmp	r3, #1
 800819c:	d105      	bne.n	80081aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	f023 0201 	bic.w	r2, r3, #1
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	611a      	str	r2, [r3, #16]
  }
}
 80081aa:	bf00      	nop
 80081ac:	3714      	adds	r7, #20
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr
 80081b6:	bf00      	nop
 80081b8:	40010000 	.word	0x40010000
 80081bc:	40000400 	.word	0x40000400
 80081c0:	40000800 	.word	0x40000800
 80081c4:	40000c00 	.word	0x40000c00
 80081c8:	40010400 	.word	0x40010400
 80081cc:	40014000 	.word	0x40014000
 80081d0:	40014400 	.word	0x40014400
 80081d4:	40014800 	.word	0x40014800
 80081d8:	40001800 	.word	0x40001800
 80081dc:	40001c00 	.word	0x40001c00
 80081e0:	40002000 	.word	0x40002000

080081e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b087      	sub	sp, #28
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a1b      	ldr	r3, [r3, #32]
 80081f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6a1b      	ldr	r3, [r3, #32]
 80081f8:	f023 0201 	bic.w	r2, r3, #1
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	699b      	ldr	r3, [r3, #24]
 800820a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	4b2b      	ldr	r3, [pc, #172]	@ (80082bc <TIM_OC1_SetConfig+0xd8>)
 8008210:	4013      	ands	r3, r2
 8008212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f023 0303 	bic.w	r3, r3, #3
 800821a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	68fa      	ldr	r2, [r7, #12]
 8008222:	4313      	orrs	r3, r2
 8008224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	f023 0302 	bic.w	r3, r3, #2
 800822c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	4313      	orrs	r3, r2
 8008236:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a21      	ldr	r2, [pc, #132]	@ (80082c0 <TIM_OC1_SetConfig+0xdc>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d003      	beq.n	8008248 <TIM_OC1_SetConfig+0x64>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a20      	ldr	r2, [pc, #128]	@ (80082c4 <TIM_OC1_SetConfig+0xe0>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d10c      	bne.n	8008262 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	f023 0308 	bic.w	r3, r3, #8
 800824e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	697a      	ldr	r2, [r7, #20]
 8008256:	4313      	orrs	r3, r2
 8008258:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	f023 0304 	bic.w	r3, r3, #4
 8008260:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a16      	ldr	r2, [pc, #88]	@ (80082c0 <TIM_OC1_SetConfig+0xdc>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d003      	beq.n	8008272 <TIM_OC1_SetConfig+0x8e>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a15      	ldr	r2, [pc, #84]	@ (80082c4 <TIM_OC1_SetConfig+0xe0>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d111      	bne.n	8008296 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008280:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	695b      	ldr	r3, [r3, #20]
 8008286:	693a      	ldr	r2, [r7, #16]
 8008288:	4313      	orrs	r3, r2
 800828a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	699b      	ldr	r3, [r3, #24]
 8008290:	693a      	ldr	r2, [r7, #16]
 8008292:	4313      	orrs	r3, r2
 8008294:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	693a      	ldr	r2, [r7, #16]
 800829a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	685a      	ldr	r2, [r3, #4]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	697a      	ldr	r2, [r7, #20]
 80082ae:	621a      	str	r2, [r3, #32]
}
 80082b0:	bf00      	nop
 80082b2:	371c      	adds	r7, #28
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr
 80082bc:	fffeff8f 	.word	0xfffeff8f
 80082c0:	40010000 	.word	0x40010000
 80082c4:	40010400 	.word	0x40010400

080082c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b087      	sub	sp, #28
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a1b      	ldr	r3, [r3, #32]
 80082d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6a1b      	ldr	r3, [r3, #32]
 80082dc:	f023 0210 	bic.w	r2, r3, #16
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	699b      	ldr	r3, [r3, #24]
 80082ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	4b2e      	ldr	r3, [pc, #184]	@ (80083ac <TIM_OC2_SetConfig+0xe4>)
 80082f4:	4013      	ands	r3, r2
 80082f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	021b      	lsls	r3, r3, #8
 8008306:	68fa      	ldr	r2, [r7, #12]
 8008308:	4313      	orrs	r3, r2
 800830a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	f023 0320 	bic.w	r3, r3, #32
 8008312:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	011b      	lsls	r3, r3, #4
 800831a:	697a      	ldr	r2, [r7, #20]
 800831c:	4313      	orrs	r3, r2
 800831e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	4a23      	ldr	r2, [pc, #140]	@ (80083b0 <TIM_OC2_SetConfig+0xe8>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d003      	beq.n	8008330 <TIM_OC2_SetConfig+0x68>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4a22      	ldr	r2, [pc, #136]	@ (80083b4 <TIM_OC2_SetConfig+0xec>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d10d      	bne.n	800834c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008336:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	011b      	lsls	r3, r3, #4
 800833e:	697a      	ldr	r2, [r7, #20]
 8008340:	4313      	orrs	r3, r2
 8008342:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800834a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a18      	ldr	r2, [pc, #96]	@ (80083b0 <TIM_OC2_SetConfig+0xe8>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d003      	beq.n	800835c <TIM_OC2_SetConfig+0x94>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4a17      	ldr	r2, [pc, #92]	@ (80083b4 <TIM_OC2_SetConfig+0xec>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d113      	bne.n	8008384 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008362:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800836a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	695b      	ldr	r3, [r3, #20]
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	693a      	ldr	r2, [r7, #16]
 8008374:	4313      	orrs	r3, r2
 8008376:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	699b      	ldr	r3, [r3, #24]
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	693a      	ldr	r2, [r7, #16]
 8008380:	4313      	orrs	r3, r2
 8008382:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	693a      	ldr	r2, [r7, #16]
 8008388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	685a      	ldr	r2, [r3, #4]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	697a      	ldr	r2, [r7, #20]
 800839c:	621a      	str	r2, [r3, #32]
}
 800839e:	bf00      	nop
 80083a0:	371c      	adds	r7, #28
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	feff8fff 	.word	0xfeff8fff
 80083b0:	40010000 	.word	0x40010000
 80083b4:	40010400 	.word	0x40010400

080083b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b087      	sub	sp, #28
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a1b      	ldr	r3, [r3, #32]
 80083c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6a1b      	ldr	r3, [r3, #32]
 80083cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	69db      	ldr	r3, [r3, #28]
 80083de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	4b2d      	ldr	r3, [pc, #180]	@ (8008498 <TIM_OC3_SetConfig+0xe0>)
 80083e4:	4013      	ands	r3, r2
 80083e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f023 0303 	bic.w	r3, r3, #3
 80083ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	68fa      	ldr	r2, [r7, #12]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008400:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	021b      	lsls	r3, r3, #8
 8008408:	697a      	ldr	r2, [r7, #20]
 800840a:	4313      	orrs	r3, r2
 800840c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a22      	ldr	r2, [pc, #136]	@ (800849c <TIM_OC3_SetConfig+0xe4>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d003      	beq.n	800841e <TIM_OC3_SetConfig+0x66>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a21      	ldr	r2, [pc, #132]	@ (80084a0 <TIM_OC3_SetConfig+0xe8>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d10d      	bne.n	800843a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008424:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	021b      	lsls	r3, r3, #8
 800842c:	697a      	ldr	r2, [r7, #20]
 800842e:	4313      	orrs	r3, r2
 8008430:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008438:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a17      	ldr	r2, [pc, #92]	@ (800849c <TIM_OC3_SetConfig+0xe4>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d003      	beq.n	800844a <TIM_OC3_SetConfig+0x92>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4a16      	ldr	r2, [pc, #88]	@ (80084a0 <TIM_OC3_SetConfig+0xe8>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d113      	bne.n	8008472 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008450:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008458:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	695b      	ldr	r3, [r3, #20]
 800845e:	011b      	lsls	r3, r3, #4
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	4313      	orrs	r3, r2
 8008464:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	699b      	ldr	r3, [r3, #24]
 800846a:	011b      	lsls	r3, r3, #4
 800846c:	693a      	ldr	r2, [r7, #16]
 800846e:	4313      	orrs	r3, r2
 8008470:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	693a      	ldr	r2, [r7, #16]
 8008476:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	68fa      	ldr	r2, [r7, #12]
 800847c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	685a      	ldr	r2, [r3, #4]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	697a      	ldr	r2, [r7, #20]
 800848a:	621a      	str	r2, [r3, #32]
}
 800848c:	bf00      	nop
 800848e:	371c      	adds	r7, #28
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr
 8008498:	fffeff8f 	.word	0xfffeff8f
 800849c:	40010000 	.word	0x40010000
 80084a0:	40010400 	.word	0x40010400

080084a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b087      	sub	sp, #28
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a1b      	ldr	r3, [r3, #32]
 80084b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6a1b      	ldr	r3, [r3, #32]
 80084b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	69db      	ldr	r3, [r3, #28]
 80084ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	4b1e      	ldr	r3, [pc, #120]	@ (8008548 <TIM_OC4_SetConfig+0xa4>)
 80084d0:	4013      	ands	r3, r2
 80084d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	021b      	lsls	r3, r3, #8
 80084e2:	68fa      	ldr	r2, [r7, #12]
 80084e4:	4313      	orrs	r3, r2
 80084e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80084ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	031b      	lsls	r3, r3, #12
 80084f6:	693a      	ldr	r2, [r7, #16]
 80084f8:	4313      	orrs	r3, r2
 80084fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4a13      	ldr	r2, [pc, #76]	@ (800854c <TIM_OC4_SetConfig+0xa8>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d003      	beq.n	800850c <TIM_OC4_SetConfig+0x68>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	4a12      	ldr	r2, [pc, #72]	@ (8008550 <TIM_OC4_SetConfig+0xac>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d109      	bne.n	8008520 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008512:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	695b      	ldr	r3, [r3, #20]
 8008518:	019b      	lsls	r3, r3, #6
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	4313      	orrs	r3, r2
 800851e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	697a      	ldr	r2, [r7, #20]
 8008524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	685a      	ldr	r2, [r3, #4]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	693a      	ldr	r2, [r7, #16]
 8008538:	621a      	str	r2, [r3, #32]
}
 800853a:	bf00      	nop
 800853c:	371c      	adds	r7, #28
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr
 8008546:	bf00      	nop
 8008548:	feff8fff 	.word	0xfeff8fff
 800854c:	40010000 	.word	0x40010000
 8008550:	40010400 	.word	0x40010400

08008554 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008554:	b480      	push	{r7}
 8008556:	b087      	sub	sp, #28
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a1b      	ldr	r3, [r3, #32]
 8008562:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6a1b      	ldr	r3, [r3, #32]
 8008568:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800857a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	4b1b      	ldr	r3, [pc, #108]	@ (80085ec <TIM_OC5_SetConfig+0x98>)
 8008580:	4013      	ands	r3, r2
 8008582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	4313      	orrs	r3, r2
 800858c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008594:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	041b      	lsls	r3, r3, #16
 800859c:	693a      	ldr	r2, [r7, #16]
 800859e:	4313      	orrs	r3, r2
 80085a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a12      	ldr	r2, [pc, #72]	@ (80085f0 <TIM_OC5_SetConfig+0x9c>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d003      	beq.n	80085b2 <TIM_OC5_SetConfig+0x5e>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4a11      	ldr	r2, [pc, #68]	@ (80085f4 <TIM_OC5_SetConfig+0xa0>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d109      	bne.n	80085c6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80085b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	695b      	ldr	r3, [r3, #20]
 80085be:	021b      	lsls	r3, r3, #8
 80085c0:	697a      	ldr	r2, [r7, #20]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	697a      	ldr	r2, [r7, #20]
 80085ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	685a      	ldr	r2, [r3, #4]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	693a      	ldr	r2, [r7, #16]
 80085de:	621a      	str	r2, [r3, #32]
}
 80085e0:	bf00      	nop
 80085e2:	371c      	adds	r7, #28
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr
 80085ec:	fffeff8f 	.word	0xfffeff8f
 80085f0:	40010000 	.word	0x40010000
 80085f4:	40010400 	.word	0x40010400

080085f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b087      	sub	sp, #28
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a1b      	ldr	r3, [r3, #32]
 8008606:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a1b      	ldr	r3, [r3, #32]
 800860c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800861e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	4b1c      	ldr	r3, [pc, #112]	@ (8008694 <TIM_OC6_SetConfig+0x9c>)
 8008624:	4013      	ands	r3, r2
 8008626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	021b      	lsls	r3, r3, #8
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	4313      	orrs	r3, r2
 8008632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800863a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	051b      	lsls	r3, r3, #20
 8008642:	693a      	ldr	r2, [r7, #16]
 8008644:	4313      	orrs	r3, r2
 8008646:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a13      	ldr	r2, [pc, #76]	@ (8008698 <TIM_OC6_SetConfig+0xa0>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d003      	beq.n	8008658 <TIM_OC6_SetConfig+0x60>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a12      	ldr	r2, [pc, #72]	@ (800869c <TIM_OC6_SetConfig+0xa4>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d109      	bne.n	800866c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800865e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	695b      	ldr	r3, [r3, #20]
 8008664:	029b      	lsls	r3, r3, #10
 8008666:	697a      	ldr	r2, [r7, #20]
 8008668:	4313      	orrs	r3, r2
 800866a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	697a      	ldr	r2, [r7, #20]
 8008670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	685a      	ldr	r2, [r3, #4]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	693a      	ldr	r2, [r7, #16]
 8008684:	621a      	str	r2, [r3, #32]
}
 8008686:	bf00      	nop
 8008688:	371c      	adds	r7, #28
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr
 8008692:	bf00      	nop
 8008694:	feff8fff 	.word	0xfeff8fff
 8008698:	40010000 	.word	0x40010000
 800869c:	40010400 	.word	0x40010400

080086a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b087      	sub	sp, #28
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	f003 031f 	and.w	r3, r3, #31
 80086b2:	2201      	movs	r2, #1
 80086b4:	fa02 f303 	lsl.w	r3, r2, r3
 80086b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6a1a      	ldr	r2, [r3, #32]
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	43db      	mvns	r3, r3
 80086c2:	401a      	ands	r2, r3
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6a1a      	ldr	r2, [r3, #32]
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	f003 031f 	and.w	r3, r3, #31
 80086d2:	6879      	ldr	r1, [r7, #4]
 80086d4:	fa01 f303 	lsl.w	r3, r1, r3
 80086d8:	431a      	orrs	r2, r3
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	621a      	str	r2, [r3, #32]
}
 80086de:	bf00      	nop
 80086e0:	371c      	adds	r7, #28
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
	...

080086ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b085      	sub	sp, #20
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d101      	bne.n	8008704 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008700:	2302      	movs	r3, #2
 8008702:	e06d      	b.n	80087e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2202      	movs	r2, #2
 8008710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a30      	ldr	r2, [pc, #192]	@ (80087ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d004      	beq.n	8008738 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a2f      	ldr	r2, [pc, #188]	@ (80087f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d108      	bne.n	800874a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800873e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	4313      	orrs	r3, r2
 8008748:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008750:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	4313      	orrs	r3, r2
 800875a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	68fa      	ldr	r2, [r7, #12]
 8008762:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a20      	ldr	r2, [pc, #128]	@ (80087ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d022      	beq.n	80087b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008776:	d01d      	beq.n	80087b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a1d      	ldr	r2, [pc, #116]	@ (80087f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d018      	beq.n	80087b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a1c      	ldr	r2, [pc, #112]	@ (80087f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d013      	beq.n	80087b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a1a      	ldr	r2, [pc, #104]	@ (80087fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d00e      	beq.n	80087b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a15      	ldr	r2, [pc, #84]	@ (80087f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d009      	beq.n	80087b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a16      	ldr	r2, [pc, #88]	@ (8008800 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d004      	beq.n	80087b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a15      	ldr	r2, [pc, #84]	@ (8008804 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d10c      	bne.n	80087ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80087ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	68ba      	ldr	r2, [r7, #8]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	68ba      	ldr	r2, [r7, #8]
 80087cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2201      	movs	r2, #1
 80087d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3714      	adds	r7, #20
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr
 80087ec:	40010000 	.word	0x40010000
 80087f0:	40010400 	.word	0x40010400
 80087f4:	40000400 	.word	0x40000400
 80087f8:	40000800 	.word	0x40000800
 80087fc:	40000c00 	.word	0x40000c00
 8008800:	40014000 	.word	0x40014000
 8008804:	40001800 	.word	0x40001800

08008808 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008808:	b480      	push	{r7}
 800880a:	b085      	sub	sp, #20
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008812:	2300      	movs	r3, #0
 8008814:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800881c:	2b01      	cmp	r3, #1
 800881e:	d101      	bne.n	8008824 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008820:	2302      	movs	r3, #2
 8008822:	e065      	b.n	80088f0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2201      	movs	r2, #1
 8008828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	4313      	orrs	r3, r2
 8008838:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	4313      	orrs	r3, r2
 8008846:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	4313      	orrs	r3, r2
 8008854:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4313      	orrs	r3, r2
 8008862:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	691b      	ldr	r3, [r3, #16]
 800886e:	4313      	orrs	r3, r2
 8008870:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	695b      	ldr	r3, [r3, #20]
 800887c:	4313      	orrs	r3, r2
 800887e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800888a:	4313      	orrs	r3, r2
 800888c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	699b      	ldr	r3, [r3, #24]
 8008898:	041b      	lsls	r3, r3, #16
 800889a:	4313      	orrs	r3, r2
 800889c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a16      	ldr	r2, [pc, #88]	@ (80088fc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d004      	beq.n	80088b2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a14      	ldr	r2, [pc, #80]	@ (8008900 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d115      	bne.n	80088de <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088bc:	051b      	lsls	r3, r3, #20
 80088be:	4313      	orrs	r3, r2
 80088c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	69db      	ldr	r3, [r3, #28]
 80088cc:	4313      	orrs	r3, r2
 80088ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	6a1b      	ldr	r3, [r3, #32]
 80088da:	4313      	orrs	r3, r2
 80088dc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	68fa      	ldr	r2, [r7, #12]
 80088e4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3714      	adds	r7, #20
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr
 80088fc:	40010000 	.word	0x40010000
 8008900:	40010400 	.word	0x40010400

08008904 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800890c:	bf00      	nop
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008920:	bf00      	nop
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008934:	bf00      	nop
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d101      	bne.n	8008952 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	e040      	b.n	80089d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008956:	2b00      	cmp	r3, #0
 8008958:	d106      	bne.n	8008968 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7fb f994 	bl	8003c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2224      	movs	r2, #36	@ 0x24
 800896c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f022 0201 	bic.w	r2, r2, #1
 800897c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008982:	2b00      	cmp	r3, #0
 8008984:	d002      	beq.n	800898c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 feca 	bl	8009720 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 fc63 	bl	8009258 <UART_SetConfig>
 8008992:	4603      	mov	r3, r0
 8008994:	2b01      	cmp	r3, #1
 8008996:	d101      	bne.n	800899c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	e01b      	b.n	80089d4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	685a      	ldr	r2, [r3, #4]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80089aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	689a      	ldr	r2, [r3, #8]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80089ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f042 0201 	orr.w	r2, r2, #1
 80089ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 ff49 	bl	8009864 <UART_CheckIdleState>
 80089d2:	4603      	mov	r3, r0
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3708      	adds	r7, #8
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b08a      	sub	sp, #40	@ 0x28
 80089e0:	af02      	add	r7, sp, #8
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	60b9      	str	r1, [r7, #8]
 80089e6:	603b      	str	r3, [r7, #0]
 80089e8:	4613      	mov	r3, r2
 80089ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80089f0:	2b20      	cmp	r3, #32
 80089f2:	d177      	bne.n	8008ae4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d002      	beq.n	8008a00 <HAL_UART_Transmit+0x24>
 80089fa:	88fb      	ldrh	r3, [r7, #6]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d101      	bne.n	8008a04 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	e070      	b.n	8008ae6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2221      	movs	r2, #33	@ 0x21
 8008a10:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a12:	f7fb fdbf 	bl	8004594 <HAL_GetTick>
 8008a16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	88fa      	ldrh	r2, [r7, #6]
 8008a1c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	88fa      	ldrh	r2, [r7, #6]
 8008a24:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a30:	d108      	bne.n	8008a44 <HAL_UART_Transmit+0x68>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	691b      	ldr	r3, [r3, #16]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d104      	bne.n	8008a44 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	61bb      	str	r3, [r7, #24]
 8008a42:	e003      	b.n	8008a4c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008a4c:	e02f      	b.n	8008aae <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	2200      	movs	r2, #0
 8008a56:	2180      	movs	r1, #128	@ 0x80
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f000 ffab 	bl	80099b4 <UART_WaitOnFlagUntilTimeout>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d004      	beq.n	8008a6e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2220      	movs	r2, #32
 8008a68:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8008a6a:	2303      	movs	r3, #3
 8008a6c:	e03b      	b.n	8008ae6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d10b      	bne.n	8008a8c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	881b      	ldrh	r3, [r3, #0]
 8008a78:	461a      	mov	r2, r3
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a82:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	3302      	adds	r3, #2
 8008a88:	61bb      	str	r3, [r7, #24]
 8008a8a:	e007      	b.n	8008a9c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	781a      	ldrb	r2, [r3, #0]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	3b01      	subs	r3, #1
 8008aa6:	b29a      	uxth	r2, r3
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1c9      	bne.n	8008a4e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	9300      	str	r3, [sp, #0]
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	2140      	movs	r1, #64	@ 0x40
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	f000 ff75 	bl	80099b4 <UART_WaitOnFlagUntilTimeout>
 8008aca:	4603      	mov	r3, r0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d004      	beq.n	8008ada <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2220      	movs	r2, #32
 8008ad4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	e005      	b.n	8008ae6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2220      	movs	r2, #32
 8008ade:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	e000      	b.n	8008ae6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008ae4:	2302      	movs	r3, #2
  }
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3720      	adds	r7, #32
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
	...

08008af0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b08b      	sub	sp, #44	@ 0x2c
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	4613      	mov	r3, r2
 8008afc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b02:	2b20      	cmp	r3, #32
 8008b04:	d147      	bne.n	8008b96 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d002      	beq.n	8008b12 <HAL_UART_Transmit_IT+0x22>
 8008b0c:	88fb      	ldrh	r3, [r7, #6]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d101      	bne.n	8008b16 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e040      	b.n	8008b98 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	68ba      	ldr	r2, [r7, #8]
 8008b1a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	88fa      	ldrh	r2, [r7, #6]
 8008b20:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	88fa      	ldrh	r2, [r7, #6]
 8008b28:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2200      	movs	r2, #0
 8008b36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2221      	movs	r2, #33	@ 0x21
 8008b3e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b48:	d107      	bne.n	8008b5a <HAL_UART_Transmit_IT+0x6a>
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d103      	bne.n	8008b5a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	4a13      	ldr	r2, [pc, #76]	@ (8008ba4 <HAL_UART_Transmit_IT+0xb4>)
 8008b56:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008b58:	e002      	b.n	8008b60 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	4a12      	ldr	r2, [pc, #72]	@ (8008ba8 <HAL_UART_Transmit_IT+0xb8>)
 8008b5e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	e853 3f00 	ldrex	r3, [r3]
 8008b6c:	613b      	str	r3, [r7, #16]
   return(result);
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b74:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b7e:	623b      	str	r3, [r7, #32]
 8008b80:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b82:	69f9      	ldr	r1, [r7, #28]
 8008b84:	6a3a      	ldr	r2, [r7, #32]
 8008b86:	e841 2300 	strex	r3, r2, [r1]
 8008b8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d1e6      	bne.n	8008b60 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8008b92:	2300      	movs	r3, #0
 8008b94:	e000      	b.n	8008b98 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8008b96:	2302      	movs	r3, #2
  }
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	372c      	adds	r7, #44	@ 0x2c
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr
 8008ba4:	08009dc7 	.word	0x08009dc7
 8008ba8:	08009d11 	.word	0x08009d11

08008bac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b08a      	sub	sp, #40	@ 0x28
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	4613      	mov	r3, r2
 8008bb8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bc0:	2b20      	cmp	r3, #32
 8008bc2:	d132      	bne.n	8008c2a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d002      	beq.n	8008bd0 <HAL_UART_Receive_IT+0x24>
 8008bca:	88fb      	ldrh	r3, [r7, #6]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d101      	bne.n	8008bd4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e02b      	b.n	8008c2c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d018      	beq.n	8008c1a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	e853 3f00 	ldrex	r3, [r3]
 8008bf4:	613b      	str	r3, [r7, #16]
   return(result);
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008bfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	461a      	mov	r2, r3
 8008c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c06:	623b      	str	r3, [r7, #32]
 8008c08:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0a:	69f9      	ldr	r1, [r7, #28]
 8008c0c:	6a3a      	ldr	r2, [r7, #32]
 8008c0e:	e841 2300 	strex	r3, r2, [r1]
 8008c12:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c14:	69bb      	ldr	r3, [r7, #24]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d1e6      	bne.n	8008be8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008c1a:	88fb      	ldrh	r3, [r7, #6]
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	68b9      	ldr	r1, [r7, #8]
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	f000 ff35 	bl	8009a90 <UART_Start_Receive_IT>
 8008c26:	4603      	mov	r3, r0
 8008c28:	e000      	b.n	8008c2c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8008c2a:	2302      	movs	r3, #2
  }
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3728      	adds	r7, #40	@ 0x28
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b0ba      	sub	sp, #232	@ 0xe8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	69db      	ldr	r3, [r3, #28]
 8008c42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008c5a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008c5e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008c62:	4013      	ands	r3, r2
 8008c64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008c68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d115      	bne.n	8008c9c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c74:	f003 0320 	and.w	r3, r3, #32
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00f      	beq.n	8008c9c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c80:	f003 0320 	and.w	r3, r3, #32
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d009      	beq.n	8008c9c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f000 82ac 	beq.w	80091ea <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	4798      	blx	r3
      }
      return;
 8008c9a:	e2a6      	b.n	80091ea <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008c9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	f000 8117 	beq.w	8008ed4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008caa:	f003 0301 	and.w	r3, r3, #1
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d106      	bne.n	8008cc0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008cb2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008cb6:	4b85      	ldr	r3, [pc, #532]	@ (8008ecc <HAL_UART_IRQHandler+0x298>)
 8008cb8:	4013      	ands	r3, r2
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	f000 810a 	beq.w	8008ed4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cc4:	f003 0301 	and.w	r3, r3, #1
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d011      	beq.n	8008cf0 <HAL_UART_IRQHandler+0xbc>
 8008ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d00b      	beq.n	8008cf0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2201      	movs	r2, #1
 8008cde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ce6:	f043 0201 	orr.w	r2, r3, #1
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cf4:	f003 0302 	and.w	r3, r3, #2
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d011      	beq.n	8008d20 <HAL_UART_IRQHandler+0xec>
 8008cfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d00:	f003 0301 	and.w	r3, r3, #1
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d00b      	beq.n	8008d20 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	2202      	movs	r2, #2
 8008d0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d16:	f043 0204 	orr.w	r2, r3, #4
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d24:	f003 0304 	and.w	r3, r3, #4
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d011      	beq.n	8008d50 <HAL_UART_IRQHandler+0x11c>
 8008d2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d30:	f003 0301 	and.w	r3, r3, #1
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00b      	beq.n	8008d50 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2204      	movs	r2, #4
 8008d3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d46:	f043 0202 	orr.w	r2, r3, #2
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d54:	f003 0308 	and.w	r3, r3, #8
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d017      	beq.n	8008d8c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d60:	f003 0320 	and.w	r3, r3, #32
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d105      	bne.n	8008d74 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008d68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d6c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00b      	beq.n	8008d8c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2208      	movs	r2, #8
 8008d7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d82:	f043 0208 	orr.w	r2, r3, #8
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d012      	beq.n	8008dbe <HAL_UART_IRQHandler+0x18a>
 8008d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d9c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d00c      	beq.n	8008dbe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008dac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008db4:	f043 0220 	orr.w	r2, r3, #32
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f000 8212 	beq.w	80091ee <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dce:	f003 0320 	and.w	r3, r3, #32
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00d      	beq.n	8008df2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dda:	f003 0320 	and.w	r3, r3, #32
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d007      	beq.n	8008df2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d003      	beq.n	8008df2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008df8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e06:	2b40      	cmp	r3, #64	@ 0x40
 8008e08:	d005      	beq.n	8008e16 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008e0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008e0e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d04f      	beq.n	8008eb6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 ff00 	bl	8009c1c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e26:	2b40      	cmp	r3, #64	@ 0x40
 8008e28:	d141      	bne.n	8008eae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	3308      	adds	r3, #8
 8008e30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008e38:	e853 3f00 	ldrex	r3, [r3]
 8008e3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008e40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008e44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	3308      	adds	r3, #8
 8008e52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008e56:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008e5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008e62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008e66:	e841 2300 	strex	r3, r2, [r1]
 8008e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008e6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d1d9      	bne.n	8008e2a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d013      	beq.n	8008ea6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e82:	4a13      	ldr	r2, [pc, #76]	@ (8008ed0 <HAL_UART_IRQHandler+0x29c>)
 8008e84:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7fb fd04 	bl	8004898 <HAL_DMA_Abort_IT>
 8008e90:	4603      	mov	r3, r0
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d017      	beq.n	8008ec6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008ea0:	4610      	mov	r0, r2
 8008ea2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ea4:	e00f      	b.n	8008ec6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 f9b6 	bl	8009218 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008eac:	e00b      	b.n	8008ec6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 f9b2 	bl	8009218 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008eb4:	e007      	b.n	8008ec6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 f9ae 	bl	8009218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8008ec4:	e193      	b.n	80091ee <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ec6:	bf00      	nop
    return;
 8008ec8:	e191      	b.n	80091ee <HAL_UART_IRQHandler+0x5ba>
 8008eca:	bf00      	nop
 8008ecc:	04000120 	.word	0x04000120
 8008ed0:	08009ce5 	.word	0x08009ce5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	f040 814c 	bne.w	8009176 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ee2:	f003 0310 	and.w	r3, r3, #16
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	f000 8145 	beq.w	8009176 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ef0:	f003 0310 	and.w	r3, r3, #16
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	f000 813e 	beq.w	8009176 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	2210      	movs	r2, #16
 8008f00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f0c:	2b40      	cmp	r3, #64	@ 0x40
 8008f0e:	f040 80b6 	bne.w	800907e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008f1e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	f000 8165 	beq.w	80091f2 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008f2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008f32:	429a      	cmp	r2, r3
 8008f34:	f080 815d 	bcs.w	80091f2 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008f3e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f46:	69db      	ldr	r3, [r3, #28]
 8008f48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f4c:	f000 8086 	beq.w	800905c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008f5c:	e853 3f00 	ldrex	r3, [r3]
 8008f60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008f64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008f68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	461a      	mov	r2, r3
 8008f76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008f7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008f7e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f82:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008f86:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008f8a:	e841 2300 	strex	r3, r2, [r1]
 8008f8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d1da      	bne.n	8008f50 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	3308      	adds	r3, #8
 8008fa0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008fa4:	e853 3f00 	ldrex	r3, [r3]
 8008fa8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008faa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008fac:	f023 0301 	bic.w	r3, r3, #1
 8008fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	3308      	adds	r3, #8
 8008fba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008fbe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008fc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008fc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008fca:	e841 2300 	strex	r3, r2, [r1]
 8008fce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008fd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d1e1      	bne.n	8008f9a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	3308      	adds	r3, #8
 8008fdc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008fe0:	e853 3f00 	ldrex	r3, [r3]
 8008fe4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008fe6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008fe8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	3308      	adds	r3, #8
 8008ff6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008ffa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008ffc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ffe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009000:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009002:	e841 2300 	strex	r3, r2, [r1]
 8009006:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009008:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800900a:	2b00      	cmp	r3, #0
 800900c:	d1e3      	bne.n	8008fd6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2220      	movs	r2, #32
 8009012:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2200      	movs	r2, #0
 800901a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009022:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009024:	e853 3f00 	ldrex	r3, [r3]
 8009028:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800902a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800902c:	f023 0310 	bic.w	r3, r3, #16
 8009030:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	461a      	mov	r2, r3
 800903a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800903e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009040:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009042:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009044:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009046:	e841 2300 	strex	r3, r2, [r1]
 800904a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800904c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1e4      	bne.n	800901c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009056:	4618      	mov	r0, r3
 8009058:	f7fb fbae 	bl	80047b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2202      	movs	r2, #2
 8009060:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800906e:	b29b      	uxth	r3, r3
 8009070:	1ad3      	subs	r3, r2, r3
 8009072:	b29b      	uxth	r3, r3
 8009074:	4619      	mov	r1, r3
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 f8d8 	bl	800922c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800907c:	e0b9      	b.n	80091f2 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800908a:	b29b      	uxth	r3, r3
 800908c:	1ad3      	subs	r3, r2, r3
 800908e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009098:	b29b      	uxth	r3, r3
 800909a:	2b00      	cmp	r3, #0
 800909c:	f000 80ab 	beq.w	80091f6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80090a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	f000 80a6 	beq.w	80091f6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090b2:	e853 3f00 	ldrex	r3, [r3]
 80090b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80090b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80090be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	461a      	mov	r2, r3
 80090c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80090cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80090ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80090d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090d4:	e841 2300 	strex	r3, r2, [r1]
 80090d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80090da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d1e4      	bne.n	80090aa <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	3308      	adds	r3, #8
 80090e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ea:	e853 3f00 	ldrex	r3, [r3]
 80090ee:	623b      	str	r3, [r7, #32]
   return(result);
 80090f0:	6a3b      	ldr	r3, [r7, #32]
 80090f2:	f023 0301 	bic.w	r3, r3, #1
 80090f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	3308      	adds	r3, #8
 8009100:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009104:	633a      	str	r2, [r7, #48]	@ 0x30
 8009106:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009108:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800910a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800910c:	e841 2300 	strex	r3, r2, [r1]
 8009110:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009114:	2b00      	cmp	r3, #0
 8009116:	d1e3      	bne.n	80090e0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2220      	movs	r2, #32
 800911c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	e853 3f00 	ldrex	r3, [r3]
 8009138:	60fb      	str	r3, [r7, #12]
   return(result);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f023 0310 	bic.w	r3, r3, #16
 8009140:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	461a      	mov	r2, r3
 800914a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800914e:	61fb      	str	r3, [r7, #28]
 8009150:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009152:	69b9      	ldr	r1, [r7, #24]
 8009154:	69fa      	ldr	r2, [r7, #28]
 8009156:	e841 2300 	strex	r3, r2, [r1]
 800915a:	617b      	str	r3, [r7, #20]
   return(result);
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d1e4      	bne.n	800912c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2202      	movs	r2, #2
 8009166:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009168:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800916c:	4619      	mov	r1, r3
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 f85c 	bl	800922c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009174:	e03f      	b.n	80091f6 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800917a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800917e:	2b00      	cmp	r3, #0
 8009180:	d00e      	beq.n	80091a0 <HAL_UART_IRQHandler+0x56c>
 8009182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009186:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800918a:	2b00      	cmp	r3, #0
 800918c:	d008      	beq.n	80091a0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009196:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 f853 	bl	8009244 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800919e:	e02d      	b.n	80091fc <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80091a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00e      	beq.n	80091ca <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80091ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d008      	beq.n	80091ca <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d01c      	beq.n	80091fa <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	4798      	blx	r3
    }
    return;
 80091c8:	e017      	b.n	80091fa <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80091ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d012      	beq.n	80091fc <HAL_UART_IRQHandler+0x5c8>
 80091d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d00c      	beq.n	80091fc <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 fe4f 	bl	8009e86 <UART_EndTransmit_IT>
    return;
 80091e8:	e008      	b.n	80091fc <HAL_UART_IRQHandler+0x5c8>
      return;
 80091ea:	bf00      	nop
 80091ec:	e006      	b.n	80091fc <HAL_UART_IRQHandler+0x5c8>
    return;
 80091ee:	bf00      	nop
 80091f0:	e004      	b.n	80091fc <HAL_UART_IRQHandler+0x5c8>
      return;
 80091f2:	bf00      	nop
 80091f4:	e002      	b.n	80091fc <HAL_UART_IRQHandler+0x5c8>
      return;
 80091f6:	bf00      	nop
 80091f8:	e000      	b.n	80091fc <HAL_UART_IRQHandler+0x5c8>
    return;
 80091fa:	bf00      	nop
  }

}
 80091fc:	37e8      	adds	r7, #232	@ 0xe8
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop

08009204 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800920c:	bf00      	nop
 800920e:	370c      	adds	r7, #12
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009220:	bf00      	nop
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	460b      	mov	r3, r1
 8009236:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009238:	bf00      	nop
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800924c:	bf00      	nop
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b088      	sub	sp, #32
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009260:	2300      	movs	r3, #0
 8009262:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	689a      	ldr	r2, [r3, #8]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	691b      	ldr	r3, [r3, #16]
 800926c:	431a      	orrs	r2, r3
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	695b      	ldr	r3, [r3, #20]
 8009272:	431a      	orrs	r2, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	69db      	ldr	r3, [r3, #28]
 8009278:	4313      	orrs	r3, r2
 800927a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	4ba6      	ldr	r3, [pc, #664]	@ (800951c <UART_SetConfig+0x2c4>)
 8009284:	4013      	ands	r3, r2
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	6812      	ldr	r2, [r2, #0]
 800928a:	6979      	ldr	r1, [r7, #20]
 800928c:	430b      	orrs	r3, r1
 800928e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	68da      	ldr	r2, [r3, #12]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	430a      	orrs	r2, r1
 80092a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	699b      	ldr	r3, [r3, #24]
 80092aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6a1b      	ldr	r3, [r3, #32]
 80092b0:	697a      	ldr	r2, [r7, #20]
 80092b2:	4313      	orrs	r3, r2
 80092b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	697a      	ldr	r2, [r7, #20]
 80092c6:	430a      	orrs	r2, r1
 80092c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a94      	ldr	r2, [pc, #592]	@ (8009520 <UART_SetConfig+0x2c8>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d120      	bne.n	8009316 <UART_SetConfig+0xbe>
 80092d4:	4b93      	ldr	r3, [pc, #588]	@ (8009524 <UART_SetConfig+0x2cc>)
 80092d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092da:	f003 0303 	and.w	r3, r3, #3
 80092de:	2b03      	cmp	r3, #3
 80092e0:	d816      	bhi.n	8009310 <UART_SetConfig+0xb8>
 80092e2:	a201      	add	r2, pc, #4	@ (adr r2, 80092e8 <UART_SetConfig+0x90>)
 80092e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e8:	080092f9 	.word	0x080092f9
 80092ec:	08009305 	.word	0x08009305
 80092f0:	080092ff 	.word	0x080092ff
 80092f4:	0800930b 	.word	0x0800930b
 80092f8:	2301      	movs	r3, #1
 80092fa:	77fb      	strb	r3, [r7, #31]
 80092fc:	e150      	b.n	80095a0 <UART_SetConfig+0x348>
 80092fe:	2302      	movs	r3, #2
 8009300:	77fb      	strb	r3, [r7, #31]
 8009302:	e14d      	b.n	80095a0 <UART_SetConfig+0x348>
 8009304:	2304      	movs	r3, #4
 8009306:	77fb      	strb	r3, [r7, #31]
 8009308:	e14a      	b.n	80095a0 <UART_SetConfig+0x348>
 800930a:	2308      	movs	r3, #8
 800930c:	77fb      	strb	r3, [r7, #31]
 800930e:	e147      	b.n	80095a0 <UART_SetConfig+0x348>
 8009310:	2310      	movs	r3, #16
 8009312:	77fb      	strb	r3, [r7, #31]
 8009314:	e144      	b.n	80095a0 <UART_SetConfig+0x348>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a83      	ldr	r2, [pc, #524]	@ (8009528 <UART_SetConfig+0x2d0>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d132      	bne.n	8009386 <UART_SetConfig+0x12e>
 8009320:	4b80      	ldr	r3, [pc, #512]	@ (8009524 <UART_SetConfig+0x2cc>)
 8009322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009326:	f003 030c 	and.w	r3, r3, #12
 800932a:	2b0c      	cmp	r3, #12
 800932c:	d828      	bhi.n	8009380 <UART_SetConfig+0x128>
 800932e:	a201      	add	r2, pc, #4	@ (adr r2, 8009334 <UART_SetConfig+0xdc>)
 8009330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009334:	08009369 	.word	0x08009369
 8009338:	08009381 	.word	0x08009381
 800933c:	08009381 	.word	0x08009381
 8009340:	08009381 	.word	0x08009381
 8009344:	08009375 	.word	0x08009375
 8009348:	08009381 	.word	0x08009381
 800934c:	08009381 	.word	0x08009381
 8009350:	08009381 	.word	0x08009381
 8009354:	0800936f 	.word	0x0800936f
 8009358:	08009381 	.word	0x08009381
 800935c:	08009381 	.word	0x08009381
 8009360:	08009381 	.word	0x08009381
 8009364:	0800937b 	.word	0x0800937b
 8009368:	2300      	movs	r3, #0
 800936a:	77fb      	strb	r3, [r7, #31]
 800936c:	e118      	b.n	80095a0 <UART_SetConfig+0x348>
 800936e:	2302      	movs	r3, #2
 8009370:	77fb      	strb	r3, [r7, #31]
 8009372:	e115      	b.n	80095a0 <UART_SetConfig+0x348>
 8009374:	2304      	movs	r3, #4
 8009376:	77fb      	strb	r3, [r7, #31]
 8009378:	e112      	b.n	80095a0 <UART_SetConfig+0x348>
 800937a:	2308      	movs	r3, #8
 800937c:	77fb      	strb	r3, [r7, #31]
 800937e:	e10f      	b.n	80095a0 <UART_SetConfig+0x348>
 8009380:	2310      	movs	r3, #16
 8009382:	77fb      	strb	r3, [r7, #31]
 8009384:	e10c      	b.n	80095a0 <UART_SetConfig+0x348>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a68      	ldr	r2, [pc, #416]	@ (800952c <UART_SetConfig+0x2d4>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d120      	bne.n	80093d2 <UART_SetConfig+0x17a>
 8009390:	4b64      	ldr	r3, [pc, #400]	@ (8009524 <UART_SetConfig+0x2cc>)
 8009392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009396:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800939a:	2b30      	cmp	r3, #48	@ 0x30
 800939c:	d013      	beq.n	80093c6 <UART_SetConfig+0x16e>
 800939e:	2b30      	cmp	r3, #48	@ 0x30
 80093a0:	d814      	bhi.n	80093cc <UART_SetConfig+0x174>
 80093a2:	2b20      	cmp	r3, #32
 80093a4:	d009      	beq.n	80093ba <UART_SetConfig+0x162>
 80093a6:	2b20      	cmp	r3, #32
 80093a8:	d810      	bhi.n	80093cc <UART_SetConfig+0x174>
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d002      	beq.n	80093b4 <UART_SetConfig+0x15c>
 80093ae:	2b10      	cmp	r3, #16
 80093b0:	d006      	beq.n	80093c0 <UART_SetConfig+0x168>
 80093b2:	e00b      	b.n	80093cc <UART_SetConfig+0x174>
 80093b4:	2300      	movs	r3, #0
 80093b6:	77fb      	strb	r3, [r7, #31]
 80093b8:	e0f2      	b.n	80095a0 <UART_SetConfig+0x348>
 80093ba:	2302      	movs	r3, #2
 80093bc:	77fb      	strb	r3, [r7, #31]
 80093be:	e0ef      	b.n	80095a0 <UART_SetConfig+0x348>
 80093c0:	2304      	movs	r3, #4
 80093c2:	77fb      	strb	r3, [r7, #31]
 80093c4:	e0ec      	b.n	80095a0 <UART_SetConfig+0x348>
 80093c6:	2308      	movs	r3, #8
 80093c8:	77fb      	strb	r3, [r7, #31]
 80093ca:	e0e9      	b.n	80095a0 <UART_SetConfig+0x348>
 80093cc:	2310      	movs	r3, #16
 80093ce:	77fb      	strb	r3, [r7, #31]
 80093d0:	e0e6      	b.n	80095a0 <UART_SetConfig+0x348>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a56      	ldr	r2, [pc, #344]	@ (8009530 <UART_SetConfig+0x2d8>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d120      	bne.n	800941e <UART_SetConfig+0x1c6>
 80093dc:	4b51      	ldr	r3, [pc, #324]	@ (8009524 <UART_SetConfig+0x2cc>)
 80093de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80093e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80093e8:	d013      	beq.n	8009412 <UART_SetConfig+0x1ba>
 80093ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80093ec:	d814      	bhi.n	8009418 <UART_SetConfig+0x1c0>
 80093ee:	2b80      	cmp	r3, #128	@ 0x80
 80093f0:	d009      	beq.n	8009406 <UART_SetConfig+0x1ae>
 80093f2:	2b80      	cmp	r3, #128	@ 0x80
 80093f4:	d810      	bhi.n	8009418 <UART_SetConfig+0x1c0>
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d002      	beq.n	8009400 <UART_SetConfig+0x1a8>
 80093fa:	2b40      	cmp	r3, #64	@ 0x40
 80093fc:	d006      	beq.n	800940c <UART_SetConfig+0x1b4>
 80093fe:	e00b      	b.n	8009418 <UART_SetConfig+0x1c0>
 8009400:	2300      	movs	r3, #0
 8009402:	77fb      	strb	r3, [r7, #31]
 8009404:	e0cc      	b.n	80095a0 <UART_SetConfig+0x348>
 8009406:	2302      	movs	r3, #2
 8009408:	77fb      	strb	r3, [r7, #31]
 800940a:	e0c9      	b.n	80095a0 <UART_SetConfig+0x348>
 800940c:	2304      	movs	r3, #4
 800940e:	77fb      	strb	r3, [r7, #31]
 8009410:	e0c6      	b.n	80095a0 <UART_SetConfig+0x348>
 8009412:	2308      	movs	r3, #8
 8009414:	77fb      	strb	r3, [r7, #31]
 8009416:	e0c3      	b.n	80095a0 <UART_SetConfig+0x348>
 8009418:	2310      	movs	r3, #16
 800941a:	77fb      	strb	r3, [r7, #31]
 800941c:	e0c0      	b.n	80095a0 <UART_SetConfig+0x348>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a44      	ldr	r2, [pc, #272]	@ (8009534 <UART_SetConfig+0x2dc>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d125      	bne.n	8009474 <UART_SetConfig+0x21c>
 8009428:	4b3e      	ldr	r3, [pc, #248]	@ (8009524 <UART_SetConfig+0x2cc>)
 800942a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800942e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009432:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009436:	d017      	beq.n	8009468 <UART_SetConfig+0x210>
 8009438:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800943c:	d817      	bhi.n	800946e <UART_SetConfig+0x216>
 800943e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009442:	d00b      	beq.n	800945c <UART_SetConfig+0x204>
 8009444:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009448:	d811      	bhi.n	800946e <UART_SetConfig+0x216>
 800944a:	2b00      	cmp	r3, #0
 800944c:	d003      	beq.n	8009456 <UART_SetConfig+0x1fe>
 800944e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009452:	d006      	beq.n	8009462 <UART_SetConfig+0x20a>
 8009454:	e00b      	b.n	800946e <UART_SetConfig+0x216>
 8009456:	2300      	movs	r3, #0
 8009458:	77fb      	strb	r3, [r7, #31]
 800945a:	e0a1      	b.n	80095a0 <UART_SetConfig+0x348>
 800945c:	2302      	movs	r3, #2
 800945e:	77fb      	strb	r3, [r7, #31]
 8009460:	e09e      	b.n	80095a0 <UART_SetConfig+0x348>
 8009462:	2304      	movs	r3, #4
 8009464:	77fb      	strb	r3, [r7, #31]
 8009466:	e09b      	b.n	80095a0 <UART_SetConfig+0x348>
 8009468:	2308      	movs	r3, #8
 800946a:	77fb      	strb	r3, [r7, #31]
 800946c:	e098      	b.n	80095a0 <UART_SetConfig+0x348>
 800946e:	2310      	movs	r3, #16
 8009470:	77fb      	strb	r3, [r7, #31]
 8009472:	e095      	b.n	80095a0 <UART_SetConfig+0x348>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a2f      	ldr	r2, [pc, #188]	@ (8009538 <UART_SetConfig+0x2e0>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d125      	bne.n	80094ca <UART_SetConfig+0x272>
 800947e:	4b29      	ldr	r3, [pc, #164]	@ (8009524 <UART_SetConfig+0x2cc>)
 8009480:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009484:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009488:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800948c:	d017      	beq.n	80094be <UART_SetConfig+0x266>
 800948e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009492:	d817      	bhi.n	80094c4 <UART_SetConfig+0x26c>
 8009494:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009498:	d00b      	beq.n	80094b2 <UART_SetConfig+0x25a>
 800949a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800949e:	d811      	bhi.n	80094c4 <UART_SetConfig+0x26c>
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d003      	beq.n	80094ac <UART_SetConfig+0x254>
 80094a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094a8:	d006      	beq.n	80094b8 <UART_SetConfig+0x260>
 80094aa:	e00b      	b.n	80094c4 <UART_SetConfig+0x26c>
 80094ac:	2301      	movs	r3, #1
 80094ae:	77fb      	strb	r3, [r7, #31]
 80094b0:	e076      	b.n	80095a0 <UART_SetConfig+0x348>
 80094b2:	2302      	movs	r3, #2
 80094b4:	77fb      	strb	r3, [r7, #31]
 80094b6:	e073      	b.n	80095a0 <UART_SetConfig+0x348>
 80094b8:	2304      	movs	r3, #4
 80094ba:	77fb      	strb	r3, [r7, #31]
 80094bc:	e070      	b.n	80095a0 <UART_SetConfig+0x348>
 80094be:	2308      	movs	r3, #8
 80094c0:	77fb      	strb	r3, [r7, #31]
 80094c2:	e06d      	b.n	80095a0 <UART_SetConfig+0x348>
 80094c4:	2310      	movs	r3, #16
 80094c6:	77fb      	strb	r3, [r7, #31]
 80094c8:	e06a      	b.n	80095a0 <UART_SetConfig+0x348>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a1b      	ldr	r2, [pc, #108]	@ (800953c <UART_SetConfig+0x2e4>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d138      	bne.n	8009546 <UART_SetConfig+0x2ee>
 80094d4:	4b13      	ldr	r3, [pc, #76]	@ (8009524 <UART_SetConfig+0x2cc>)
 80094d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094da:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80094de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80094e2:	d017      	beq.n	8009514 <UART_SetConfig+0x2bc>
 80094e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80094e8:	d82a      	bhi.n	8009540 <UART_SetConfig+0x2e8>
 80094ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094ee:	d00b      	beq.n	8009508 <UART_SetConfig+0x2b0>
 80094f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094f4:	d824      	bhi.n	8009540 <UART_SetConfig+0x2e8>
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d003      	beq.n	8009502 <UART_SetConfig+0x2aa>
 80094fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094fe:	d006      	beq.n	800950e <UART_SetConfig+0x2b6>
 8009500:	e01e      	b.n	8009540 <UART_SetConfig+0x2e8>
 8009502:	2300      	movs	r3, #0
 8009504:	77fb      	strb	r3, [r7, #31]
 8009506:	e04b      	b.n	80095a0 <UART_SetConfig+0x348>
 8009508:	2302      	movs	r3, #2
 800950a:	77fb      	strb	r3, [r7, #31]
 800950c:	e048      	b.n	80095a0 <UART_SetConfig+0x348>
 800950e:	2304      	movs	r3, #4
 8009510:	77fb      	strb	r3, [r7, #31]
 8009512:	e045      	b.n	80095a0 <UART_SetConfig+0x348>
 8009514:	2308      	movs	r3, #8
 8009516:	77fb      	strb	r3, [r7, #31]
 8009518:	e042      	b.n	80095a0 <UART_SetConfig+0x348>
 800951a:	bf00      	nop
 800951c:	efff69f3 	.word	0xefff69f3
 8009520:	40011000 	.word	0x40011000
 8009524:	40023800 	.word	0x40023800
 8009528:	40004400 	.word	0x40004400
 800952c:	40004800 	.word	0x40004800
 8009530:	40004c00 	.word	0x40004c00
 8009534:	40005000 	.word	0x40005000
 8009538:	40011400 	.word	0x40011400
 800953c:	40007800 	.word	0x40007800
 8009540:	2310      	movs	r3, #16
 8009542:	77fb      	strb	r3, [r7, #31]
 8009544:	e02c      	b.n	80095a0 <UART_SetConfig+0x348>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a72      	ldr	r2, [pc, #456]	@ (8009714 <UART_SetConfig+0x4bc>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d125      	bne.n	800959c <UART_SetConfig+0x344>
 8009550:	4b71      	ldr	r3, [pc, #452]	@ (8009718 <UART_SetConfig+0x4c0>)
 8009552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009556:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800955a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800955e:	d017      	beq.n	8009590 <UART_SetConfig+0x338>
 8009560:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009564:	d817      	bhi.n	8009596 <UART_SetConfig+0x33e>
 8009566:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800956a:	d00b      	beq.n	8009584 <UART_SetConfig+0x32c>
 800956c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009570:	d811      	bhi.n	8009596 <UART_SetConfig+0x33e>
 8009572:	2b00      	cmp	r3, #0
 8009574:	d003      	beq.n	800957e <UART_SetConfig+0x326>
 8009576:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800957a:	d006      	beq.n	800958a <UART_SetConfig+0x332>
 800957c:	e00b      	b.n	8009596 <UART_SetConfig+0x33e>
 800957e:	2300      	movs	r3, #0
 8009580:	77fb      	strb	r3, [r7, #31]
 8009582:	e00d      	b.n	80095a0 <UART_SetConfig+0x348>
 8009584:	2302      	movs	r3, #2
 8009586:	77fb      	strb	r3, [r7, #31]
 8009588:	e00a      	b.n	80095a0 <UART_SetConfig+0x348>
 800958a:	2304      	movs	r3, #4
 800958c:	77fb      	strb	r3, [r7, #31]
 800958e:	e007      	b.n	80095a0 <UART_SetConfig+0x348>
 8009590:	2308      	movs	r3, #8
 8009592:	77fb      	strb	r3, [r7, #31]
 8009594:	e004      	b.n	80095a0 <UART_SetConfig+0x348>
 8009596:	2310      	movs	r3, #16
 8009598:	77fb      	strb	r3, [r7, #31]
 800959a:	e001      	b.n	80095a0 <UART_SetConfig+0x348>
 800959c:	2310      	movs	r3, #16
 800959e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	69db      	ldr	r3, [r3, #28]
 80095a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80095a8:	d15b      	bne.n	8009662 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80095aa:	7ffb      	ldrb	r3, [r7, #31]
 80095ac:	2b08      	cmp	r3, #8
 80095ae:	d828      	bhi.n	8009602 <UART_SetConfig+0x3aa>
 80095b0:	a201      	add	r2, pc, #4	@ (adr r2, 80095b8 <UART_SetConfig+0x360>)
 80095b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095b6:	bf00      	nop
 80095b8:	080095dd 	.word	0x080095dd
 80095bc:	080095e5 	.word	0x080095e5
 80095c0:	080095ed 	.word	0x080095ed
 80095c4:	08009603 	.word	0x08009603
 80095c8:	080095f3 	.word	0x080095f3
 80095cc:	08009603 	.word	0x08009603
 80095d0:	08009603 	.word	0x08009603
 80095d4:	08009603 	.word	0x08009603
 80095d8:	080095fb 	.word	0x080095fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095dc:	f7fc fe8c 	bl	80062f8 <HAL_RCC_GetPCLK1Freq>
 80095e0:	61b8      	str	r0, [r7, #24]
        break;
 80095e2:	e013      	b.n	800960c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095e4:	f7fc fe9c 	bl	8006320 <HAL_RCC_GetPCLK2Freq>
 80095e8:	61b8      	str	r0, [r7, #24]
        break;
 80095ea:	e00f      	b.n	800960c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80095ec:	4b4b      	ldr	r3, [pc, #300]	@ (800971c <UART_SetConfig+0x4c4>)
 80095ee:	61bb      	str	r3, [r7, #24]
        break;
 80095f0:	e00c      	b.n	800960c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80095f2:	f7fc fd6f 	bl	80060d4 <HAL_RCC_GetSysClockFreq>
 80095f6:	61b8      	str	r0, [r7, #24]
        break;
 80095f8:	e008      	b.n	800960c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095fe:	61bb      	str	r3, [r7, #24]
        break;
 8009600:	e004      	b.n	800960c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009602:	2300      	movs	r3, #0
 8009604:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009606:	2301      	movs	r3, #1
 8009608:	77bb      	strb	r3, [r7, #30]
        break;
 800960a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d074      	beq.n	80096fc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009612:	69bb      	ldr	r3, [r7, #24]
 8009614:	005a      	lsls	r2, r3, #1
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	085b      	lsrs	r3, r3, #1
 800961c:	441a      	add	r2, r3
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	fbb2 f3f3 	udiv	r3, r2, r3
 8009626:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	2b0f      	cmp	r3, #15
 800962c:	d916      	bls.n	800965c <UART_SetConfig+0x404>
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009634:	d212      	bcs.n	800965c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	b29b      	uxth	r3, r3
 800963a:	f023 030f 	bic.w	r3, r3, #15
 800963e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	085b      	lsrs	r3, r3, #1
 8009644:	b29b      	uxth	r3, r3
 8009646:	f003 0307 	and.w	r3, r3, #7
 800964a:	b29a      	uxth	r2, r3
 800964c:	89fb      	ldrh	r3, [r7, #14]
 800964e:	4313      	orrs	r3, r2
 8009650:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	89fa      	ldrh	r2, [r7, #14]
 8009658:	60da      	str	r2, [r3, #12]
 800965a:	e04f      	b.n	80096fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800965c:	2301      	movs	r3, #1
 800965e:	77bb      	strb	r3, [r7, #30]
 8009660:	e04c      	b.n	80096fc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009662:	7ffb      	ldrb	r3, [r7, #31]
 8009664:	2b08      	cmp	r3, #8
 8009666:	d828      	bhi.n	80096ba <UART_SetConfig+0x462>
 8009668:	a201      	add	r2, pc, #4	@ (adr r2, 8009670 <UART_SetConfig+0x418>)
 800966a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800966e:	bf00      	nop
 8009670:	08009695 	.word	0x08009695
 8009674:	0800969d 	.word	0x0800969d
 8009678:	080096a5 	.word	0x080096a5
 800967c:	080096bb 	.word	0x080096bb
 8009680:	080096ab 	.word	0x080096ab
 8009684:	080096bb 	.word	0x080096bb
 8009688:	080096bb 	.word	0x080096bb
 800968c:	080096bb 	.word	0x080096bb
 8009690:	080096b3 	.word	0x080096b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009694:	f7fc fe30 	bl	80062f8 <HAL_RCC_GetPCLK1Freq>
 8009698:	61b8      	str	r0, [r7, #24]
        break;
 800969a:	e013      	b.n	80096c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800969c:	f7fc fe40 	bl	8006320 <HAL_RCC_GetPCLK2Freq>
 80096a0:	61b8      	str	r0, [r7, #24]
        break;
 80096a2:	e00f      	b.n	80096c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80096a4:	4b1d      	ldr	r3, [pc, #116]	@ (800971c <UART_SetConfig+0x4c4>)
 80096a6:	61bb      	str	r3, [r7, #24]
        break;
 80096a8:	e00c      	b.n	80096c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80096aa:	f7fc fd13 	bl	80060d4 <HAL_RCC_GetSysClockFreq>
 80096ae:	61b8      	str	r0, [r7, #24]
        break;
 80096b0:	e008      	b.n	80096c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80096b6:	61bb      	str	r3, [r7, #24]
        break;
 80096b8:	e004      	b.n	80096c4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80096ba:	2300      	movs	r3, #0
 80096bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80096be:	2301      	movs	r3, #1
 80096c0:	77bb      	strb	r3, [r7, #30]
        break;
 80096c2:	bf00      	nop
    }

    if (pclk != 0U)
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d018      	beq.n	80096fc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	085a      	lsrs	r2, r3, #1
 80096d0:	69bb      	ldr	r3, [r7, #24]
 80096d2:	441a      	add	r2, r3
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80096dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	2b0f      	cmp	r3, #15
 80096e2:	d909      	bls.n	80096f8 <UART_SetConfig+0x4a0>
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096ea:	d205      	bcs.n	80096f8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	b29a      	uxth	r2, r3
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	60da      	str	r2, [r3, #12]
 80096f6:	e001      	b.n	80096fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80096f8:	2301      	movs	r3, #1
 80096fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2200      	movs	r2, #0
 8009700:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009708:	7fbb      	ldrb	r3, [r7, #30]
}
 800970a:	4618      	mov	r0, r3
 800970c:	3720      	adds	r7, #32
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	40007c00 	.word	0x40007c00
 8009718:	40023800 	.word	0x40023800
 800971c:	00f42400 	.word	0x00f42400

08009720 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800972c:	f003 0308 	and.w	r3, r3, #8
 8009730:	2b00      	cmp	r3, #0
 8009732:	d00a      	beq.n	800974a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	430a      	orrs	r2, r1
 8009748:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800974e:	f003 0301 	and.w	r3, r3, #1
 8009752:	2b00      	cmp	r3, #0
 8009754:	d00a      	beq.n	800976c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	430a      	orrs	r2, r1
 800976a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009770:	f003 0302 	and.w	r3, r3, #2
 8009774:	2b00      	cmp	r3, #0
 8009776:	d00a      	beq.n	800978e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	430a      	orrs	r2, r1
 800978c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009792:	f003 0304 	and.w	r3, r3, #4
 8009796:	2b00      	cmp	r3, #0
 8009798:	d00a      	beq.n	80097b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	430a      	orrs	r2, r1
 80097ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097b4:	f003 0310 	and.w	r3, r3, #16
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d00a      	beq.n	80097d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	430a      	orrs	r2, r1
 80097d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097d6:	f003 0320 	and.w	r3, r3, #32
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00a      	beq.n	80097f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	430a      	orrs	r2, r1
 80097f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d01a      	beq.n	8009836 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	430a      	orrs	r2, r1
 8009814:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800981a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800981e:	d10a      	bne.n	8009836 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	430a      	orrs	r2, r1
 8009834:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800983a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800983e:	2b00      	cmp	r3, #0
 8009840:	d00a      	beq.n	8009858 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	430a      	orrs	r2, r1
 8009856:	605a      	str	r2, [r3, #4]
  }
}
 8009858:	bf00      	nop
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b098      	sub	sp, #96	@ 0x60
 8009868:	af02      	add	r7, sp, #8
 800986a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009874:	f7fa fe8e 	bl	8004594 <HAL_GetTick>
 8009878:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f003 0308 	and.w	r3, r3, #8
 8009884:	2b08      	cmp	r3, #8
 8009886:	d12e      	bne.n	80098e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009888:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800988c:	9300      	str	r3, [sp, #0]
 800988e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009890:	2200      	movs	r2, #0
 8009892:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f000 f88c 	bl	80099b4 <UART_WaitOnFlagUntilTimeout>
 800989c:	4603      	mov	r3, r0
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d021      	beq.n	80098e6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098aa:	e853 3f00 	ldrex	r3, [r3]
 80098ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80098b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80098b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	461a      	mov	r2, r3
 80098be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80098c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80098c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80098c8:	e841 2300 	strex	r3, r2, [r1]
 80098cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80098ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d1e6      	bne.n	80098a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2220      	movs	r2, #32
 80098d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2200      	movs	r2, #0
 80098de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098e2:	2303      	movs	r3, #3
 80098e4:	e062      	b.n	80099ac <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f003 0304 	and.w	r3, r3, #4
 80098f0:	2b04      	cmp	r3, #4
 80098f2:	d149      	bne.n	8009988 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80098f8:	9300      	str	r3, [sp, #0]
 80098fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098fc:	2200      	movs	r2, #0
 80098fe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 f856 	bl	80099b4 <UART_WaitOnFlagUntilTimeout>
 8009908:	4603      	mov	r3, r0
 800990a:	2b00      	cmp	r3, #0
 800990c:	d03c      	beq.n	8009988 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009916:	e853 3f00 	ldrex	r3, [r3]
 800991a:	623b      	str	r3, [r7, #32]
   return(result);
 800991c:	6a3b      	ldr	r3, [r7, #32]
 800991e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009922:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	461a      	mov	r2, r3
 800992a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800992c:	633b      	str	r3, [r7, #48]	@ 0x30
 800992e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009930:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009932:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009934:	e841 2300 	strex	r3, r2, [r1]
 8009938:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800993a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800993c:	2b00      	cmp	r3, #0
 800993e:	d1e6      	bne.n	800990e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	3308      	adds	r3, #8
 8009946:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	e853 3f00 	ldrex	r3, [r3]
 800994e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f023 0301 	bic.w	r3, r3, #1
 8009956:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	3308      	adds	r3, #8
 800995e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009960:	61fa      	str	r2, [r7, #28]
 8009962:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009964:	69b9      	ldr	r1, [r7, #24]
 8009966:	69fa      	ldr	r2, [r7, #28]
 8009968:	e841 2300 	strex	r3, r2, [r1]
 800996c:	617b      	str	r3, [r7, #20]
   return(result);
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d1e5      	bne.n	8009940 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2220      	movs	r2, #32
 8009978:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2200      	movs	r2, #0
 8009980:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009984:	2303      	movs	r3, #3
 8009986:	e011      	b.n	80099ac <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2220      	movs	r2, #32
 800998c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2220      	movs	r2, #32
 8009992:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2200      	movs	r2, #0
 80099a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80099aa:	2300      	movs	r3, #0
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3758      	adds	r7, #88	@ 0x58
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	603b      	str	r3, [r7, #0]
 80099c0:	4613      	mov	r3, r2
 80099c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099c4:	e04f      	b.n	8009a66 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099c6:	69bb      	ldr	r3, [r7, #24]
 80099c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099cc:	d04b      	beq.n	8009a66 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099ce:	f7fa fde1 	bl	8004594 <HAL_GetTick>
 80099d2:	4602      	mov	r2, r0
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	1ad3      	subs	r3, r2, r3
 80099d8:	69ba      	ldr	r2, [r7, #24]
 80099da:	429a      	cmp	r2, r3
 80099dc:	d302      	bcc.n	80099e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d101      	bne.n	80099e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80099e4:	2303      	movs	r3, #3
 80099e6:	e04e      	b.n	8009a86 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f003 0304 	and.w	r3, r3, #4
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d037      	beq.n	8009a66 <UART_WaitOnFlagUntilTimeout+0xb2>
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	2b80      	cmp	r3, #128	@ 0x80
 80099fa:	d034      	beq.n	8009a66 <UART_WaitOnFlagUntilTimeout+0xb2>
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	2b40      	cmp	r3, #64	@ 0x40
 8009a00:	d031      	beq.n	8009a66 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	69db      	ldr	r3, [r3, #28]
 8009a08:	f003 0308 	and.w	r3, r3, #8
 8009a0c:	2b08      	cmp	r3, #8
 8009a0e:	d110      	bne.n	8009a32 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	2208      	movs	r2, #8
 8009a16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a18:	68f8      	ldr	r0, [r7, #12]
 8009a1a:	f000 f8ff 	bl	8009c1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2208      	movs	r2, #8
 8009a22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e029      	b.n	8009a86 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	69db      	ldr	r3, [r3, #28]
 8009a38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a40:	d111      	bne.n	8009a66 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009a4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009a4c:	68f8      	ldr	r0, [r7, #12]
 8009a4e:	f000 f8e5 	bl	8009c1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2220      	movs	r2, #32
 8009a56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009a62:	2303      	movs	r3, #3
 8009a64:	e00f      	b.n	8009a86 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	69da      	ldr	r2, [r3, #28]
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	4013      	ands	r3, r2
 8009a70:	68ba      	ldr	r2, [r7, #8]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	bf0c      	ite	eq
 8009a76:	2301      	moveq	r3, #1
 8009a78:	2300      	movne	r3, #0
 8009a7a:	b2db      	uxtb	r3, r3
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	79fb      	ldrb	r3, [r7, #7]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d0a0      	beq.n	80099c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a84:	2300      	movs	r3, #0
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
	...

08009a90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b097      	sub	sp, #92	@ 0x5c
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	68ba      	ldr	r2, [r7, #8]
 8009aa2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	88fa      	ldrh	r2, [r7, #6]
 8009aa8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	88fa      	ldrh	r2, [r7, #6]
 8009ab0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	689b      	ldr	r3, [r3, #8]
 8009abe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ac2:	d10e      	bne.n	8009ae2 <UART_Start_Receive_IT+0x52>
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	691b      	ldr	r3, [r3, #16]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d105      	bne.n	8009ad8 <UART_Start_Receive_IT+0x48>
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009ad2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009ad6:	e02d      	b.n	8009b34 <UART_Start_Receive_IT+0xa4>
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	22ff      	movs	r2, #255	@ 0xff
 8009adc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009ae0:	e028      	b.n	8009b34 <UART_Start_Receive_IT+0xa4>
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	689b      	ldr	r3, [r3, #8]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d10d      	bne.n	8009b06 <UART_Start_Receive_IT+0x76>
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	691b      	ldr	r3, [r3, #16]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d104      	bne.n	8009afc <UART_Start_Receive_IT+0x6c>
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	22ff      	movs	r2, #255	@ 0xff
 8009af6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009afa:	e01b      	b.n	8009b34 <UART_Start_Receive_IT+0xa4>
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	227f      	movs	r2, #127	@ 0x7f
 8009b00:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009b04:	e016      	b.n	8009b34 <UART_Start_Receive_IT+0xa4>
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b0e:	d10d      	bne.n	8009b2c <UART_Start_Receive_IT+0x9c>
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	691b      	ldr	r3, [r3, #16]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d104      	bne.n	8009b22 <UART_Start_Receive_IT+0x92>
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	227f      	movs	r2, #127	@ 0x7f
 8009b1c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009b20:	e008      	b.n	8009b34 <UART_Start_Receive_IT+0xa4>
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	223f      	movs	r2, #63	@ 0x3f
 8009b26:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009b2a:	e003      	b.n	8009b34 <UART_Start_Receive_IT+0xa4>
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2200      	movs	r2, #0
 8009b38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2222      	movs	r2, #34	@ 0x22
 8009b40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	3308      	adds	r3, #8
 8009b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b4e:	e853 3f00 	ldrex	r3, [r3]
 8009b52:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b56:	f043 0301 	orr.w	r3, r3, #1
 8009b5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	3308      	adds	r3, #8
 8009b62:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009b64:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009b66:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b68:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009b6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b6c:	e841 2300 	strex	r3, r2, [r1]
 8009b70:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009b72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d1e5      	bne.n	8009b44 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b80:	d107      	bne.n	8009b92 <UART_Start_Receive_IT+0x102>
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	691b      	ldr	r3, [r3, #16]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d103      	bne.n	8009b92 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	4a21      	ldr	r2, [pc, #132]	@ (8009c14 <UART_Start_Receive_IT+0x184>)
 8009b8e:	669a      	str	r2, [r3, #104]	@ 0x68
 8009b90:	e002      	b.n	8009b98 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	4a20      	ldr	r2, [pc, #128]	@ (8009c18 <UART_Start_Receive_IT+0x188>)
 8009b96:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d019      	beq.n	8009bd4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba8:	e853 3f00 	ldrex	r3, [r3]
 8009bac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009bb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	461a      	mov	r2, r3
 8009bbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bc0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009bc4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009bc6:	e841 2300 	strex	r3, r2, [r1]
 8009bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d1e6      	bne.n	8009ba0 <UART_Start_Receive_IT+0x110>
 8009bd2:	e018      	b.n	8009c06 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	e853 3f00 	ldrex	r3, [r3]
 8009be0:	613b      	str	r3, [r7, #16]
   return(result);
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	f043 0320 	orr.w	r3, r3, #32
 8009be8:	653b      	str	r3, [r7, #80]	@ 0x50
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	461a      	mov	r2, r3
 8009bf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bf2:	623b      	str	r3, [r7, #32]
 8009bf4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf6:	69f9      	ldr	r1, [r7, #28]
 8009bf8:	6a3a      	ldr	r2, [r7, #32]
 8009bfa:	e841 2300 	strex	r3, r2, [r1]
 8009bfe:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d1e6      	bne.n	8009bd4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8009c06:	2300      	movs	r3, #0
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	375c      	adds	r7, #92	@ 0x5c
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr
 8009c14:	0800a083 	.word	0x0800a083
 8009c18:	08009edb 	.word	0x08009edb

08009c1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b095      	sub	sp, #84	@ 0x54
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c2c:	e853 3f00 	ldrex	r3, [r3]
 8009c30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	461a      	mov	r2, r3
 8009c40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c42:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c44:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009c48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009c4a:	e841 2300 	strex	r3, r2, [r1]
 8009c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d1e6      	bne.n	8009c24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	3308      	adds	r3, #8
 8009c5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c5e:	6a3b      	ldr	r3, [r7, #32]
 8009c60:	e853 3f00 	ldrex	r3, [r3]
 8009c64:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c66:	69fb      	ldr	r3, [r7, #28]
 8009c68:	f023 0301 	bic.w	r3, r3, #1
 8009c6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	3308      	adds	r3, #8
 8009c74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009c78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c7e:	e841 2300 	strex	r3, r2, [r1]
 8009c82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d1e5      	bne.n	8009c56 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d118      	bne.n	8009cc4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	e853 3f00 	ldrex	r3, [r3]
 8009c9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	f023 0310 	bic.w	r3, r3, #16
 8009ca6:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	461a      	mov	r2, r3
 8009cae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cb0:	61bb      	str	r3, [r7, #24]
 8009cb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb4:	6979      	ldr	r1, [r7, #20]
 8009cb6:	69ba      	ldr	r2, [r7, #24]
 8009cb8:	e841 2300 	strex	r3, r2, [r1]
 8009cbc:	613b      	str	r3, [r7, #16]
   return(result);
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d1e6      	bne.n	8009c92 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2220      	movs	r2, #32
 8009cc8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009cd8:	bf00      	nop
 8009cda:	3754      	adds	r7, #84	@ 0x54
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr

08009ce4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cf0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d02:	68f8      	ldr	r0, [r7, #12]
 8009d04:	f7ff fa88 	bl	8009218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d08:	bf00      	nop
 8009d0a:	3710      	adds	r7, #16
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b08f      	sub	sp, #60	@ 0x3c
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009d1c:	2b21      	cmp	r3, #33	@ 0x21
 8009d1e:	d14c      	bne.n	8009dba <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d132      	bne.n	8009d92 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d32:	6a3b      	ldr	r3, [r7, #32]
 8009d34:	e853 3f00 	ldrex	r3, [r3]
 8009d38:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d40:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	461a      	mov	r2, r3
 8009d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d4c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d52:	e841 2300 	strex	r3, r2, [r1]
 8009d56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d1e6      	bne.n	8009d2c <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	e853 3f00 	ldrex	r3, [r3]
 8009d6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d72:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	461a      	mov	r2, r3
 8009d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d7c:	61bb      	str	r3, [r7, #24]
 8009d7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d80:	6979      	ldr	r1, [r7, #20]
 8009d82:	69ba      	ldr	r2, [r7, #24]
 8009d84:	e841 2300 	strex	r3, r2, [r1]
 8009d88:	613b      	str	r3, [r7, #16]
   return(result);
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d1e6      	bne.n	8009d5e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009d90:	e013      	b.n	8009dba <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d96:	781a      	ldrb	r2, [r3, #0]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009da2:	1c5a      	adds	r2, r3, #1
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	3b01      	subs	r3, #1
 8009db2:	b29a      	uxth	r2, r3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8009dba:	bf00      	nop
 8009dbc:	373c      	adds	r7, #60	@ 0x3c
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr

08009dc6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009dc6:	b480      	push	{r7}
 8009dc8:	b091      	sub	sp, #68	@ 0x44
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009dd2:	2b21      	cmp	r3, #33	@ 0x21
 8009dd4:	d151      	bne.n	8009e7a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d132      	bne.n	8009e48 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dea:	e853 3f00 	ldrex	r3, [r3]
 8009dee:	623b      	str	r3, [r7, #32]
   return(result);
 8009df0:	6a3b      	ldr	r3, [r7, #32]
 8009df2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009df6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e00:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e02:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e08:	e841 2300 	strex	r3, r2, [r1]
 8009e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d1e6      	bne.n	8009de2 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	e853 3f00 	ldrex	r3, [r3]
 8009e20:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e28:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	461a      	mov	r2, r3
 8009e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e32:	61fb      	str	r3, [r7, #28]
 8009e34:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e36:	69b9      	ldr	r1, [r7, #24]
 8009e38:	69fa      	ldr	r2, [r7, #28]
 8009e3a:	e841 2300 	strex	r3, r2, [r1]
 8009e3e:	617b      	str	r3, [r7, #20]
   return(result);
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d1e6      	bne.n	8009e14 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009e46:	e018      	b.n	8009e7a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009e4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e50:	881b      	ldrh	r3, [r3, #0]
 8009e52:	461a      	mov	r2, r3
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e5c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e62:	1c9a      	adds	r2, r3, #2
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	3b01      	subs	r3, #1
 8009e72:	b29a      	uxth	r2, r3
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8009e7a:	bf00      	nop
 8009e7c:	3744      	adds	r7, #68	@ 0x44
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e84:	4770      	bx	lr

08009e86 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b088      	sub	sp, #32
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	e853 3f00 	ldrex	r3, [r3]
 8009e9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ea2:	61fb      	str	r3, [r7, #28]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	61bb      	str	r3, [r7, #24]
 8009eae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb0:	6979      	ldr	r1, [r7, #20]
 8009eb2:	69ba      	ldr	r2, [r7, #24]
 8009eb4:	e841 2300 	strex	r3, r2, [r1]
 8009eb8:	613b      	str	r3, [r7, #16]
   return(result);
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d1e6      	bne.n	8009e8e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2220      	movs	r2, #32
 8009ec4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f7ff f999 	bl	8009204 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ed2:	bf00      	nop
 8009ed4:	3720      	adds	r7, #32
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}

08009eda <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b09c      	sub	sp, #112	@ 0x70
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009ee8:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ef2:	2b22      	cmp	r3, #34	@ 0x22
 8009ef4:	f040 80b9 	bne.w	800a06a <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009efe:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009f02:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009f06:	b2d9      	uxtb	r1, r3
 8009f08:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009f0c:	b2da      	uxtb	r2, r3
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f12:	400a      	ands	r2, r1
 8009f14:	b2d2      	uxtb	r2, r2
 8009f16:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f1c:	1c5a      	adds	r2, r3, #1
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	3b01      	subs	r3, #1
 8009f2c:	b29a      	uxth	r2, r3
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	f040 809c 	bne.w	800a07a <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f4a:	e853 3f00 	ldrex	r3, [r3]
 8009f4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009f50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f56:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009f60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009f62:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f64:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009f66:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f68:	e841 2300 	strex	r3, r2, [r1]
 8009f6c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009f6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d1e6      	bne.n	8009f42 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	3308      	adds	r3, #8
 8009f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f7e:	e853 3f00 	ldrex	r3, [r3]
 8009f82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f86:	f023 0301 	bic.w	r3, r3, #1
 8009f8a:	667b      	str	r3, [r7, #100]	@ 0x64
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	3308      	adds	r3, #8
 8009f92:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009f94:	647a      	str	r2, [r7, #68]	@ 0x44
 8009f96:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f9c:	e841 2300 	strex	r3, r2, [r1]
 8009fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d1e5      	bne.n	8009f74 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2220      	movs	r2, #32
 8009fac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d018      	beq.n	8009ffc <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fd2:	e853 3f00 	ldrex	r3, [r3]
 8009fd6:	623b      	str	r3, [r7, #32]
   return(result);
 8009fd8:	6a3b      	ldr	r3, [r7, #32]
 8009fda:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009fde:	663b      	str	r3, [r7, #96]	@ 0x60
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	461a      	mov	r2, r3
 8009fe6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009fe8:	633b      	str	r3, [r7, #48]	@ 0x30
 8009fea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009fee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ff0:	e841 2300 	strex	r3, r2, [r1]
 8009ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d1e6      	bne.n	8009fca <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a000:	2b01      	cmp	r3, #1
 800a002:	d12e      	bne.n	800a062 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2200      	movs	r2, #0
 800a008:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	e853 3f00 	ldrex	r3, [r3]
 800a016:	60fb      	str	r3, [r7, #12]
   return(result);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f023 0310 	bic.w	r3, r3, #16
 800a01e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	461a      	mov	r2, r3
 800a026:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a028:	61fb      	str	r3, [r7, #28]
 800a02a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02c:	69b9      	ldr	r1, [r7, #24]
 800a02e:	69fa      	ldr	r2, [r7, #28]
 800a030:	e841 2300 	strex	r3, r2, [r1]
 800a034:	617b      	str	r3, [r7, #20]
   return(result);
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d1e6      	bne.n	800a00a <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	69db      	ldr	r3, [r3, #28]
 800a042:	f003 0310 	and.w	r3, r3, #16
 800a046:	2b10      	cmp	r3, #16
 800a048:	d103      	bne.n	800a052 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	2210      	movs	r2, #16
 800a050:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a058:	4619      	mov	r1, r3
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f7ff f8e6 	bl	800922c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a060:	e00b      	b.n	800a07a <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f7f9 fd16 	bl	8003a94 <HAL_UART_RxCpltCallback>
}
 800a068:	e007      	b.n	800a07a <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	699a      	ldr	r2, [r3, #24]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f042 0208 	orr.w	r2, r2, #8
 800a078:	619a      	str	r2, [r3, #24]
}
 800a07a:	bf00      	nop
 800a07c:	3770      	adds	r7, #112	@ 0x70
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}

0800a082 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a082:	b580      	push	{r7, lr}
 800a084:	b09c      	sub	sp, #112	@ 0x70
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a090:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a09a:	2b22      	cmp	r3, #34	@ 0x22
 800a09c:	f040 80b9 	bne.w	800a212 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0a6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0ae:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a0b0:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a0b4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a0b8:	4013      	ands	r3, r2
 800a0ba:	b29a      	uxth	r2, r3
 800a0bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a0be:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0c4:	1c9a      	adds	r2, r3, #2
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	3b01      	subs	r3, #1
 800a0d4:	b29a      	uxth	r2, r3
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	f040 809c 	bne.w	800a222 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0f2:	e853 3f00 	ldrex	r3, [r3]
 800a0f6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a0f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a0fe:	667b      	str	r3, [r7, #100]	@ 0x64
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	461a      	mov	r2, r3
 800a106:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a108:	657b      	str	r3, [r7, #84]	@ 0x54
 800a10a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a10c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a10e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a110:	e841 2300 	strex	r3, r2, [r1]
 800a114:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a116:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d1e6      	bne.n	800a0ea <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	3308      	adds	r3, #8
 800a122:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a126:	e853 3f00 	ldrex	r3, [r3]
 800a12a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a12e:	f023 0301 	bic.w	r3, r3, #1
 800a132:	663b      	str	r3, [r7, #96]	@ 0x60
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	3308      	adds	r3, #8
 800a13a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a13c:	643a      	str	r2, [r7, #64]	@ 0x40
 800a13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a140:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a142:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a144:	e841 2300 	strex	r3, r2, [r1]
 800a148:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a14a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d1e5      	bne.n	800a11c <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2220      	movs	r2, #32
 800a154:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2200      	movs	r2, #0
 800a15c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2200      	movs	r2, #0
 800a162:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d018      	beq.n	800a1a4 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a178:	6a3b      	ldr	r3, [r7, #32]
 800a17a:	e853 3f00 	ldrex	r3, [r3]
 800a17e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a180:	69fb      	ldr	r3, [r7, #28]
 800a182:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a186:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	461a      	mov	r2, r3
 800a18e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a190:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a192:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a194:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a196:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a198:	e841 2300 	strex	r3, r2, [r1]
 800a19c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a19e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d1e6      	bne.n	800a172 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d12e      	bne.n	800a20a <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	e853 3f00 	ldrex	r3, [r3]
 800a1be:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	f023 0310 	bic.w	r3, r3, #16
 800a1c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a1d0:	61bb      	str	r3, [r7, #24]
 800a1d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d4:	6979      	ldr	r1, [r7, #20]
 800a1d6:	69ba      	ldr	r2, [r7, #24]
 800a1d8:	e841 2300 	strex	r3, r2, [r1]
 800a1dc:	613b      	str	r3, [r7, #16]
   return(result);
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d1e6      	bne.n	800a1b2 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	69db      	ldr	r3, [r3, #28]
 800a1ea:	f003 0310 	and.w	r3, r3, #16
 800a1ee:	2b10      	cmp	r3, #16
 800a1f0:	d103      	bne.n	800a1fa <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	2210      	movs	r2, #16
 800a1f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a200:	4619      	mov	r1, r3
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f7ff f812 	bl	800922c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a208:	e00b      	b.n	800a222 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f7f9 fc42 	bl	8003a94 <HAL_UART_RxCpltCallback>
}
 800a210:	e007      	b.n	800a222 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	699a      	ldr	r2, [r3, #24]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f042 0208 	orr.w	r2, r2, #8
 800a220:	619a      	str	r2, [r3, #24]
}
 800a222:	bf00      	nop
 800a224:	3770      	adds	r7, #112	@ 0x70
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}

0800a22a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a22a:	b480      	push	{r7}
 800a22c:	b085      	sub	sp, #20
 800a22e:	af00      	add	r7, sp, #0
 800a230:	4603      	mov	r3, r0
 800a232:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a234:	2300      	movs	r3, #0
 800a236:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a238:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a23c:	2b84      	cmp	r3, #132	@ 0x84
 800a23e:	d005      	beq.n	800a24c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a240:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	4413      	add	r3, r2
 800a248:	3303      	adds	r3, #3
 800a24a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a24c:	68fb      	ldr	r3, [r7, #12]
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3714      	adds	r7, #20
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr

0800a25a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a25a:	b480      	push	{r7}
 800a25c:	b083      	sub	sp, #12
 800a25e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a260:	f3ef 8305 	mrs	r3, IPSR
 800a264:	607b      	str	r3, [r7, #4]
  return(result);
 800a266:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a268:	2b00      	cmp	r3, #0
 800a26a:	bf14      	ite	ne
 800a26c:	2301      	movne	r3, #1
 800a26e:	2300      	moveq	r3, #0
 800a270:	b2db      	uxtb	r3, r3
}
 800a272:	4618      	mov	r0, r3
 800a274:	370c      	adds	r7, #12
 800a276:	46bd      	mov	sp, r7
 800a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27c:	4770      	bx	lr

0800a27e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a282:	f000 fef7 	bl	800b074 <vTaskStartScheduler>
  
  return osOK;
 800a286:	2300      	movs	r3, #0
}
 800a288:	4618      	mov	r0, r3
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a28c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a28e:	b089      	sub	sp, #36	@ 0x24
 800a290:	af04      	add	r7, sp, #16
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	695b      	ldr	r3, [r3, #20]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d020      	beq.n	800a2e0 <osThreadCreate+0x54>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	699b      	ldr	r3, [r3, #24]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d01c      	beq.n	800a2e0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	685c      	ldr	r4, [r3, #4]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	691e      	ldr	r6, [r3, #16]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f7ff ffb6 	bl	800a22a <makeFreeRtosPriority>
 800a2be:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	695b      	ldr	r3, [r3, #20]
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a2c8:	9202      	str	r2, [sp, #8]
 800a2ca:	9301      	str	r3, [sp, #4]
 800a2cc:	9100      	str	r1, [sp, #0]
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	4632      	mov	r2, r6
 800a2d2:	4629      	mov	r1, r5
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	f000 fcdd 	bl	800ac94 <xTaskCreateStatic>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	60fb      	str	r3, [r7, #12]
 800a2de:	e01c      	b.n	800a31a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	685c      	ldr	r4, [r3, #4]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a2ec:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f7ff ff98 	bl	800a22a <makeFreeRtosPriority>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	f107 030c 	add.w	r3, r7, #12
 800a300:	9301      	str	r3, [sp, #4]
 800a302:	9200      	str	r2, [sp, #0]
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	4632      	mov	r2, r6
 800a308:	4629      	mov	r1, r5
 800a30a:	4620      	mov	r0, r4
 800a30c:	f000 fd28 	bl	800ad60 <xTaskCreate>
 800a310:	4603      	mov	r3, r0
 800a312:	2b01      	cmp	r3, #1
 800a314:	d001      	beq.n	800a31a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a316:	2300      	movs	r3, #0
 800a318:	e000      	b.n	800a31c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a31a:	68fb      	ldr	r3, [r7, #12]
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3714      	adds	r7, #20
 800a320:	46bd      	mov	sp, r7
 800a322:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a324 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d001      	beq.n	800a33a <osDelay+0x16>
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	e000      	b.n	800a33c <osDelay+0x18>
 800a33a:	2301      	movs	r3, #1
 800a33c:	4618      	mov	r0, r3
 800a33e:	f000 fe61 	bl	800b004 <vTaskDelay>
  
  return osOK;
 800a342:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a344:	4618      	mov	r0, r3
 800a346:	3710      	adds	r7, #16
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a34c:	b590      	push	{r4, r7, lr}
 800a34e:	b085      	sub	sp, #20
 800a350:	af02      	add	r7, sp, #8
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	689b      	ldr	r3, [r3, #8]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d011      	beq.n	800a382 <osMessageCreate+0x36>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	68db      	ldr	r3, [r3, #12]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d00d      	beq.n	800a382 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6818      	ldr	r0, [r3, #0]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6859      	ldr	r1, [r3, #4]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	689a      	ldr	r2, [r3, #8]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	2400      	movs	r4, #0
 800a378:	9400      	str	r4, [sp, #0]
 800a37a:	f000 f9a3 	bl	800a6c4 <xQueueGenericCreateStatic>
 800a37e:	4603      	mov	r3, r0
 800a380:	e008      	b.n	800a394 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6818      	ldr	r0, [r3, #0]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	4619      	mov	r1, r3
 800a38e:	f000 fa20 	bl	800a7d2 <xQueueGenericCreate>
 800a392:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a394:	4618      	mov	r0, r3
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd90      	pop	{r4, r7, pc}

0800a39c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a39c:	b590      	push	{r4, r7, lr}
 800a39e:	b08b      	sub	sp, #44	@ 0x2c
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d10a      	bne.n	800a3cc <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a3b6:	2380      	movs	r3, #128	@ 0x80
 800a3b8:	617b      	str	r3, [r7, #20]
    return event;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	461c      	mov	r4, r3
 800a3be:	f107 0314 	add.w	r3, r7, #20
 800a3c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a3c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a3ca:	e054      	b.n	800a476 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3da:	d103      	bne.n	800a3e4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a3dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a3e0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a3e2:	e009      	b.n	800a3f8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d006      	beq.n	800a3f8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800a3ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d101      	bne.n	800a3f8 <osMessageGet+0x5c>
      ticks = 1;
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a3f8:	f7ff ff2f 	bl	800a25a <inHandlerMode>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d01c      	beq.n	800a43c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a402:	f107 0220 	add.w	r2, r7, #32
 800a406:	f107 0314 	add.w	r3, r7, #20
 800a40a:	3304      	adds	r3, #4
 800a40c:	4619      	mov	r1, r3
 800a40e:	68b8      	ldr	r0, [r7, #8]
 800a410:	f000 fb2a 	bl	800aa68 <xQueueReceiveFromISR>
 800a414:	4603      	mov	r3, r0
 800a416:	2b01      	cmp	r3, #1
 800a418:	d102      	bne.n	800a420 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a41a:	2310      	movs	r3, #16
 800a41c:	617b      	str	r3, [r7, #20]
 800a41e:	e001      	b.n	800a424 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a420:	2300      	movs	r3, #0
 800a422:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a424:	6a3b      	ldr	r3, [r7, #32]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d01d      	beq.n	800a466 <osMessageGet+0xca>
 800a42a:	4b15      	ldr	r3, [pc, #84]	@ (800a480 <osMessageGet+0xe4>)
 800a42c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a430:	601a      	str	r2, [r3, #0]
 800a432:	f3bf 8f4f 	dsb	sy
 800a436:	f3bf 8f6f 	isb	sy
 800a43a:	e014      	b.n	800a466 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a43c:	f107 0314 	add.w	r3, r7, #20
 800a440:	3304      	adds	r3, #4
 800a442:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a444:	4619      	mov	r1, r3
 800a446:	68b8      	ldr	r0, [r7, #8]
 800a448:	f000 fa26 	bl	800a898 <xQueueReceive>
 800a44c:	4603      	mov	r3, r0
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d102      	bne.n	800a458 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a452:	2310      	movs	r3, #16
 800a454:	617b      	str	r3, [r7, #20]
 800a456:	e006      	b.n	800a466 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d101      	bne.n	800a462 <osMessageGet+0xc6>
 800a45e:	2300      	movs	r3, #0
 800a460:	e000      	b.n	800a464 <osMessageGet+0xc8>
 800a462:	2340      	movs	r3, #64	@ 0x40
 800a464:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	461c      	mov	r4, r3
 800a46a:	f107 0314 	add.w	r3, r7, #20
 800a46e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a472:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a476:	68f8      	ldr	r0, [r7, #12]
 800a478:	372c      	adds	r7, #44	@ 0x2c
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd90      	pop	{r4, r7, pc}
 800a47e:	bf00      	nop
 800a480:	e000ed04 	.word	0xe000ed04

0800a484 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a484:	b480      	push	{r7}
 800a486:	b083      	sub	sp, #12
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f103 0208 	add.w	r2, r3, #8
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f04f 32ff 	mov.w	r2, #4294967295
 800a49c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f103 0208 	add.w	r2, r3, #8
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f103 0208 	add.w	r2, r3, #8
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a4b8:	bf00      	nop
 800a4ba:	370c      	adds	r7, #12
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a4d2:	bf00      	nop
 800a4d4:	370c      	adds	r7, #12
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr

0800a4de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4de:	b480      	push	{r7}
 800a4e0:	b085      	sub	sp, #20
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
 800a4e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	68fa      	ldr	r2, [r7, #12]
 800a4f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	689a      	ldr	r2, [r3, #8]
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	689b      	ldr	r3, [r3, #8]
 800a500:	683a      	ldr	r2, [r7, #0]
 800a502:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	683a      	ldr	r2, [r7, #0]
 800a508:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	687a      	ldr	r2, [r7, #4]
 800a50e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	1c5a      	adds	r2, r3, #1
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	601a      	str	r2, [r3, #0]
}
 800a51a:	bf00      	nop
 800a51c:	3714      	adds	r7, #20
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr

0800a526 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a526:	b480      	push	{r7}
 800a528:	b085      	sub	sp, #20
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	6078      	str	r0, [r7, #4]
 800a52e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a53c:	d103      	bne.n	800a546 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	691b      	ldr	r3, [r3, #16]
 800a542:	60fb      	str	r3, [r7, #12]
 800a544:	e00c      	b.n	800a560 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	3308      	adds	r3, #8
 800a54a:	60fb      	str	r3, [r7, #12]
 800a54c:	e002      	b.n	800a554 <vListInsert+0x2e>
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	60fb      	str	r3, [r7, #12]
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	68ba      	ldr	r2, [r7, #8]
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d2f6      	bcs.n	800a54e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	685a      	ldr	r2, [r3, #4]
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	683a      	ldr	r2, [r7, #0]
 800a56e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	68fa      	ldr	r2, [r7, #12]
 800a574:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	683a      	ldr	r2, [r7, #0]
 800a57a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	1c5a      	adds	r2, r3, #1
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	601a      	str	r2, [r3, #0]
}
 800a58c:	bf00      	nop
 800a58e:	3714      	adds	r7, #20
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr

0800a598 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a598:	b480      	push	{r7}
 800a59a:	b085      	sub	sp, #20
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	691b      	ldr	r3, [r3, #16]
 800a5a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	687a      	ldr	r2, [r7, #4]
 800a5ac:	6892      	ldr	r2, [r2, #8]
 800a5ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	689b      	ldr	r3, [r3, #8]
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	6852      	ldr	r2, [r2, #4]
 800a5b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d103      	bne.n	800a5cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	689a      	ldr	r2, [r3, #8]
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	1e5a      	subs	r2, r3, #1
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3714      	adds	r7, #20
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b084      	sub	sp, #16
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d10d      	bne.n	800a61c <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a604:	b672      	cpsid	i
 800a606:	f383 8811 	msr	BASEPRI, r3
 800a60a:	f3bf 8f6f 	isb	sy
 800a60e:	f3bf 8f4f 	dsb	sy
 800a612:	b662      	cpsie	i
 800a614:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a616:	bf00      	nop
 800a618:	bf00      	nop
 800a61a:	e7fd      	b.n	800a618 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800a61c:	f001 faee 	bl	800bbfc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a628:	68f9      	ldr	r1, [r7, #12]
 800a62a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a62c:	fb01 f303 	mul.w	r3, r1, r3
 800a630:	441a      	add	r2, r3
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2200      	movs	r2, #0
 800a63a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681a      	ldr	r2, [r3, #0]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681a      	ldr	r2, [r3, #0]
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a64c:	3b01      	subs	r3, #1
 800a64e:	68f9      	ldr	r1, [r7, #12]
 800a650:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a652:	fb01 f303 	mul.w	r3, r1, r3
 800a656:	441a      	add	r2, r3
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	22ff      	movs	r2, #255	@ 0xff
 800a660:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	22ff      	movs	r2, #255	@ 0xff
 800a668:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d114      	bne.n	800a69c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	691b      	ldr	r3, [r3, #16]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d01a      	beq.n	800a6b0 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	3310      	adds	r3, #16
 800a67e:	4618      	mov	r0, r3
 800a680:	f000 ff5e 	bl	800b540 <xTaskRemoveFromEventList>
 800a684:	4603      	mov	r3, r0
 800a686:	2b00      	cmp	r3, #0
 800a688:	d012      	beq.n	800a6b0 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a68a:	4b0d      	ldr	r3, [pc, #52]	@ (800a6c0 <xQueueGenericReset+0xd4>)
 800a68c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a690:	601a      	str	r2, [r3, #0]
 800a692:	f3bf 8f4f 	dsb	sy
 800a696:	f3bf 8f6f 	isb	sy
 800a69a:	e009      	b.n	800a6b0 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	3310      	adds	r3, #16
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7ff feef 	bl	800a484 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	3324      	adds	r3, #36	@ 0x24
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7ff feea 	bl	800a484 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a6b0:	f001 fada 	bl	800bc68 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a6b4:	2301      	movs	r3, #1
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3710      	adds	r7, #16
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
 800a6be:	bf00      	nop
 800a6c0:	e000ed04 	.word	0xe000ed04

0800a6c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b08e      	sub	sp, #56	@ 0x38
 800a6c8:	af02      	add	r7, sp, #8
 800a6ca:	60f8      	str	r0, [r7, #12]
 800a6cc:	60b9      	str	r1, [r7, #8]
 800a6ce:	607a      	str	r2, [r7, #4]
 800a6d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d10d      	bne.n	800a6f4 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800a6d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6dc:	b672      	cpsid	i
 800a6de:	f383 8811 	msr	BASEPRI, r3
 800a6e2:	f3bf 8f6f 	isb	sy
 800a6e6:	f3bf 8f4f 	dsb	sy
 800a6ea:	b662      	cpsie	i
 800a6ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a6ee:	bf00      	nop
 800a6f0:	bf00      	nop
 800a6f2:	e7fd      	b.n	800a6f0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d10d      	bne.n	800a716 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800a6fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6fe:	b672      	cpsid	i
 800a700:	f383 8811 	msr	BASEPRI, r3
 800a704:	f3bf 8f6f 	isb	sy
 800a708:	f3bf 8f4f 	dsb	sy
 800a70c:	b662      	cpsie	i
 800a70e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a710:	bf00      	nop
 800a712:	bf00      	nop
 800a714:	e7fd      	b.n	800a712 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d002      	beq.n	800a722 <xQueueGenericCreateStatic+0x5e>
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d001      	beq.n	800a726 <xQueueGenericCreateStatic+0x62>
 800a722:	2301      	movs	r3, #1
 800a724:	e000      	b.n	800a728 <xQueueGenericCreateStatic+0x64>
 800a726:	2300      	movs	r3, #0
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d10d      	bne.n	800a748 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800a72c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a730:	b672      	cpsid	i
 800a732:	f383 8811 	msr	BASEPRI, r3
 800a736:	f3bf 8f6f 	isb	sy
 800a73a:	f3bf 8f4f 	dsb	sy
 800a73e:	b662      	cpsie	i
 800a740:	623b      	str	r3, [r7, #32]
}
 800a742:	bf00      	nop
 800a744:	bf00      	nop
 800a746:	e7fd      	b.n	800a744 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d102      	bne.n	800a754 <xQueueGenericCreateStatic+0x90>
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d101      	bne.n	800a758 <xQueueGenericCreateStatic+0x94>
 800a754:	2301      	movs	r3, #1
 800a756:	e000      	b.n	800a75a <xQueueGenericCreateStatic+0x96>
 800a758:	2300      	movs	r3, #0
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d10d      	bne.n	800a77a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800a75e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a762:	b672      	cpsid	i
 800a764:	f383 8811 	msr	BASEPRI, r3
 800a768:	f3bf 8f6f 	isb	sy
 800a76c:	f3bf 8f4f 	dsb	sy
 800a770:	b662      	cpsie	i
 800a772:	61fb      	str	r3, [r7, #28]
}
 800a774:	bf00      	nop
 800a776:	bf00      	nop
 800a778:	e7fd      	b.n	800a776 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a77a:	2348      	movs	r3, #72	@ 0x48
 800a77c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	2b48      	cmp	r3, #72	@ 0x48
 800a782:	d00d      	beq.n	800a7a0 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800a784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a788:	b672      	cpsid	i
 800a78a:	f383 8811 	msr	BASEPRI, r3
 800a78e:	f3bf 8f6f 	isb	sy
 800a792:	f3bf 8f4f 	dsb	sy
 800a796:	b662      	cpsie	i
 800a798:	61bb      	str	r3, [r7, #24]
}
 800a79a:	bf00      	nop
 800a79c:	bf00      	nop
 800a79e:	e7fd      	b.n	800a79c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a7a0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a7a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d00d      	beq.n	800a7c8 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a7ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a7b4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a7b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ba:	9300      	str	r3, [sp, #0]
 800a7bc:	4613      	mov	r3, r2
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	68b9      	ldr	r1, [r7, #8]
 800a7c2:	68f8      	ldr	r0, [r7, #12]
 800a7c4:	f000 f848 	bl	800a858 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a7c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3730      	adds	r7, #48	@ 0x30
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	b08a      	sub	sp, #40	@ 0x28
 800a7d6:	af02      	add	r7, sp, #8
 800a7d8:	60f8      	str	r0, [r7, #12]
 800a7da:	60b9      	str	r1, [r7, #8]
 800a7dc:	4613      	mov	r3, r2
 800a7de:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d10d      	bne.n	800a802 <xQueueGenericCreate+0x30>
	__asm volatile
 800a7e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ea:	b672      	cpsid	i
 800a7ec:	f383 8811 	msr	BASEPRI, r3
 800a7f0:	f3bf 8f6f 	isb	sy
 800a7f4:	f3bf 8f4f 	dsb	sy
 800a7f8:	b662      	cpsie	i
 800a7fa:	613b      	str	r3, [r7, #16]
}
 800a7fc:	bf00      	nop
 800a7fe:	bf00      	nop
 800a800:	e7fd      	b.n	800a7fe <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d102      	bne.n	800a80e <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a808:	2300      	movs	r3, #0
 800a80a:	61fb      	str	r3, [r7, #28]
 800a80c:	e004      	b.n	800a818 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	68ba      	ldr	r2, [r7, #8]
 800a812:	fb02 f303 	mul.w	r3, r2, r3
 800a816:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a818:	69fb      	ldr	r3, [r7, #28]
 800a81a:	3348      	adds	r3, #72	@ 0x48
 800a81c:	4618      	mov	r0, r3
 800a81e:	f001 fb1b 	bl	800be58 <pvPortMalloc>
 800a822:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a824:	69bb      	ldr	r3, [r7, #24]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d011      	beq.n	800a84e <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a82a:	69bb      	ldr	r3, [r7, #24]
 800a82c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	3348      	adds	r3, #72	@ 0x48
 800a832:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a834:	69bb      	ldr	r3, [r7, #24]
 800a836:	2200      	movs	r2, #0
 800a838:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a83c:	79fa      	ldrb	r2, [r7, #7]
 800a83e:	69bb      	ldr	r3, [r7, #24]
 800a840:	9300      	str	r3, [sp, #0]
 800a842:	4613      	mov	r3, r2
 800a844:	697a      	ldr	r2, [r7, #20]
 800a846:	68b9      	ldr	r1, [r7, #8]
 800a848:	68f8      	ldr	r0, [r7, #12]
 800a84a:	f000 f805 	bl	800a858 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a84e:	69bb      	ldr	r3, [r7, #24]
	}
 800a850:	4618      	mov	r0, r3
 800a852:	3720      	adds	r7, #32
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b084      	sub	sp, #16
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	60b9      	str	r1, [r7, #8]
 800a862:	607a      	str	r2, [r7, #4]
 800a864:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d103      	bne.n	800a874 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a86c:	69bb      	ldr	r3, [r7, #24]
 800a86e:	69ba      	ldr	r2, [r7, #24]
 800a870:	601a      	str	r2, [r3, #0]
 800a872:	e002      	b.n	800a87a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a874:	69bb      	ldr	r3, [r7, #24]
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a87a:	69bb      	ldr	r3, [r7, #24]
 800a87c:	68fa      	ldr	r2, [r7, #12]
 800a87e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a880:	69bb      	ldr	r3, [r7, #24]
 800a882:	68ba      	ldr	r2, [r7, #8]
 800a884:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a886:	2101      	movs	r1, #1
 800a888:	69b8      	ldr	r0, [r7, #24]
 800a88a:	f7ff feaf 	bl	800a5ec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a88e:	bf00      	nop
 800a890:	3710      	adds	r7, #16
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
	...

0800a898 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b08c      	sub	sp, #48	@ 0x30
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	60f8      	str	r0, [r7, #12]
 800a8a0:	60b9      	str	r1, [r7, #8]
 800a8a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a8ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d10d      	bne.n	800a8ce <xQueueReceive+0x36>
	__asm volatile
 800a8b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8b6:	b672      	cpsid	i
 800a8b8:	f383 8811 	msr	BASEPRI, r3
 800a8bc:	f3bf 8f6f 	isb	sy
 800a8c0:	f3bf 8f4f 	dsb	sy
 800a8c4:	b662      	cpsie	i
 800a8c6:	623b      	str	r3, [r7, #32]
}
 800a8c8:	bf00      	nop
 800a8ca:	bf00      	nop
 800a8cc:	e7fd      	b.n	800a8ca <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d103      	bne.n	800a8dc <xQueueReceive+0x44>
 800a8d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d101      	bne.n	800a8e0 <xQueueReceive+0x48>
 800a8dc:	2301      	movs	r3, #1
 800a8de:	e000      	b.n	800a8e2 <xQueueReceive+0x4a>
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d10d      	bne.n	800a902 <xQueueReceive+0x6a>
	__asm volatile
 800a8e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8ea:	b672      	cpsid	i
 800a8ec:	f383 8811 	msr	BASEPRI, r3
 800a8f0:	f3bf 8f6f 	isb	sy
 800a8f4:	f3bf 8f4f 	dsb	sy
 800a8f8:	b662      	cpsie	i
 800a8fa:	61fb      	str	r3, [r7, #28]
}
 800a8fc:	bf00      	nop
 800a8fe:	bf00      	nop
 800a900:	e7fd      	b.n	800a8fe <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a902:	f000 ffeb 	bl	800b8dc <xTaskGetSchedulerState>
 800a906:	4603      	mov	r3, r0
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d102      	bne.n	800a912 <xQueueReceive+0x7a>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d101      	bne.n	800a916 <xQueueReceive+0x7e>
 800a912:	2301      	movs	r3, #1
 800a914:	e000      	b.n	800a918 <xQueueReceive+0x80>
 800a916:	2300      	movs	r3, #0
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d10d      	bne.n	800a938 <xQueueReceive+0xa0>
	__asm volatile
 800a91c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a920:	b672      	cpsid	i
 800a922:	f383 8811 	msr	BASEPRI, r3
 800a926:	f3bf 8f6f 	isb	sy
 800a92a:	f3bf 8f4f 	dsb	sy
 800a92e:	b662      	cpsie	i
 800a930:	61bb      	str	r3, [r7, #24]
}
 800a932:	bf00      	nop
 800a934:	bf00      	nop
 800a936:	e7fd      	b.n	800a934 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a938:	f001 f960 	bl	800bbfc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a93c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a93e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a940:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a944:	2b00      	cmp	r3, #0
 800a946:	d01f      	beq.n	800a988 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a948:	68b9      	ldr	r1, [r7, #8]
 800a94a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a94c:	f000 f914 	bl	800ab78 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a952:	1e5a      	subs	r2, r3, #1
 800a954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a956:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a95a:	691b      	ldr	r3, [r3, #16]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d00f      	beq.n	800a980 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a962:	3310      	adds	r3, #16
 800a964:	4618      	mov	r0, r3
 800a966:	f000 fdeb 	bl	800b540 <xTaskRemoveFromEventList>
 800a96a:	4603      	mov	r3, r0
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d007      	beq.n	800a980 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a970:	4b3c      	ldr	r3, [pc, #240]	@ (800aa64 <xQueueReceive+0x1cc>)
 800a972:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a976:	601a      	str	r2, [r3, #0]
 800a978:	f3bf 8f4f 	dsb	sy
 800a97c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a980:	f001 f972 	bl	800bc68 <vPortExitCritical>
				return pdPASS;
 800a984:	2301      	movs	r3, #1
 800a986:	e069      	b.n	800aa5c <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d103      	bne.n	800a996 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a98e:	f001 f96b 	bl	800bc68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a992:	2300      	movs	r3, #0
 800a994:	e062      	b.n	800aa5c <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d106      	bne.n	800a9aa <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a99c:	f107 0310 	add.w	r3, r7, #16
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f000 fe33 	bl	800b60c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9aa:	f001 f95d 	bl	800bc68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9ae:	f000 fbcf 	bl	800b150 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9b2:	f001 f923 	bl	800bbfc <vPortEnterCritical>
 800a9b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a9bc:	b25b      	sxtb	r3, r3
 800a9be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9c2:	d103      	bne.n	800a9cc <xQueueReceive+0x134>
 800a9c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a9cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a9d2:	b25b      	sxtb	r3, r3
 800a9d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9d8:	d103      	bne.n	800a9e2 <xQueueReceive+0x14a>
 800a9da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9dc:	2200      	movs	r2, #0
 800a9de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a9e2:	f001 f941 	bl	800bc68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a9e6:	1d3a      	adds	r2, r7, #4
 800a9e8:	f107 0310 	add.w	r3, r7, #16
 800a9ec:	4611      	mov	r1, r2
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f000 fe22 	bl	800b638 <xTaskCheckForTimeOut>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d123      	bne.n	800aa42 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a9fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a9fc:	f000 f934 	bl	800ac68 <prvIsQueueEmpty>
 800aa00:	4603      	mov	r3, r0
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d017      	beq.n	800aa36 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa08:	3324      	adds	r3, #36	@ 0x24
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	4611      	mov	r1, r2
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f000 fd6e 	bl	800b4f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa16:	f000 f8d5 	bl	800abc4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa1a:	f000 fba7 	bl	800b16c <xTaskResumeAll>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d189      	bne.n	800a938 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800aa24:	4b0f      	ldr	r3, [pc, #60]	@ (800aa64 <xQueueReceive+0x1cc>)
 800aa26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa2a:	601a      	str	r2, [r3, #0]
 800aa2c:	f3bf 8f4f 	dsb	sy
 800aa30:	f3bf 8f6f 	isb	sy
 800aa34:	e780      	b.n	800a938 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aa36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa38:	f000 f8c4 	bl	800abc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa3c:	f000 fb96 	bl	800b16c <xTaskResumeAll>
 800aa40:	e77a      	b.n	800a938 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aa42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa44:	f000 f8be 	bl	800abc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa48:	f000 fb90 	bl	800b16c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa4e:	f000 f90b 	bl	800ac68 <prvIsQueueEmpty>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	f43f af6f 	beq.w	800a938 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aa5a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3730      	adds	r7, #48	@ 0x30
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}
 800aa64:	e000ed04 	.word	0xe000ed04

0800aa68 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b08e      	sub	sp, #56	@ 0x38
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	60f8      	str	r0, [r7, #12]
 800aa70:	60b9      	str	r1, [r7, #8]
 800aa72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800aa78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d10d      	bne.n	800aa9a <xQueueReceiveFromISR+0x32>
	__asm volatile
 800aa7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa82:	b672      	cpsid	i
 800aa84:	f383 8811 	msr	BASEPRI, r3
 800aa88:	f3bf 8f6f 	isb	sy
 800aa8c:	f3bf 8f4f 	dsb	sy
 800aa90:	b662      	cpsie	i
 800aa92:	623b      	str	r3, [r7, #32]
}
 800aa94:	bf00      	nop
 800aa96:	bf00      	nop
 800aa98:	e7fd      	b.n	800aa96 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d103      	bne.n	800aaa8 <xQueueReceiveFromISR+0x40>
 800aaa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d101      	bne.n	800aaac <xQueueReceiveFromISR+0x44>
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	e000      	b.n	800aaae <xQueueReceiveFromISR+0x46>
 800aaac:	2300      	movs	r3, #0
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d10d      	bne.n	800aace <xQueueReceiveFromISR+0x66>
	__asm volatile
 800aab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aab6:	b672      	cpsid	i
 800aab8:	f383 8811 	msr	BASEPRI, r3
 800aabc:	f3bf 8f6f 	isb	sy
 800aac0:	f3bf 8f4f 	dsb	sy
 800aac4:	b662      	cpsie	i
 800aac6:	61fb      	str	r3, [r7, #28]
}
 800aac8:	bf00      	nop
 800aaca:	bf00      	nop
 800aacc:	e7fd      	b.n	800aaca <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aace:	f001 f97d 	bl	800bdcc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aad2:	f3ef 8211 	mrs	r2, BASEPRI
 800aad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aada:	b672      	cpsid	i
 800aadc:	f383 8811 	msr	BASEPRI, r3
 800aae0:	f3bf 8f6f 	isb	sy
 800aae4:	f3bf 8f4f 	dsb	sy
 800aae8:	b662      	cpsie	i
 800aaea:	61ba      	str	r2, [r7, #24]
 800aaec:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aaee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aaf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aaf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaf6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aaf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d02f      	beq.n	800ab5e <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800aafe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ab04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ab08:	68b9      	ldr	r1, [r7, #8]
 800ab0a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab0c:	f000 f834 	bl	800ab78 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ab10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab12:	1e5a      	subs	r2, r3, #1
 800ab14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab16:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ab18:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ab1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab20:	d112      	bne.n	800ab48 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab24:	691b      	ldr	r3, [r3, #16]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d016      	beq.n	800ab58 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab2c:	3310      	adds	r3, #16
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f000 fd06 	bl	800b540 <xTaskRemoveFromEventList>
 800ab34:	4603      	mov	r3, r0
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d00e      	beq.n	800ab58 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d00b      	beq.n	800ab58 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2201      	movs	r2, #1
 800ab44:	601a      	str	r2, [r3, #0]
 800ab46:	e007      	b.n	800ab58 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ab48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab4c:	3301      	adds	r3, #1
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	b25a      	sxtb	r2, r3
 800ab52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab5c:	e001      	b.n	800ab62 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab64:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ab6c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3738      	adds	r7, #56	@ 0x38
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <prvCopyDataFromQueue>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d018      	beq.n	800abbc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	68da      	ldr	r2, [r3, #12]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab92:	441a      	add	r2, r3
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	68da      	ldr	r2, [r3, #12]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	689b      	ldr	r3, [r3, #8]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d303      	bcc.n	800abac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681a      	ldr	r2, [r3, #0]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	68d9      	ldr	r1, [r3, #12]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abb4:	461a      	mov	r2, r3
 800abb6:	6838      	ldr	r0, [r7, #0]
 800abb8:	f002 fdbb 	bl	800d732 <memcpy>
	}
}
 800abbc:	bf00      	nop
 800abbe:	3708      	adds	r7, #8
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800abcc:	f001 f816 	bl	800bbfc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800abd6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800abd8:	e011      	b.n	800abfe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d012      	beq.n	800ac08 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	3324      	adds	r3, #36	@ 0x24
 800abe6:	4618      	mov	r0, r3
 800abe8:	f000 fcaa 	bl	800b540 <xTaskRemoveFromEventList>
 800abec:	4603      	mov	r3, r0
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d001      	beq.n	800abf6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800abf2:	f000 fd89 	bl	800b708 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800abf6:	7bfb      	ldrb	r3, [r7, #15]
 800abf8:	3b01      	subs	r3, #1
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800abfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	dce9      	bgt.n	800abda <prvUnlockQueue+0x16>
 800ac06:	e000      	b.n	800ac0a <prvUnlockQueue+0x46>
					break;
 800ac08:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	22ff      	movs	r2, #255	@ 0xff
 800ac0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ac12:	f001 f829 	bl	800bc68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ac16:	f000 fff1 	bl	800bbfc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ac20:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac22:	e011      	b.n	800ac48 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	691b      	ldr	r3, [r3, #16]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d012      	beq.n	800ac52 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	3310      	adds	r3, #16
 800ac30:	4618      	mov	r0, r3
 800ac32:	f000 fc85 	bl	800b540 <xTaskRemoveFromEventList>
 800ac36:	4603      	mov	r3, r0
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d001      	beq.n	800ac40 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ac3c:	f000 fd64 	bl	800b708 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ac40:	7bbb      	ldrb	r3, [r7, #14]
 800ac42:	3b01      	subs	r3, #1
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	dce9      	bgt.n	800ac24 <prvUnlockQueue+0x60>
 800ac50:	e000      	b.n	800ac54 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ac52:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	22ff      	movs	r2, #255	@ 0xff
 800ac58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ac5c:	f001 f804 	bl	800bc68 <vPortExitCritical>
}
 800ac60:	bf00      	nop
 800ac62:	3710      	adds	r7, #16
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b084      	sub	sp, #16
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac70:	f000 ffc4 	bl	800bbfc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d102      	bne.n	800ac82 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	60fb      	str	r3, [r7, #12]
 800ac80:	e001      	b.n	800ac86 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ac82:	2300      	movs	r3, #0
 800ac84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac86:	f000 ffef 	bl	800bc68 <vPortExitCritical>

	return xReturn;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3710      	adds	r7, #16
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}

0800ac94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b08e      	sub	sp, #56	@ 0x38
 800ac98:	af04      	add	r7, sp, #16
 800ac9a:	60f8      	str	r0, [r7, #12]
 800ac9c:	60b9      	str	r1, [r7, #8]
 800ac9e:	607a      	str	r2, [r7, #4]
 800aca0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d10d      	bne.n	800acc4 <xTaskCreateStatic+0x30>
	__asm volatile
 800aca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acac:	b672      	cpsid	i
 800acae:	f383 8811 	msr	BASEPRI, r3
 800acb2:	f3bf 8f6f 	isb	sy
 800acb6:	f3bf 8f4f 	dsb	sy
 800acba:	b662      	cpsie	i
 800acbc:	623b      	str	r3, [r7, #32]
}
 800acbe:	bf00      	nop
 800acc0:	bf00      	nop
 800acc2:	e7fd      	b.n	800acc0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800acc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d10d      	bne.n	800ace6 <xTaskCreateStatic+0x52>
	__asm volatile
 800acca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acce:	b672      	cpsid	i
 800acd0:	f383 8811 	msr	BASEPRI, r3
 800acd4:	f3bf 8f6f 	isb	sy
 800acd8:	f3bf 8f4f 	dsb	sy
 800acdc:	b662      	cpsie	i
 800acde:	61fb      	str	r3, [r7, #28]
}
 800ace0:	bf00      	nop
 800ace2:	bf00      	nop
 800ace4:	e7fd      	b.n	800ace2 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ace6:	23a0      	movs	r3, #160	@ 0xa0
 800ace8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	2ba0      	cmp	r3, #160	@ 0xa0
 800acee:	d00d      	beq.n	800ad0c <xTaskCreateStatic+0x78>
	__asm volatile
 800acf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acf4:	b672      	cpsid	i
 800acf6:	f383 8811 	msr	BASEPRI, r3
 800acfa:	f3bf 8f6f 	isb	sy
 800acfe:	f3bf 8f4f 	dsb	sy
 800ad02:	b662      	cpsie	i
 800ad04:	61bb      	str	r3, [r7, #24]
}
 800ad06:	bf00      	nop
 800ad08:	bf00      	nop
 800ad0a:	e7fd      	b.n	800ad08 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ad0c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ad0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d01e      	beq.n	800ad52 <xTaskCreateStatic+0xbe>
 800ad14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d01b      	beq.n	800ad52 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad1c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ad1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ad22:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ad24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad26:	2202      	movs	r2, #2
 800ad28:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	9303      	str	r3, [sp, #12]
 800ad30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad32:	9302      	str	r3, [sp, #8]
 800ad34:	f107 0314 	add.w	r3, r7, #20
 800ad38:	9301      	str	r3, [sp, #4]
 800ad3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad3c:	9300      	str	r3, [sp, #0]
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	687a      	ldr	r2, [r7, #4]
 800ad42:	68b9      	ldr	r1, [r7, #8]
 800ad44:	68f8      	ldr	r0, [r7, #12]
 800ad46:	f000 f851 	bl	800adec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad4a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ad4c:	f000 f8f0 	bl	800af30 <prvAddNewTaskToReadyList>
 800ad50:	e001      	b.n	800ad56 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800ad52:	2300      	movs	r3, #0
 800ad54:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ad56:	697b      	ldr	r3, [r7, #20]
	}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3728      	adds	r7, #40	@ 0x28
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b08c      	sub	sp, #48	@ 0x30
 800ad64:	af04      	add	r7, sp, #16
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	60b9      	str	r1, [r7, #8]
 800ad6a:	603b      	str	r3, [r7, #0]
 800ad6c:	4613      	mov	r3, r2
 800ad6e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ad70:	88fb      	ldrh	r3, [r7, #6]
 800ad72:	009b      	lsls	r3, r3, #2
 800ad74:	4618      	mov	r0, r3
 800ad76:	f001 f86f 	bl	800be58 <pvPortMalloc>
 800ad7a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d00e      	beq.n	800ada0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ad82:	20a0      	movs	r0, #160	@ 0xa0
 800ad84:	f001 f868 	bl	800be58 <pvPortMalloc>
 800ad88:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ad8a:	69fb      	ldr	r3, [r7, #28]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d003      	beq.n	800ad98 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ad90:	69fb      	ldr	r3, [r7, #28]
 800ad92:	697a      	ldr	r2, [r7, #20]
 800ad94:	631a      	str	r2, [r3, #48]	@ 0x30
 800ad96:	e005      	b.n	800ada4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ad98:	6978      	ldr	r0, [r7, #20]
 800ad9a:	f001 f92b 	bl	800bff4 <vPortFree>
 800ad9e:	e001      	b.n	800ada4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ada0:	2300      	movs	r3, #0
 800ada2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ada4:	69fb      	ldr	r3, [r7, #28]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d017      	beq.n	800adda <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800adaa:	69fb      	ldr	r3, [r7, #28]
 800adac:	2200      	movs	r2, #0
 800adae:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800adb2:	88fa      	ldrh	r2, [r7, #6]
 800adb4:	2300      	movs	r3, #0
 800adb6:	9303      	str	r3, [sp, #12]
 800adb8:	69fb      	ldr	r3, [r7, #28]
 800adba:	9302      	str	r3, [sp, #8]
 800adbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adbe:	9301      	str	r3, [sp, #4]
 800adc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adc2:	9300      	str	r3, [sp, #0]
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	68b9      	ldr	r1, [r7, #8]
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	f000 f80f 	bl	800adec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800adce:	69f8      	ldr	r0, [r7, #28]
 800add0:	f000 f8ae 	bl	800af30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800add4:	2301      	movs	r3, #1
 800add6:	61bb      	str	r3, [r7, #24]
 800add8:	e002      	b.n	800ade0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800adda:	f04f 33ff 	mov.w	r3, #4294967295
 800adde:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ade0:	69bb      	ldr	r3, [r7, #24]
	}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3720      	adds	r7, #32
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
	...

0800adec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b088      	sub	sp, #32
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	60f8      	str	r0, [r7, #12]
 800adf4:	60b9      	str	r1, [r7, #8]
 800adf6:	607a      	str	r2, [r7, #4]
 800adf8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800adfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800adfe:	6879      	ldr	r1, [r7, #4]
 800ae00:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ae04:	440b      	add	r3, r1
 800ae06:	009b      	lsls	r3, r3, #2
 800ae08:	4413      	add	r3, r2
 800ae0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ae0c:	69bb      	ldr	r3, [r7, #24]
 800ae0e:	f023 0307 	bic.w	r3, r3, #7
 800ae12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ae14:	69bb      	ldr	r3, [r7, #24]
 800ae16:	f003 0307 	and.w	r3, r3, #7
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d00d      	beq.n	800ae3a <prvInitialiseNewTask+0x4e>
	__asm volatile
 800ae1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae22:	b672      	cpsid	i
 800ae24:	f383 8811 	msr	BASEPRI, r3
 800ae28:	f3bf 8f6f 	isb	sy
 800ae2c:	f3bf 8f4f 	dsb	sy
 800ae30:	b662      	cpsie	i
 800ae32:	617b      	str	r3, [r7, #20]
}
 800ae34:	bf00      	nop
 800ae36:	bf00      	nop
 800ae38:	e7fd      	b.n	800ae36 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d01f      	beq.n	800ae80 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae40:	2300      	movs	r3, #0
 800ae42:	61fb      	str	r3, [r7, #28]
 800ae44:	e012      	b.n	800ae6c <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ae46:	68ba      	ldr	r2, [r7, #8]
 800ae48:	69fb      	ldr	r3, [r7, #28]
 800ae4a:	4413      	add	r3, r2
 800ae4c:	7819      	ldrb	r1, [r3, #0]
 800ae4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae50:	69fb      	ldr	r3, [r7, #28]
 800ae52:	4413      	add	r3, r2
 800ae54:	3334      	adds	r3, #52	@ 0x34
 800ae56:	460a      	mov	r2, r1
 800ae58:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ae5a:	68ba      	ldr	r2, [r7, #8]
 800ae5c:	69fb      	ldr	r3, [r7, #28]
 800ae5e:	4413      	add	r3, r2
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d006      	beq.n	800ae74 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae66:	69fb      	ldr	r3, [r7, #28]
 800ae68:	3301      	adds	r3, #1
 800ae6a:	61fb      	str	r3, [r7, #28]
 800ae6c:	69fb      	ldr	r3, [r7, #28]
 800ae6e:	2b0f      	cmp	r3, #15
 800ae70:	d9e9      	bls.n	800ae46 <prvInitialiseNewTask+0x5a>
 800ae72:	e000      	b.n	800ae76 <prvInitialiseNewTask+0x8a>
			{
				break;
 800ae74:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ae76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ae7e:	e003      	b.n	800ae88 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ae80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae82:	2200      	movs	r2, #0
 800ae84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ae88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae8a:	2b06      	cmp	r3, #6
 800ae8c:	d901      	bls.n	800ae92 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ae8e:	2306      	movs	r3, #6
 800ae90:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ae92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae96:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ae98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae9c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ae9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aea0:	2200      	movs	r2, #0
 800aea2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aea6:	3304      	adds	r3, #4
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f7ff fb0b 	bl	800a4c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aeae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeb0:	3318      	adds	r3, #24
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7ff fb06 	bl	800a4c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aeb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aebc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aec0:	f1c3 0207 	rsb	r2, r3, #7
 800aec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aec6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aecc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aed0:	2200      	movs	r2, #0
 800aed2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aed8:	2200      	movs	r2, #0
 800aeda:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800aede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aee0:	334c      	adds	r3, #76	@ 0x4c
 800aee2:	224c      	movs	r2, #76	@ 0x4c
 800aee4:	2100      	movs	r1, #0
 800aee6:	4618      	mov	r0, r3
 800aee8:	f002 facc 	bl	800d484 <memset>
 800aeec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeee:	4a0d      	ldr	r2, [pc, #52]	@ (800af24 <prvInitialiseNewTask+0x138>)
 800aef0:	651a      	str	r2, [r3, #80]	@ 0x50
 800aef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aef4:	4a0c      	ldr	r2, [pc, #48]	@ (800af28 <prvInitialiseNewTask+0x13c>)
 800aef6:	655a      	str	r2, [r3, #84]	@ 0x54
 800aef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aefa:	4a0c      	ldr	r2, [pc, #48]	@ (800af2c <prvInitialiseNewTask+0x140>)
 800aefc:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aefe:	683a      	ldr	r2, [r7, #0]
 800af00:	68f9      	ldr	r1, [r7, #12]
 800af02:	69b8      	ldr	r0, [r7, #24]
 800af04:	f000 fd6e 	bl	800b9e4 <pxPortInitialiseStack>
 800af08:	4602      	mov	r2, r0
 800af0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af0c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800af0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af10:	2b00      	cmp	r3, #0
 800af12:	d002      	beq.n	800af1a <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800af14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af1a:	bf00      	nop
 800af1c:	3720      	adds	r7, #32
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	20004a7c 	.word	0x20004a7c
 800af28:	20004ae4 	.word	0x20004ae4
 800af2c:	20004b4c 	.word	0x20004b4c

0800af30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b082      	sub	sp, #8
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800af38:	f000 fe60 	bl	800bbfc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800af3c:	4b2a      	ldr	r3, [pc, #168]	@ (800afe8 <prvAddNewTaskToReadyList+0xb8>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	3301      	adds	r3, #1
 800af42:	4a29      	ldr	r2, [pc, #164]	@ (800afe8 <prvAddNewTaskToReadyList+0xb8>)
 800af44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800af46:	4b29      	ldr	r3, [pc, #164]	@ (800afec <prvAddNewTaskToReadyList+0xbc>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d109      	bne.n	800af62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800af4e:	4a27      	ldr	r2, [pc, #156]	@ (800afec <prvAddNewTaskToReadyList+0xbc>)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800af54:	4b24      	ldr	r3, [pc, #144]	@ (800afe8 <prvAddNewTaskToReadyList+0xb8>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	2b01      	cmp	r3, #1
 800af5a:	d110      	bne.n	800af7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800af5c:	f000 fbf8 	bl	800b750 <prvInitialiseTaskLists>
 800af60:	e00d      	b.n	800af7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800af62:	4b23      	ldr	r3, [pc, #140]	@ (800aff0 <prvAddNewTaskToReadyList+0xc0>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d109      	bne.n	800af7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800af6a:	4b20      	ldr	r3, [pc, #128]	@ (800afec <prvAddNewTaskToReadyList+0xbc>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af74:	429a      	cmp	r2, r3
 800af76:	d802      	bhi.n	800af7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800af78:	4a1c      	ldr	r2, [pc, #112]	@ (800afec <prvAddNewTaskToReadyList+0xbc>)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800af7e:	4b1d      	ldr	r3, [pc, #116]	@ (800aff4 <prvAddNewTaskToReadyList+0xc4>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	3301      	adds	r3, #1
 800af84:	4a1b      	ldr	r2, [pc, #108]	@ (800aff4 <prvAddNewTaskToReadyList+0xc4>)
 800af86:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af8c:	2201      	movs	r2, #1
 800af8e:	409a      	lsls	r2, r3
 800af90:	4b19      	ldr	r3, [pc, #100]	@ (800aff8 <prvAddNewTaskToReadyList+0xc8>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	4313      	orrs	r3, r2
 800af96:	4a18      	ldr	r2, [pc, #96]	@ (800aff8 <prvAddNewTaskToReadyList+0xc8>)
 800af98:	6013      	str	r3, [r2, #0]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af9e:	4613      	mov	r3, r2
 800afa0:	009b      	lsls	r3, r3, #2
 800afa2:	4413      	add	r3, r2
 800afa4:	009b      	lsls	r3, r3, #2
 800afa6:	4a15      	ldr	r2, [pc, #84]	@ (800affc <prvAddNewTaskToReadyList+0xcc>)
 800afa8:	441a      	add	r2, r3
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	3304      	adds	r3, #4
 800afae:	4619      	mov	r1, r3
 800afb0:	4610      	mov	r0, r2
 800afb2:	f7ff fa94 	bl	800a4de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800afb6:	f000 fe57 	bl	800bc68 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800afba:	4b0d      	ldr	r3, [pc, #52]	@ (800aff0 <prvAddNewTaskToReadyList+0xc0>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d00e      	beq.n	800afe0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800afc2:	4b0a      	ldr	r3, [pc, #40]	@ (800afec <prvAddNewTaskToReadyList+0xbc>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afcc:	429a      	cmp	r2, r3
 800afce:	d207      	bcs.n	800afe0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800afd0:	4b0b      	ldr	r3, [pc, #44]	@ (800b000 <prvAddNewTaskToReadyList+0xd0>)
 800afd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afd6:	601a      	str	r2, [r3, #0]
 800afd8:	f3bf 8f4f 	dsb	sy
 800afdc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afe0:	bf00      	nop
 800afe2:	3708      	adds	r7, #8
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}
 800afe8:	20000e30 	.word	0x20000e30
 800afec:	20000d30 	.word	0x20000d30
 800aff0:	20000e3c 	.word	0x20000e3c
 800aff4:	20000e4c 	.word	0x20000e4c
 800aff8:	20000e38 	.word	0x20000e38
 800affc:	20000d34 	.word	0x20000d34
 800b000:	e000ed04 	.word	0xe000ed04

0800b004 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b00c:	2300      	movs	r3, #0
 800b00e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d01a      	beq.n	800b04c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b016:	4b15      	ldr	r3, [pc, #84]	@ (800b06c <vTaskDelay+0x68>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00d      	beq.n	800b03a <vTaskDelay+0x36>
	__asm volatile
 800b01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b022:	b672      	cpsid	i
 800b024:	f383 8811 	msr	BASEPRI, r3
 800b028:	f3bf 8f6f 	isb	sy
 800b02c:	f3bf 8f4f 	dsb	sy
 800b030:	b662      	cpsie	i
 800b032:	60bb      	str	r3, [r7, #8]
}
 800b034:	bf00      	nop
 800b036:	bf00      	nop
 800b038:	e7fd      	b.n	800b036 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800b03a:	f000 f889 	bl	800b150 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b03e:	2100      	movs	r1, #0
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f000 fc69 	bl	800b918 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b046:	f000 f891 	bl	800b16c <xTaskResumeAll>
 800b04a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d107      	bne.n	800b062 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800b052:	4b07      	ldr	r3, [pc, #28]	@ (800b070 <vTaskDelay+0x6c>)
 800b054:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b058:	601a      	str	r2, [r3, #0]
 800b05a:	f3bf 8f4f 	dsb	sy
 800b05e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b062:	bf00      	nop
 800b064:	3710      	adds	r7, #16
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	20000e58 	.word	0x20000e58
 800b070:	e000ed04 	.word	0xe000ed04

0800b074 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b08a      	sub	sp, #40	@ 0x28
 800b078:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b07a:	2300      	movs	r3, #0
 800b07c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b07e:	2300      	movs	r3, #0
 800b080:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b082:	463a      	mov	r2, r7
 800b084:	1d39      	adds	r1, r7, #4
 800b086:	f107 0308 	add.w	r3, r7, #8
 800b08a:	4618      	mov	r0, r3
 800b08c:	f7f7 f9b6 	bl	80023fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b090:	6839      	ldr	r1, [r7, #0]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	68ba      	ldr	r2, [r7, #8]
 800b096:	9202      	str	r2, [sp, #8]
 800b098:	9301      	str	r3, [sp, #4]
 800b09a:	2300      	movs	r3, #0
 800b09c:	9300      	str	r3, [sp, #0]
 800b09e:	2300      	movs	r3, #0
 800b0a0:	460a      	mov	r2, r1
 800b0a2:	4923      	ldr	r1, [pc, #140]	@ (800b130 <vTaskStartScheduler+0xbc>)
 800b0a4:	4823      	ldr	r0, [pc, #140]	@ (800b134 <vTaskStartScheduler+0xc0>)
 800b0a6:	f7ff fdf5 	bl	800ac94 <xTaskCreateStatic>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	4a22      	ldr	r2, [pc, #136]	@ (800b138 <vTaskStartScheduler+0xc4>)
 800b0ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b0b0:	4b21      	ldr	r3, [pc, #132]	@ (800b138 <vTaskStartScheduler+0xc4>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d002      	beq.n	800b0be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	617b      	str	r3, [r7, #20]
 800b0bc:	e001      	b.n	800b0c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d11d      	bne.n	800b104 <vTaskStartScheduler+0x90>
	__asm volatile
 800b0c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0cc:	b672      	cpsid	i
 800b0ce:	f383 8811 	msr	BASEPRI, r3
 800b0d2:	f3bf 8f6f 	isb	sy
 800b0d6:	f3bf 8f4f 	dsb	sy
 800b0da:	b662      	cpsie	i
 800b0dc:	613b      	str	r3, [r7, #16]
}
 800b0de:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b0e0:	4b16      	ldr	r3, [pc, #88]	@ (800b13c <vTaskStartScheduler+0xc8>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	334c      	adds	r3, #76	@ 0x4c
 800b0e6:	4a16      	ldr	r2, [pc, #88]	@ (800b140 <vTaskStartScheduler+0xcc>)
 800b0e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b0ea:	4b16      	ldr	r3, [pc, #88]	@ (800b144 <vTaskStartScheduler+0xd0>)
 800b0ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b0f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b0f2:	4b15      	ldr	r3, [pc, #84]	@ (800b148 <vTaskStartScheduler+0xd4>)
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b0f8:	4b14      	ldr	r3, [pc, #80]	@ (800b14c <vTaskStartScheduler+0xd8>)
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b0fe:	f000 fcff 	bl	800bb00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b102:	e011      	b.n	800b128 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b10a:	d10d      	bne.n	800b128 <vTaskStartScheduler+0xb4>
	__asm volatile
 800b10c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b110:	b672      	cpsid	i
 800b112:	f383 8811 	msr	BASEPRI, r3
 800b116:	f3bf 8f6f 	isb	sy
 800b11a:	f3bf 8f4f 	dsb	sy
 800b11e:	b662      	cpsie	i
 800b120:	60fb      	str	r3, [r7, #12]
}
 800b122:	bf00      	nop
 800b124:	bf00      	nop
 800b126:	e7fd      	b.n	800b124 <vTaskStartScheduler+0xb0>
}
 800b128:	bf00      	nop
 800b12a:	3718      	adds	r7, #24
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}
 800b130:	080112a8 	.word	0x080112a8
 800b134:	0800b721 	.word	0x0800b721
 800b138:	20000e54 	.word	0x20000e54
 800b13c:	20000d30 	.word	0x20000d30
 800b140:	2000025c 	.word	0x2000025c
 800b144:	20000e50 	.word	0x20000e50
 800b148:	20000e3c 	.word	0x20000e3c
 800b14c:	20000e34 	.word	0x20000e34

0800b150 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b150:	b480      	push	{r7}
 800b152:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b154:	4b04      	ldr	r3, [pc, #16]	@ (800b168 <vTaskSuspendAll+0x18>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	3301      	adds	r3, #1
 800b15a:	4a03      	ldr	r2, [pc, #12]	@ (800b168 <vTaskSuspendAll+0x18>)
 800b15c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b15e:	bf00      	nop
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr
 800b168:	20000e58 	.word	0x20000e58

0800b16c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b084      	sub	sp, #16
 800b170:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b172:	2300      	movs	r3, #0
 800b174:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b176:	2300      	movs	r3, #0
 800b178:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b17a:	4b43      	ldr	r3, [pc, #268]	@ (800b288 <xTaskResumeAll+0x11c>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d10d      	bne.n	800b19e <xTaskResumeAll+0x32>
	__asm volatile
 800b182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b186:	b672      	cpsid	i
 800b188:	f383 8811 	msr	BASEPRI, r3
 800b18c:	f3bf 8f6f 	isb	sy
 800b190:	f3bf 8f4f 	dsb	sy
 800b194:	b662      	cpsie	i
 800b196:	603b      	str	r3, [r7, #0]
}
 800b198:	bf00      	nop
 800b19a:	bf00      	nop
 800b19c:	e7fd      	b.n	800b19a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b19e:	f000 fd2d 	bl	800bbfc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b1a2:	4b39      	ldr	r3, [pc, #228]	@ (800b288 <xTaskResumeAll+0x11c>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	3b01      	subs	r3, #1
 800b1a8:	4a37      	ldr	r2, [pc, #220]	@ (800b288 <xTaskResumeAll+0x11c>)
 800b1aa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1ac:	4b36      	ldr	r3, [pc, #216]	@ (800b288 <xTaskResumeAll+0x11c>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d161      	bne.n	800b278 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b1b4:	4b35      	ldr	r3, [pc, #212]	@ (800b28c <xTaskResumeAll+0x120>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d05d      	beq.n	800b278 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b1bc:	e02e      	b.n	800b21c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1be:	4b34      	ldr	r3, [pc, #208]	@ (800b290 <xTaskResumeAll+0x124>)
 800b1c0:	68db      	ldr	r3, [r3, #12]
 800b1c2:	68db      	ldr	r3, [r3, #12]
 800b1c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	3318      	adds	r3, #24
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f7ff f9e4 	bl	800a598 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	3304      	adds	r3, #4
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f7ff f9df 	bl	800a598 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1de:	2201      	movs	r2, #1
 800b1e0:	409a      	lsls	r2, r3
 800b1e2:	4b2c      	ldr	r3, [pc, #176]	@ (800b294 <xTaskResumeAll+0x128>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	4a2a      	ldr	r2, [pc, #168]	@ (800b294 <xTaskResumeAll+0x128>)
 800b1ea:	6013      	str	r3, [r2, #0]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1f0:	4613      	mov	r3, r2
 800b1f2:	009b      	lsls	r3, r3, #2
 800b1f4:	4413      	add	r3, r2
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	4a27      	ldr	r2, [pc, #156]	@ (800b298 <xTaskResumeAll+0x12c>)
 800b1fa:	441a      	add	r2, r3
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	3304      	adds	r3, #4
 800b200:	4619      	mov	r1, r3
 800b202:	4610      	mov	r0, r2
 800b204:	f7ff f96b 	bl	800a4de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b20c:	4b23      	ldr	r3, [pc, #140]	@ (800b29c <xTaskResumeAll+0x130>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b212:	429a      	cmp	r2, r3
 800b214:	d302      	bcc.n	800b21c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800b216:	4b22      	ldr	r3, [pc, #136]	@ (800b2a0 <xTaskResumeAll+0x134>)
 800b218:	2201      	movs	r2, #1
 800b21a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b21c:	4b1c      	ldr	r3, [pc, #112]	@ (800b290 <xTaskResumeAll+0x124>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d1cc      	bne.n	800b1be <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d001      	beq.n	800b22e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b22a:	f000 fb37 	bl	800b89c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b22e:	4b1d      	ldr	r3, [pc, #116]	@ (800b2a4 <xTaskResumeAll+0x138>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d010      	beq.n	800b25c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b23a:	f000 f837 	bl	800b2ac <xTaskIncrementTick>
 800b23e:	4603      	mov	r3, r0
 800b240:	2b00      	cmp	r3, #0
 800b242:	d002      	beq.n	800b24a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800b244:	4b16      	ldr	r3, [pc, #88]	@ (800b2a0 <xTaskResumeAll+0x134>)
 800b246:	2201      	movs	r2, #1
 800b248:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	3b01      	subs	r3, #1
 800b24e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d1f1      	bne.n	800b23a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800b256:	4b13      	ldr	r3, [pc, #76]	@ (800b2a4 <xTaskResumeAll+0x138>)
 800b258:	2200      	movs	r2, #0
 800b25a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b25c:	4b10      	ldr	r3, [pc, #64]	@ (800b2a0 <xTaskResumeAll+0x134>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d009      	beq.n	800b278 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b264:	2301      	movs	r3, #1
 800b266:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b268:	4b0f      	ldr	r3, [pc, #60]	@ (800b2a8 <xTaskResumeAll+0x13c>)
 800b26a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b26e:	601a      	str	r2, [r3, #0]
 800b270:	f3bf 8f4f 	dsb	sy
 800b274:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b278:	f000 fcf6 	bl	800bc68 <vPortExitCritical>

	return xAlreadyYielded;
 800b27c:	68bb      	ldr	r3, [r7, #8]
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3710      	adds	r7, #16
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}
 800b286:	bf00      	nop
 800b288:	20000e58 	.word	0x20000e58
 800b28c:	20000e30 	.word	0x20000e30
 800b290:	20000df0 	.word	0x20000df0
 800b294:	20000e38 	.word	0x20000e38
 800b298:	20000d34 	.word	0x20000d34
 800b29c:	20000d30 	.word	0x20000d30
 800b2a0:	20000e44 	.word	0x20000e44
 800b2a4:	20000e40 	.word	0x20000e40
 800b2a8:	e000ed04 	.word	0xe000ed04

0800b2ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b086      	sub	sp, #24
 800b2b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2b6:	4b50      	ldr	r3, [pc, #320]	@ (800b3f8 <xTaskIncrementTick+0x14c>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	f040 808b 	bne.w	800b3d6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b2c0:	4b4e      	ldr	r3, [pc, #312]	@ (800b3fc <xTaskIncrementTick+0x150>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b2c8:	4a4c      	ldr	r2, [pc, #304]	@ (800b3fc <xTaskIncrementTick+0x150>)
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d123      	bne.n	800b31c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800b2d4:	4b4a      	ldr	r3, [pc, #296]	@ (800b400 <xTaskIncrementTick+0x154>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d00d      	beq.n	800b2fa <xTaskIncrementTick+0x4e>
	__asm volatile
 800b2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2e2:	b672      	cpsid	i
 800b2e4:	f383 8811 	msr	BASEPRI, r3
 800b2e8:	f3bf 8f6f 	isb	sy
 800b2ec:	f3bf 8f4f 	dsb	sy
 800b2f0:	b662      	cpsie	i
 800b2f2:	603b      	str	r3, [r7, #0]
}
 800b2f4:	bf00      	nop
 800b2f6:	bf00      	nop
 800b2f8:	e7fd      	b.n	800b2f6 <xTaskIncrementTick+0x4a>
 800b2fa:	4b41      	ldr	r3, [pc, #260]	@ (800b400 <xTaskIncrementTick+0x154>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	60fb      	str	r3, [r7, #12]
 800b300:	4b40      	ldr	r3, [pc, #256]	@ (800b404 <xTaskIncrementTick+0x158>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	4a3e      	ldr	r2, [pc, #248]	@ (800b400 <xTaskIncrementTick+0x154>)
 800b306:	6013      	str	r3, [r2, #0]
 800b308:	4a3e      	ldr	r2, [pc, #248]	@ (800b404 <xTaskIncrementTick+0x158>)
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	6013      	str	r3, [r2, #0]
 800b30e:	4b3e      	ldr	r3, [pc, #248]	@ (800b408 <xTaskIncrementTick+0x15c>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	3301      	adds	r3, #1
 800b314:	4a3c      	ldr	r2, [pc, #240]	@ (800b408 <xTaskIncrementTick+0x15c>)
 800b316:	6013      	str	r3, [r2, #0]
 800b318:	f000 fac0 	bl	800b89c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b31c:	4b3b      	ldr	r3, [pc, #236]	@ (800b40c <xTaskIncrementTick+0x160>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	693a      	ldr	r2, [r7, #16]
 800b322:	429a      	cmp	r2, r3
 800b324:	d348      	bcc.n	800b3b8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b326:	4b36      	ldr	r3, [pc, #216]	@ (800b400 <xTaskIncrementTick+0x154>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d104      	bne.n	800b33a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b330:	4b36      	ldr	r3, [pc, #216]	@ (800b40c <xTaskIncrementTick+0x160>)
 800b332:	f04f 32ff 	mov.w	r2, #4294967295
 800b336:	601a      	str	r2, [r3, #0]
					break;
 800b338:	e03e      	b.n	800b3b8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b33a:	4b31      	ldr	r3, [pc, #196]	@ (800b400 <xTaskIncrementTick+0x154>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	68db      	ldr	r3, [r3, #12]
 800b340:	68db      	ldr	r3, [r3, #12]
 800b342:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b34a:	693a      	ldr	r2, [r7, #16]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	429a      	cmp	r2, r3
 800b350:	d203      	bcs.n	800b35a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b352:	4a2e      	ldr	r2, [pc, #184]	@ (800b40c <xTaskIncrementTick+0x160>)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b358:	e02e      	b.n	800b3b8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	3304      	adds	r3, #4
 800b35e:	4618      	mov	r0, r3
 800b360:	f7ff f91a 	bl	800a598 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d004      	beq.n	800b376 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	3318      	adds	r3, #24
 800b370:	4618      	mov	r0, r3
 800b372:	f7ff f911 	bl	800a598 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b37a:	2201      	movs	r2, #1
 800b37c:	409a      	lsls	r2, r3
 800b37e:	4b24      	ldr	r3, [pc, #144]	@ (800b410 <xTaskIncrementTick+0x164>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	4313      	orrs	r3, r2
 800b384:	4a22      	ldr	r2, [pc, #136]	@ (800b410 <xTaskIncrementTick+0x164>)
 800b386:	6013      	str	r3, [r2, #0]
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b38c:	4613      	mov	r3, r2
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	4413      	add	r3, r2
 800b392:	009b      	lsls	r3, r3, #2
 800b394:	4a1f      	ldr	r2, [pc, #124]	@ (800b414 <xTaskIncrementTick+0x168>)
 800b396:	441a      	add	r2, r3
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	3304      	adds	r3, #4
 800b39c:	4619      	mov	r1, r3
 800b39e:	4610      	mov	r0, r2
 800b3a0:	f7ff f89d 	bl	800a4de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3a8:	4b1b      	ldr	r3, [pc, #108]	@ (800b418 <xTaskIncrementTick+0x16c>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d3b9      	bcc.n	800b326 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3b6:	e7b6      	b.n	800b326 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b3b8:	4b17      	ldr	r3, [pc, #92]	@ (800b418 <xTaskIncrementTick+0x16c>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3be:	4915      	ldr	r1, [pc, #84]	@ (800b414 <xTaskIncrementTick+0x168>)
 800b3c0:	4613      	mov	r3, r2
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	4413      	add	r3, r2
 800b3c6:	009b      	lsls	r3, r3, #2
 800b3c8:	440b      	add	r3, r1
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	2b01      	cmp	r3, #1
 800b3ce:	d907      	bls.n	800b3e0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	617b      	str	r3, [r7, #20]
 800b3d4:	e004      	b.n	800b3e0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b3d6:	4b11      	ldr	r3, [pc, #68]	@ (800b41c <xTaskIncrementTick+0x170>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	3301      	adds	r3, #1
 800b3dc:	4a0f      	ldr	r2, [pc, #60]	@ (800b41c <xTaskIncrementTick+0x170>)
 800b3de:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b3e0:	4b0f      	ldr	r3, [pc, #60]	@ (800b420 <xTaskIncrementTick+0x174>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d001      	beq.n	800b3ec <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b3ec:	697b      	ldr	r3, [r7, #20]
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3718      	adds	r7, #24
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}
 800b3f6:	bf00      	nop
 800b3f8:	20000e58 	.word	0x20000e58
 800b3fc:	20000e34 	.word	0x20000e34
 800b400:	20000de8 	.word	0x20000de8
 800b404:	20000dec 	.word	0x20000dec
 800b408:	20000e48 	.word	0x20000e48
 800b40c:	20000e50 	.word	0x20000e50
 800b410:	20000e38 	.word	0x20000e38
 800b414:	20000d34 	.word	0x20000d34
 800b418:	20000d30 	.word	0x20000d30
 800b41c:	20000e40 	.word	0x20000e40
 800b420:	20000e44 	.word	0x20000e44

0800b424 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b424:	b480      	push	{r7}
 800b426:	b087      	sub	sp, #28
 800b428:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b42a:	4b2b      	ldr	r3, [pc, #172]	@ (800b4d8 <vTaskSwitchContext+0xb4>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d003      	beq.n	800b43a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b432:	4b2a      	ldr	r3, [pc, #168]	@ (800b4dc <vTaskSwitchContext+0xb8>)
 800b434:	2201      	movs	r2, #1
 800b436:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b438:	e047      	b.n	800b4ca <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b43a:	4b28      	ldr	r3, [pc, #160]	@ (800b4dc <vTaskSwitchContext+0xb8>)
 800b43c:	2200      	movs	r2, #0
 800b43e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b440:	4b27      	ldr	r3, [pc, #156]	@ (800b4e0 <vTaskSwitchContext+0xbc>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	fab3 f383 	clz	r3, r3
 800b44c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b44e:	7afb      	ldrb	r3, [r7, #11]
 800b450:	f1c3 031f 	rsb	r3, r3, #31
 800b454:	617b      	str	r3, [r7, #20]
 800b456:	4923      	ldr	r1, [pc, #140]	@ (800b4e4 <vTaskSwitchContext+0xc0>)
 800b458:	697a      	ldr	r2, [r7, #20]
 800b45a:	4613      	mov	r3, r2
 800b45c:	009b      	lsls	r3, r3, #2
 800b45e:	4413      	add	r3, r2
 800b460:	009b      	lsls	r3, r3, #2
 800b462:	440b      	add	r3, r1
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d10d      	bne.n	800b486 <vTaskSwitchContext+0x62>
	__asm volatile
 800b46a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b46e:	b672      	cpsid	i
 800b470:	f383 8811 	msr	BASEPRI, r3
 800b474:	f3bf 8f6f 	isb	sy
 800b478:	f3bf 8f4f 	dsb	sy
 800b47c:	b662      	cpsie	i
 800b47e:	607b      	str	r3, [r7, #4]
}
 800b480:	bf00      	nop
 800b482:	bf00      	nop
 800b484:	e7fd      	b.n	800b482 <vTaskSwitchContext+0x5e>
 800b486:	697a      	ldr	r2, [r7, #20]
 800b488:	4613      	mov	r3, r2
 800b48a:	009b      	lsls	r3, r3, #2
 800b48c:	4413      	add	r3, r2
 800b48e:	009b      	lsls	r3, r3, #2
 800b490:	4a14      	ldr	r2, [pc, #80]	@ (800b4e4 <vTaskSwitchContext+0xc0>)
 800b492:	4413      	add	r3, r2
 800b494:	613b      	str	r3, [r7, #16]
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	685a      	ldr	r2, [r3, #4]
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	605a      	str	r2, [r3, #4]
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	685a      	ldr	r2, [r3, #4]
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	3308      	adds	r3, #8
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	d104      	bne.n	800b4b6 <vTaskSwitchContext+0x92>
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	685a      	ldr	r2, [r3, #4]
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	605a      	str	r2, [r3, #4]
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	4a0a      	ldr	r2, [pc, #40]	@ (800b4e8 <vTaskSwitchContext+0xc4>)
 800b4be:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b4c0:	4b09      	ldr	r3, [pc, #36]	@ (800b4e8 <vTaskSwitchContext+0xc4>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	334c      	adds	r3, #76	@ 0x4c
 800b4c6:	4a09      	ldr	r2, [pc, #36]	@ (800b4ec <vTaskSwitchContext+0xc8>)
 800b4c8:	6013      	str	r3, [r2, #0]
}
 800b4ca:	bf00      	nop
 800b4cc:	371c      	adds	r7, #28
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d4:	4770      	bx	lr
 800b4d6:	bf00      	nop
 800b4d8:	20000e58 	.word	0x20000e58
 800b4dc:	20000e44 	.word	0x20000e44
 800b4e0:	20000e38 	.word	0x20000e38
 800b4e4:	20000d34 	.word	0x20000d34
 800b4e8:	20000d30 	.word	0x20000d30
 800b4ec:	2000025c 	.word	0x2000025c

0800b4f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d10d      	bne.n	800b51c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800b500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b504:	b672      	cpsid	i
 800b506:	f383 8811 	msr	BASEPRI, r3
 800b50a:	f3bf 8f6f 	isb	sy
 800b50e:	f3bf 8f4f 	dsb	sy
 800b512:	b662      	cpsie	i
 800b514:	60fb      	str	r3, [r7, #12]
}
 800b516:	bf00      	nop
 800b518:	bf00      	nop
 800b51a:	e7fd      	b.n	800b518 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b51c:	4b07      	ldr	r3, [pc, #28]	@ (800b53c <vTaskPlaceOnEventList+0x4c>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	3318      	adds	r3, #24
 800b522:	4619      	mov	r1, r3
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f7fe fffe 	bl	800a526 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b52a:	2101      	movs	r1, #1
 800b52c:	6838      	ldr	r0, [r7, #0]
 800b52e:	f000 f9f3 	bl	800b918 <prvAddCurrentTaskToDelayedList>
}
 800b532:	bf00      	nop
 800b534:	3710      	adds	r7, #16
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	20000d30 	.word	0x20000d30

0800b540 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b086      	sub	sp, #24
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	68db      	ldr	r3, [r3, #12]
 800b54c:	68db      	ldr	r3, [r3, #12]
 800b54e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d10d      	bne.n	800b572 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800b556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b55a:	b672      	cpsid	i
 800b55c:	f383 8811 	msr	BASEPRI, r3
 800b560:	f3bf 8f6f 	isb	sy
 800b564:	f3bf 8f4f 	dsb	sy
 800b568:	b662      	cpsie	i
 800b56a:	60fb      	str	r3, [r7, #12]
}
 800b56c:	bf00      	nop
 800b56e:	bf00      	nop
 800b570:	e7fd      	b.n	800b56e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	3318      	adds	r3, #24
 800b576:	4618      	mov	r0, r3
 800b578:	f7ff f80e 	bl	800a598 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b57c:	4b1d      	ldr	r3, [pc, #116]	@ (800b5f4 <xTaskRemoveFromEventList+0xb4>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d11c      	bne.n	800b5be <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	3304      	adds	r3, #4
 800b588:	4618      	mov	r0, r3
 800b58a:	f7ff f805 	bl	800a598 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b592:	2201      	movs	r2, #1
 800b594:	409a      	lsls	r2, r3
 800b596:	4b18      	ldr	r3, [pc, #96]	@ (800b5f8 <xTaskRemoveFromEventList+0xb8>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	4313      	orrs	r3, r2
 800b59c:	4a16      	ldr	r2, [pc, #88]	@ (800b5f8 <xTaskRemoveFromEventList+0xb8>)
 800b59e:	6013      	str	r3, [r2, #0]
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5a4:	4613      	mov	r3, r2
 800b5a6:	009b      	lsls	r3, r3, #2
 800b5a8:	4413      	add	r3, r2
 800b5aa:	009b      	lsls	r3, r3, #2
 800b5ac:	4a13      	ldr	r2, [pc, #76]	@ (800b5fc <xTaskRemoveFromEventList+0xbc>)
 800b5ae:	441a      	add	r2, r3
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	3304      	adds	r3, #4
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	4610      	mov	r0, r2
 800b5b8:	f7fe ff91 	bl	800a4de <vListInsertEnd>
 800b5bc:	e005      	b.n	800b5ca <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	3318      	adds	r3, #24
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	480e      	ldr	r0, [pc, #56]	@ (800b600 <xTaskRemoveFromEventList+0xc0>)
 800b5c6:	f7fe ff8a 	bl	800a4de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5ce:	4b0d      	ldr	r3, [pc, #52]	@ (800b604 <xTaskRemoveFromEventList+0xc4>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	d905      	bls.n	800b5e4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b5d8:	2301      	movs	r3, #1
 800b5da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b5dc:	4b0a      	ldr	r3, [pc, #40]	@ (800b608 <xTaskRemoveFromEventList+0xc8>)
 800b5de:	2201      	movs	r2, #1
 800b5e0:	601a      	str	r2, [r3, #0]
 800b5e2:	e001      	b.n	800b5e8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b5e8:	697b      	ldr	r3, [r7, #20]
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3718      	adds	r7, #24
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	20000e58 	.word	0x20000e58
 800b5f8:	20000e38 	.word	0x20000e38
 800b5fc:	20000d34 	.word	0x20000d34
 800b600:	20000df0 	.word	0x20000df0
 800b604:	20000d30 	.word	0x20000d30
 800b608:	20000e44 	.word	0x20000e44

0800b60c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b60c:	b480      	push	{r7}
 800b60e:	b083      	sub	sp, #12
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b614:	4b06      	ldr	r3, [pc, #24]	@ (800b630 <vTaskInternalSetTimeOutState+0x24>)
 800b616:	681a      	ldr	r2, [r3, #0]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b61c:	4b05      	ldr	r3, [pc, #20]	@ (800b634 <vTaskInternalSetTimeOutState+0x28>)
 800b61e:	681a      	ldr	r2, [r3, #0]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	605a      	str	r2, [r3, #4]
}
 800b624:	bf00      	nop
 800b626:	370c      	adds	r7, #12
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr
 800b630:	20000e48 	.word	0x20000e48
 800b634:	20000e34 	.word	0x20000e34

0800b638 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b088      	sub	sp, #32
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d10d      	bne.n	800b664 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800b648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b64c:	b672      	cpsid	i
 800b64e:	f383 8811 	msr	BASEPRI, r3
 800b652:	f3bf 8f6f 	isb	sy
 800b656:	f3bf 8f4f 	dsb	sy
 800b65a:	b662      	cpsie	i
 800b65c:	613b      	str	r3, [r7, #16]
}
 800b65e:	bf00      	nop
 800b660:	bf00      	nop
 800b662:	e7fd      	b.n	800b660 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d10d      	bne.n	800b686 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800b66a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b66e:	b672      	cpsid	i
 800b670:	f383 8811 	msr	BASEPRI, r3
 800b674:	f3bf 8f6f 	isb	sy
 800b678:	f3bf 8f4f 	dsb	sy
 800b67c:	b662      	cpsie	i
 800b67e:	60fb      	str	r3, [r7, #12]
}
 800b680:	bf00      	nop
 800b682:	bf00      	nop
 800b684:	e7fd      	b.n	800b682 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800b686:	f000 fab9 	bl	800bbfc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b68a:	4b1d      	ldr	r3, [pc, #116]	@ (800b700 <xTaskCheckForTimeOut+0xc8>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	69ba      	ldr	r2, [r7, #24]
 800b696:	1ad3      	subs	r3, r2, r3
 800b698:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6a2:	d102      	bne.n	800b6aa <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	61fb      	str	r3, [r7, #28]
 800b6a8:	e023      	b.n	800b6f2 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681a      	ldr	r2, [r3, #0]
 800b6ae:	4b15      	ldr	r3, [pc, #84]	@ (800b704 <xTaskCheckForTimeOut+0xcc>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	d007      	beq.n	800b6c6 <xTaskCheckForTimeOut+0x8e>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	69ba      	ldr	r2, [r7, #24]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d302      	bcc.n	800b6c6 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	61fb      	str	r3, [r7, #28]
 800b6c4:	e015      	b.n	800b6f2 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	697a      	ldr	r2, [r7, #20]
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	d20b      	bcs.n	800b6e8 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	681a      	ldr	r2, [r3, #0]
 800b6d4:	697b      	ldr	r3, [r7, #20]
 800b6d6:	1ad2      	subs	r2, r2, r3
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f7ff ff95 	bl	800b60c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	61fb      	str	r3, [r7, #28]
 800b6e6:	e004      	b.n	800b6f2 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b6f2:	f000 fab9 	bl	800bc68 <vPortExitCritical>

	return xReturn;
 800b6f6:	69fb      	ldr	r3, [r7, #28]
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3720      	adds	r7, #32
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}
 800b700:	20000e34 	.word	0x20000e34
 800b704:	20000e48 	.word	0x20000e48

0800b708 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b708:	b480      	push	{r7}
 800b70a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b70c:	4b03      	ldr	r3, [pc, #12]	@ (800b71c <vTaskMissedYield+0x14>)
 800b70e:	2201      	movs	r2, #1
 800b710:	601a      	str	r2, [r3, #0]
}
 800b712:	bf00      	nop
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr
 800b71c:	20000e44 	.word	0x20000e44

0800b720 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b082      	sub	sp, #8
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b728:	f000 f852 	bl	800b7d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b72c:	4b06      	ldr	r3, [pc, #24]	@ (800b748 <prvIdleTask+0x28>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	2b01      	cmp	r3, #1
 800b732:	d9f9      	bls.n	800b728 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b734:	4b05      	ldr	r3, [pc, #20]	@ (800b74c <prvIdleTask+0x2c>)
 800b736:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b73a:	601a      	str	r2, [r3, #0]
 800b73c:	f3bf 8f4f 	dsb	sy
 800b740:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b744:	e7f0      	b.n	800b728 <prvIdleTask+0x8>
 800b746:	bf00      	nop
 800b748:	20000d34 	.word	0x20000d34
 800b74c:	e000ed04 	.word	0xe000ed04

0800b750 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b082      	sub	sp, #8
 800b754:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b756:	2300      	movs	r3, #0
 800b758:	607b      	str	r3, [r7, #4]
 800b75a:	e00c      	b.n	800b776 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b75c:	687a      	ldr	r2, [r7, #4]
 800b75e:	4613      	mov	r3, r2
 800b760:	009b      	lsls	r3, r3, #2
 800b762:	4413      	add	r3, r2
 800b764:	009b      	lsls	r3, r3, #2
 800b766:	4a12      	ldr	r2, [pc, #72]	@ (800b7b0 <prvInitialiseTaskLists+0x60>)
 800b768:	4413      	add	r3, r2
 800b76a:	4618      	mov	r0, r3
 800b76c:	f7fe fe8a 	bl	800a484 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	3301      	adds	r3, #1
 800b774:	607b      	str	r3, [r7, #4]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2b06      	cmp	r3, #6
 800b77a:	d9ef      	bls.n	800b75c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b77c:	480d      	ldr	r0, [pc, #52]	@ (800b7b4 <prvInitialiseTaskLists+0x64>)
 800b77e:	f7fe fe81 	bl	800a484 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b782:	480d      	ldr	r0, [pc, #52]	@ (800b7b8 <prvInitialiseTaskLists+0x68>)
 800b784:	f7fe fe7e 	bl	800a484 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b788:	480c      	ldr	r0, [pc, #48]	@ (800b7bc <prvInitialiseTaskLists+0x6c>)
 800b78a:	f7fe fe7b 	bl	800a484 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b78e:	480c      	ldr	r0, [pc, #48]	@ (800b7c0 <prvInitialiseTaskLists+0x70>)
 800b790:	f7fe fe78 	bl	800a484 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b794:	480b      	ldr	r0, [pc, #44]	@ (800b7c4 <prvInitialiseTaskLists+0x74>)
 800b796:	f7fe fe75 	bl	800a484 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b79a:	4b0b      	ldr	r3, [pc, #44]	@ (800b7c8 <prvInitialiseTaskLists+0x78>)
 800b79c:	4a05      	ldr	r2, [pc, #20]	@ (800b7b4 <prvInitialiseTaskLists+0x64>)
 800b79e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b7a0:	4b0a      	ldr	r3, [pc, #40]	@ (800b7cc <prvInitialiseTaskLists+0x7c>)
 800b7a2:	4a05      	ldr	r2, [pc, #20]	@ (800b7b8 <prvInitialiseTaskLists+0x68>)
 800b7a4:	601a      	str	r2, [r3, #0]
}
 800b7a6:	bf00      	nop
 800b7a8:	3708      	adds	r7, #8
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
 800b7ae:	bf00      	nop
 800b7b0:	20000d34 	.word	0x20000d34
 800b7b4:	20000dc0 	.word	0x20000dc0
 800b7b8:	20000dd4 	.word	0x20000dd4
 800b7bc:	20000df0 	.word	0x20000df0
 800b7c0:	20000e04 	.word	0x20000e04
 800b7c4:	20000e1c 	.word	0x20000e1c
 800b7c8:	20000de8 	.word	0x20000de8
 800b7cc:	20000dec 	.word	0x20000dec

0800b7d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b082      	sub	sp, #8
 800b7d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b7d6:	e019      	b.n	800b80c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b7d8:	f000 fa10 	bl	800bbfc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7dc:	4b10      	ldr	r3, [pc, #64]	@ (800b820 <prvCheckTasksWaitingTermination+0x50>)
 800b7de:	68db      	ldr	r3, [r3, #12]
 800b7e0:	68db      	ldr	r3, [r3, #12]
 800b7e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	3304      	adds	r3, #4
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7fe fed5 	bl	800a598 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b7ee:	4b0d      	ldr	r3, [pc, #52]	@ (800b824 <prvCheckTasksWaitingTermination+0x54>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	3b01      	subs	r3, #1
 800b7f4:	4a0b      	ldr	r2, [pc, #44]	@ (800b824 <prvCheckTasksWaitingTermination+0x54>)
 800b7f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b7f8:	4b0b      	ldr	r3, [pc, #44]	@ (800b828 <prvCheckTasksWaitingTermination+0x58>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	3b01      	subs	r3, #1
 800b7fe:	4a0a      	ldr	r2, [pc, #40]	@ (800b828 <prvCheckTasksWaitingTermination+0x58>)
 800b800:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b802:	f000 fa31 	bl	800bc68 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f000 f810 	bl	800b82c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b80c:	4b06      	ldr	r3, [pc, #24]	@ (800b828 <prvCheckTasksWaitingTermination+0x58>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d1e1      	bne.n	800b7d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b814:	bf00      	nop
 800b816:	bf00      	nop
 800b818:	3708      	adds	r7, #8
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop
 800b820:	20000e04 	.word	0x20000e04
 800b824:	20000e30 	.word	0x20000e30
 800b828:	20000e18 	.word	0x20000e18

0800b82c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	334c      	adds	r3, #76	@ 0x4c
 800b838:	4618      	mov	r0, r3
 800b83a:	f001 fec1 	bl	800d5c0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800b844:	2b00      	cmp	r3, #0
 800b846:	d108      	bne.n	800b85a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b84c:	4618      	mov	r0, r3
 800b84e:	f000 fbd1 	bl	800bff4 <vPortFree>
				vPortFree( pxTCB );
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f000 fbce 	bl	800bff4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b858:	e01b      	b.n	800b892 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800b860:	2b01      	cmp	r3, #1
 800b862:	d103      	bne.n	800b86c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f000 fbc5 	bl	800bff4 <vPortFree>
	}
 800b86a:	e012      	b.n	800b892 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800b872:	2b02      	cmp	r3, #2
 800b874:	d00d      	beq.n	800b892 <prvDeleteTCB+0x66>
	__asm volatile
 800b876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b87a:	b672      	cpsid	i
 800b87c:	f383 8811 	msr	BASEPRI, r3
 800b880:	f3bf 8f6f 	isb	sy
 800b884:	f3bf 8f4f 	dsb	sy
 800b888:	b662      	cpsie	i
 800b88a:	60fb      	str	r3, [r7, #12]
}
 800b88c:	bf00      	nop
 800b88e:	bf00      	nop
 800b890:	e7fd      	b.n	800b88e <prvDeleteTCB+0x62>
	}
 800b892:	bf00      	nop
 800b894:	3710      	adds	r7, #16
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}
	...

0800b89c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b89c:	b480      	push	{r7}
 800b89e:	b083      	sub	sp, #12
 800b8a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8a2:	4b0c      	ldr	r3, [pc, #48]	@ (800b8d4 <prvResetNextTaskUnblockTime+0x38>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d104      	bne.n	800b8b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b8ac:	4b0a      	ldr	r3, [pc, #40]	@ (800b8d8 <prvResetNextTaskUnblockTime+0x3c>)
 800b8ae:	f04f 32ff 	mov.w	r2, #4294967295
 800b8b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b8b4:	e008      	b.n	800b8c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8b6:	4b07      	ldr	r3, [pc, #28]	@ (800b8d4 <prvResetNextTaskUnblockTime+0x38>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	68db      	ldr	r3, [r3, #12]
 800b8bc:	68db      	ldr	r3, [r3, #12]
 800b8be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	4a04      	ldr	r2, [pc, #16]	@ (800b8d8 <prvResetNextTaskUnblockTime+0x3c>)
 800b8c6:	6013      	str	r3, [r2, #0]
}
 800b8c8:	bf00      	nop
 800b8ca:	370c      	adds	r7, #12
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr
 800b8d4:	20000de8 	.word	0x20000de8
 800b8d8:	20000e50 	.word	0x20000e50

0800b8dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b8dc:	b480      	push	{r7}
 800b8de:	b083      	sub	sp, #12
 800b8e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b8e2:	4b0b      	ldr	r3, [pc, #44]	@ (800b910 <xTaskGetSchedulerState+0x34>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d102      	bne.n	800b8f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	607b      	str	r3, [r7, #4]
 800b8ee:	e008      	b.n	800b902 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8f0:	4b08      	ldr	r3, [pc, #32]	@ (800b914 <xTaskGetSchedulerState+0x38>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d102      	bne.n	800b8fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b8f8:	2302      	movs	r3, #2
 800b8fa:	607b      	str	r3, [r7, #4]
 800b8fc:	e001      	b.n	800b902 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b8fe:	2300      	movs	r3, #0
 800b900:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b902:	687b      	ldr	r3, [r7, #4]
	}
 800b904:	4618      	mov	r0, r3
 800b906:	370c      	adds	r7, #12
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr
 800b910:	20000e3c 	.word	0x20000e3c
 800b914:	20000e58 	.word	0x20000e58

0800b918 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b084      	sub	sp, #16
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b922:	4b29      	ldr	r3, [pc, #164]	@ (800b9c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b928:	4b28      	ldr	r3, [pc, #160]	@ (800b9cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	3304      	adds	r3, #4
 800b92e:	4618      	mov	r0, r3
 800b930:	f7fe fe32 	bl	800a598 <uxListRemove>
 800b934:	4603      	mov	r3, r0
 800b936:	2b00      	cmp	r3, #0
 800b938:	d10b      	bne.n	800b952 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b93a:	4b24      	ldr	r3, [pc, #144]	@ (800b9cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b940:	2201      	movs	r2, #1
 800b942:	fa02 f303 	lsl.w	r3, r2, r3
 800b946:	43da      	mvns	r2, r3
 800b948:	4b21      	ldr	r3, [pc, #132]	@ (800b9d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	4013      	ands	r3, r2
 800b94e:	4a20      	ldr	r2, [pc, #128]	@ (800b9d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b950:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b958:	d10a      	bne.n	800b970 <prvAddCurrentTaskToDelayedList+0x58>
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d007      	beq.n	800b970 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b960:	4b1a      	ldr	r3, [pc, #104]	@ (800b9cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	3304      	adds	r3, #4
 800b966:	4619      	mov	r1, r3
 800b968:	481a      	ldr	r0, [pc, #104]	@ (800b9d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b96a:	f7fe fdb8 	bl	800a4de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b96e:	e026      	b.n	800b9be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b970:	68fa      	ldr	r2, [r7, #12]
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	4413      	add	r3, r2
 800b976:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b978:	4b14      	ldr	r3, [pc, #80]	@ (800b9cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	68ba      	ldr	r2, [r7, #8]
 800b97e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b980:	68ba      	ldr	r2, [r7, #8]
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	429a      	cmp	r2, r3
 800b986:	d209      	bcs.n	800b99c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b988:	4b13      	ldr	r3, [pc, #76]	@ (800b9d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b98a:	681a      	ldr	r2, [r3, #0]
 800b98c:	4b0f      	ldr	r3, [pc, #60]	@ (800b9cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	3304      	adds	r3, #4
 800b992:	4619      	mov	r1, r3
 800b994:	4610      	mov	r0, r2
 800b996:	f7fe fdc6 	bl	800a526 <vListInsert>
}
 800b99a:	e010      	b.n	800b9be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b99c:	4b0f      	ldr	r3, [pc, #60]	@ (800b9dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800b99e:	681a      	ldr	r2, [r3, #0]
 800b9a0:	4b0a      	ldr	r3, [pc, #40]	@ (800b9cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	3304      	adds	r3, #4
 800b9a6:	4619      	mov	r1, r3
 800b9a8:	4610      	mov	r0, r2
 800b9aa:	f7fe fdbc 	bl	800a526 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b9ae:	4b0c      	ldr	r3, [pc, #48]	@ (800b9e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	68ba      	ldr	r2, [r7, #8]
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d202      	bcs.n	800b9be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b9b8:	4a09      	ldr	r2, [pc, #36]	@ (800b9e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	6013      	str	r3, [r2, #0]
}
 800b9be:	bf00      	nop
 800b9c0:	3710      	adds	r7, #16
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}
 800b9c6:	bf00      	nop
 800b9c8:	20000e34 	.word	0x20000e34
 800b9cc:	20000d30 	.word	0x20000d30
 800b9d0:	20000e38 	.word	0x20000e38
 800b9d4:	20000e1c 	.word	0x20000e1c
 800b9d8:	20000dec 	.word	0x20000dec
 800b9dc:	20000de8 	.word	0x20000de8
 800b9e0:	20000e50 	.word	0x20000e50

0800b9e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b085      	sub	sp, #20
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	3b04      	subs	r3, #4
 800b9f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b9fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	3b04      	subs	r3, #4
 800ba02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	f023 0201 	bic.w	r2, r3, #1
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	3b04      	subs	r3, #4
 800ba12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ba14:	4a0c      	ldr	r2, [pc, #48]	@ (800ba48 <pxPortInitialiseStack+0x64>)
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	3b14      	subs	r3, #20
 800ba1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	3b04      	subs	r3, #4
 800ba2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	f06f 0202 	mvn.w	r2, #2
 800ba32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	3b20      	subs	r3, #32
 800ba38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3714      	adds	r7, #20
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr
 800ba48:	0800ba4d 	.word	0x0800ba4d

0800ba4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b085      	sub	sp, #20
 800ba50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ba52:	2300      	movs	r3, #0
 800ba54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ba56:	4b15      	ldr	r3, [pc, #84]	@ (800baac <prvTaskExitError+0x60>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba5e:	d00d      	beq.n	800ba7c <prvTaskExitError+0x30>
	__asm volatile
 800ba60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba64:	b672      	cpsid	i
 800ba66:	f383 8811 	msr	BASEPRI, r3
 800ba6a:	f3bf 8f6f 	isb	sy
 800ba6e:	f3bf 8f4f 	dsb	sy
 800ba72:	b662      	cpsie	i
 800ba74:	60fb      	str	r3, [r7, #12]
}
 800ba76:	bf00      	nop
 800ba78:	bf00      	nop
 800ba7a:	e7fd      	b.n	800ba78 <prvTaskExitError+0x2c>
	__asm volatile
 800ba7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba80:	b672      	cpsid	i
 800ba82:	f383 8811 	msr	BASEPRI, r3
 800ba86:	f3bf 8f6f 	isb	sy
 800ba8a:	f3bf 8f4f 	dsb	sy
 800ba8e:	b662      	cpsie	i
 800ba90:	60bb      	str	r3, [r7, #8]
}
 800ba92:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ba94:	bf00      	nop
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d0fc      	beq.n	800ba96 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ba9c:	bf00      	nop
 800ba9e:	bf00      	nop
 800baa0:	3714      	adds	r7, #20
 800baa2:	46bd      	mov	sp, r7
 800baa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa8:	4770      	bx	lr
 800baaa:	bf00      	nop
 800baac:	2000024c 	.word	0x2000024c

0800bab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bab0:	4b07      	ldr	r3, [pc, #28]	@ (800bad0 <pxCurrentTCBConst2>)
 800bab2:	6819      	ldr	r1, [r3, #0]
 800bab4:	6808      	ldr	r0, [r1, #0]
 800bab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baba:	f380 8809 	msr	PSP, r0
 800babe:	f3bf 8f6f 	isb	sy
 800bac2:	f04f 0000 	mov.w	r0, #0
 800bac6:	f380 8811 	msr	BASEPRI, r0
 800baca:	4770      	bx	lr
 800bacc:	f3af 8000 	nop.w

0800bad0 <pxCurrentTCBConst2>:
 800bad0:	20000d30 	.word	0x20000d30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bad4:	bf00      	nop
 800bad6:	bf00      	nop

0800bad8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bad8:	4808      	ldr	r0, [pc, #32]	@ (800bafc <prvPortStartFirstTask+0x24>)
 800bada:	6800      	ldr	r0, [r0, #0]
 800badc:	6800      	ldr	r0, [r0, #0]
 800bade:	f380 8808 	msr	MSP, r0
 800bae2:	f04f 0000 	mov.w	r0, #0
 800bae6:	f380 8814 	msr	CONTROL, r0
 800baea:	b662      	cpsie	i
 800baec:	b661      	cpsie	f
 800baee:	f3bf 8f4f 	dsb	sy
 800baf2:	f3bf 8f6f 	isb	sy
 800baf6:	df00      	svc	0
 800baf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bafa:	bf00      	nop
 800bafc:	e000ed08 	.word	0xe000ed08

0800bb00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bb06:	4b37      	ldr	r3, [pc, #220]	@ (800bbe4 <xPortStartScheduler+0xe4>)
 800bb08:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	781b      	ldrb	r3, [r3, #0]
 800bb0e:	b2db      	uxtb	r3, r3
 800bb10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	22ff      	movs	r2, #255	@ 0xff
 800bb16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	b2db      	uxtb	r3, r3
 800bb1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bb20:	78fb      	ldrb	r3, [r7, #3]
 800bb22:	b2db      	uxtb	r3, r3
 800bb24:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bb28:	b2da      	uxtb	r2, r3
 800bb2a:	4b2f      	ldr	r3, [pc, #188]	@ (800bbe8 <xPortStartScheduler+0xe8>)
 800bb2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bb2e:	4b2f      	ldr	r3, [pc, #188]	@ (800bbec <xPortStartScheduler+0xec>)
 800bb30:	2207      	movs	r2, #7
 800bb32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb34:	e009      	b.n	800bb4a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800bb36:	4b2d      	ldr	r3, [pc, #180]	@ (800bbec <xPortStartScheduler+0xec>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	3b01      	subs	r3, #1
 800bb3c:	4a2b      	ldr	r2, [pc, #172]	@ (800bbec <xPortStartScheduler+0xec>)
 800bb3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bb40:	78fb      	ldrb	r3, [r7, #3]
 800bb42:	b2db      	uxtb	r3, r3
 800bb44:	005b      	lsls	r3, r3, #1
 800bb46:	b2db      	uxtb	r3, r3
 800bb48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb4a:	78fb      	ldrb	r3, [r7, #3]
 800bb4c:	b2db      	uxtb	r3, r3
 800bb4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb52:	2b80      	cmp	r3, #128	@ 0x80
 800bb54:	d0ef      	beq.n	800bb36 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bb56:	4b25      	ldr	r3, [pc, #148]	@ (800bbec <xPortStartScheduler+0xec>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f1c3 0307 	rsb	r3, r3, #7
 800bb5e:	2b04      	cmp	r3, #4
 800bb60:	d00d      	beq.n	800bb7e <xPortStartScheduler+0x7e>
	__asm volatile
 800bb62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb66:	b672      	cpsid	i
 800bb68:	f383 8811 	msr	BASEPRI, r3
 800bb6c:	f3bf 8f6f 	isb	sy
 800bb70:	f3bf 8f4f 	dsb	sy
 800bb74:	b662      	cpsie	i
 800bb76:	60bb      	str	r3, [r7, #8]
}
 800bb78:	bf00      	nop
 800bb7a:	bf00      	nop
 800bb7c:	e7fd      	b.n	800bb7a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bb7e:	4b1b      	ldr	r3, [pc, #108]	@ (800bbec <xPortStartScheduler+0xec>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	021b      	lsls	r3, r3, #8
 800bb84:	4a19      	ldr	r2, [pc, #100]	@ (800bbec <xPortStartScheduler+0xec>)
 800bb86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bb88:	4b18      	ldr	r3, [pc, #96]	@ (800bbec <xPortStartScheduler+0xec>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bb90:	4a16      	ldr	r2, [pc, #88]	@ (800bbec <xPortStartScheduler+0xec>)
 800bb92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	b2da      	uxtb	r2, r3
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bb9c:	4b14      	ldr	r3, [pc, #80]	@ (800bbf0 <xPortStartScheduler+0xf0>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	4a13      	ldr	r2, [pc, #76]	@ (800bbf0 <xPortStartScheduler+0xf0>)
 800bba2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bba6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bba8:	4b11      	ldr	r3, [pc, #68]	@ (800bbf0 <xPortStartScheduler+0xf0>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	4a10      	ldr	r2, [pc, #64]	@ (800bbf0 <xPortStartScheduler+0xf0>)
 800bbae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800bbb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bbb4:	f000 f8dc 	bl	800bd70 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bbb8:	4b0e      	ldr	r3, [pc, #56]	@ (800bbf4 <xPortStartScheduler+0xf4>)
 800bbba:	2200      	movs	r2, #0
 800bbbc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bbbe:	f000 f8fb 	bl	800bdb8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bbc2:	4b0d      	ldr	r3, [pc, #52]	@ (800bbf8 <xPortStartScheduler+0xf8>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	4a0c      	ldr	r2, [pc, #48]	@ (800bbf8 <xPortStartScheduler+0xf8>)
 800bbc8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800bbcc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bbce:	f7ff ff83 	bl	800bad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bbd2:	f7ff fc27 	bl	800b424 <vTaskSwitchContext>
	prvTaskExitError();
 800bbd6:	f7ff ff39 	bl	800ba4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bbda:	2300      	movs	r3, #0
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3710      	adds	r7, #16
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}
 800bbe4:	e000e400 	.word	0xe000e400
 800bbe8:	20000e5c 	.word	0x20000e5c
 800bbec:	20000e60 	.word	0x20000e60
 800bbf0:	e000ed20 	.word	0xe000ed20
 800bbf4:	2000024c 	.word	0x2000024c
 800bbf8:	e000ef34 	.word	0xe000ef34

0800bbfc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b083      	sub	sp, #12
 800bc00:	af00      	add	r7, sp, #0
	__asm volatile
 800bc02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc06:	b672      	cpsid	i
 800bc08:	f383 8811 	msr	BASEPRI, r3
 800bc0c:	f3bf 8f6f 	isb	sy
 800bc10:	f3bf 8f4f 	dsb	sy
 800bc14:	b662      	cpsie	i
 800bc16:	607b      	str	r3, [r7, #4]
}
 800bc18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bc1a:	4b11      	ldr	r3, [pc, #68]	@ (800bc60 <vPortEnterCritical+0x64>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	3301      	adds	r3, #1
 800bc20:	4a0f      	ldr	r2, [pc, #60]	@ (800bc60 <vPortEnterCritical+0x64>)
 800bc22:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bc24:	4b0e      	ldr	r3, [pc, #56]	@ (800bc60 <vPortEnterCritical+0x64>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d112      	bne.n	800bc52 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bc2c:	4b0d      	ldr	r3, [pc, #52]	@ (800bc64 <vPortEnterCritical+0x68>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	b2db      	uxtb	r3, r3
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d00d      	beq.n	800bc52 <vPortEnterCritical+0x56>
	__asm volatile
 800bc36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc3a:	b672      	cpsid	i
 800bc3c:	f383 8811 	msr	BASEPRI, r3
 800bc40:	f3bf 8f6f 	isb	sy
 800bc44:	f3bf 8f4f 	dsb	sy
 800bc48:	b662      	cpsie	i
 800bc4a:	603b      	str	r3, [r7, #0]
}
 800bc4c:	bf00      	nop
 800bc4e:	bf00      	nop
 800bc50:	e7fd      	b.n	800bc4e <vPortEnterCritical+0x52>
	}
}
 800bc52:	bf00      	nop
 800bc54:	370c      	adds	r7, #12
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr
 800bc5e:	bf00      	nop
 800bc60:	2000024c 	.word	0x2000024c
 800bc64:	e000ed04 	.word	0xe000ed04

0800bc68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b083      	sub	sp, #12
 800bc6c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bc6e:	4b13      	ldr	r3, [pc, #76]	@ (800bcbc <vPortExitCritical+0x54>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d10d      	bne.n	800bc92 <vPortExitCritical+0x2a>
	__asm volatile
 800bc76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc7a:	b672      	cpsid	i
 800bc7c:	f383 8811 	msr	BASEPRI, r3
 800bc80:	f3bf 8f6f 	isb	sy
 800bc84:	f3bf 8f4f 	dsb	sy
 800bc88:	b662      	cpsie	i
 800bc8a:	607b      	str	r3, [r7, #4]
}
 800bc8c:	bf00      	nop
 800bc8e:	bf00      	nop
 800bc90:	e7fd      	b.n	800bc8e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800bc92:	4b0a      	ldr	r3, [pc, #40]	@ (800bcbc <vPortExitCritical+0x54>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	3b01      	subs	r3, #1
 800bc98:	4a08      	ldr	r2, [pc, #32]	@ (800bcbc <vPortExitCritical+0x54>)
 800bc9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bc9c:	4b07      	ldr	r3, [pc, #28]	@ (800bcbc <vPortExitCritical+0x54>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d105      	bne.n	800bcb0 <vPortExitCritical+0x48>
 800bca4:	2300      	movs	r3, #0
 800bca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	f383 8811 	msr	BASEPRI, r3
}
 800bcae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bcb0:	bf00      	nop
 800bcb2:	370c      	adds	r7, #12
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr
 800bcbc:	2000024c 	.word	0x2000024c

0800bcc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bcc0:	f3ef 8009 	mrs	r0, PSP
 800bcc4:	f3bf 8f6f 	isb	sy
 800bcc8:	4b15      	ldr	r3, [pc, #84]	@ (800bd20 <pxCurrentTCBConst>)
 800bcca:	681a      	ldr	r2, [r3, #0]
 800bccc:	f01e 0f10 	tst.w	lr, #16
 800bcd0:	bf08      	it	eq
 800bcd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bcd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcda:	6010      	str	r0, [r2, #0]
 800bcdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bce0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bce4:	b672      	cpsid	i
 800bce6:	f380 8811 	msr	BASEPRI, r0
 800bcea:	f3bf 8f4f 	dsb	sy
 800bcee:	f3bf 8f6f 	isb	sy
 800bcf2:	b662      	cpsie	i
 800bcf4:	f7ff fb96 	bl	800b424 <vTaskSwitchContext>
 800bcf8:	f04f 0000 	mov.w	r0, #0
 800bcfc:	f380 8811 	msr	BASEPRI, r0
 800bd00:	bc09      	pop	{r0, r3}
 800bd02:	6819      	ldr	r1, [r3, #0]
 800bd04:	6808      	ldr	r0, [r1, #0]
 800bd06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd0a:	f01e 0f10 	tst.w	lr, #16
 800bd0e:	bf08      	it	eq
 800bd10:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bd14:	f380 8809 	msr	PSP, r0
 800bd18:	f3bf 8f6f 	isb	sy
 800bd1c:	4770      	bx	lr
 800bd1e:	bf00      	nop

0800bd20 <pxCurrentTCBConst>:
 800bd20:	20000d30 	.word	0x20000d30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bd24:	bf00      	nop
 800bd26:	bf00      	nop

0800bd28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b082      	sub	sp, #8
 800bd2c:	af00      	add	r7, sp, #0
	__asm volatile
 800bd2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd32:	b672      	cpsid	i
 800bd34:	f383 8811 	msr	BASEPRI, r3
 800bd38:	f3bf 8f6f 	isb	sy
 800bd3c:	f3bf 8f4f 	dsb	sy
 800bd40:	b662      	cpsie	i
 800bd42:	607b      	str	r3, [r7, #4]
}
 800bd44:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bd46:	f7ff fab1 	bl	800b2ac <xTaskIncrementTick>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d003      	beq.n	800bd58 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bd50:	4b06      	ldr	r3, [pc, #24]	@ (800bd6c <SysTick_Handler+0x44>)
 800bd52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd56:	601a      	str	r2, [r3, #0]
 800bd58:	2300      	movs	r3, #0
 800bd5a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	f383 8811 	msr	BASEPRI, r3
}
 800bd62:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bd64:	bf00      	nop
 800bd66:	3708      	adds	r7, #8
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}
 800bd6c:	e000ed04 	.word	0xe000ed04

0800bd70 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bd70:	b480      	push	{r7}
 800bd72:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bd74:	4b0b      	ldr	r3, [pc, #44]	@ (800bda4 <vPortSetupTimerInterrupt+0x34>)
 800bd76:	2200      	movs	r2, #0
 800bd78:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bd7a:	4b0b      	ldr	r3, [pc, #44]	@ (800bda8 <vPortSetupTimerInterrupt+0x38>)
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bd80:	4b0a      	ldr	r3, [pc, #40]	@ (800bdac <vPortSetupTimerInterrupt+0x3c>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	4a0a      	ldr	r2, [pc, #40]	@ (800bdb0 <vPortSetupTimerInterrupt+0x40>)
 800bd86:	fba2 2303 	umull	r2, r3, r2, r3
 800bd8a:	099b      	lsrs	r3, r3, #6
 800bd8c:	4a09      	ldr	r2, [pc, #36]	@ (800bdb4 <vPortSetupTimerInterrupt+0x44>)
 800bd8e:	3b01      	subs	r3, #1
 800bd90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bd92:	4b04      	ldr	r3, [pc, #16]	@ (800bda4 <vPortSetupTimerInterrupt+0x34>)
 800bd94:	2207      	movs	r2, #7
 800bd96:	601a      	str	r2, [r3, #0]
}
 800bd98:	bf00      	nop
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda0:	4770      	bx	lr
 800bda2:	bf00      	nop
 800bda4:	e000e010 	.word	0xe000e010
 800bda8:	e000e018 	.word	0xe000e018
 800bdac:	2000017c 	.word	0x2000017c
 800bdb0:	10624dd3 	.word	0x10624dd3
 800bdb4:	e000e014 	.word	0xe000e014

0800bdb8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bdb8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bdc8 <vPortEnableVFP+0x10>
 800bdbc:	6801      	ldr	r1, [r0, #0]
 800bdbe:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800bdc2:	6001      	str	r1, [r0, #0]
 800bdc4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bdc6:	bf00      	nop
 800bdc8:	e000ed88 	.word	0xe000ed88

0800bdcc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bdcc:	b480      	push	{r7}
 800bdce:	b085      	sub	sp, #20
 800bdd0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bdd2:	f3ef 8305 	mrs	r3, IPSR
 800bdd6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2b0f      	cmp	r3, #15
 800bddc:	d917      	bls.n	800be0e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bdde:	4a1a      	ldr	r2, [pc, #104]	@ (800be48 <vPortValidateInterruptPriority+0x7c>)
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	4413      	add	r3, r2
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bde8:	4b18      	ldr	r3, [pc, #96]	@ (800be4c <vPortValidateInterruptPriority+0x80>)
 800bdea:	781b      	ldrb	r3, [r3, #0]
 800bdec:	7afa      	ldrb	r2, [r7, #11]
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d20d      	bcs.n	800be0e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800bdf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdf6:	b672      	cpsid	i
 800bdf8:	f383 8811 	msr	BASEPRI, r3
 800bdfc:	f3bf 8f6f 	isb	sy
 800be00:	f3bf 8f4f 	dsb	sy
 800be04:	b662      	cpsie	i
 800be06:	607b      	str	r3, [r7, #4]
}
 800be08:	bf00      	nop
 800be0a:	bf00      	nop
 800be0c:	e7fd      	b.n	800be0a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800be0e:	4b10      	ldr	r3, [pc, #64]	@ (800be50 <vPortValidateInterruptPriority+0x84>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800be16:	4b0f      	ldr	r3, [pc, #60]	@ (800be54 <vPortValidateInterruptPriority+0x88>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d90d      	bls.n	800be3a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800be1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be22:	b672      	cpsid	i
 800be24:	f383 8811 	msr	BASEPRI, r3
 800be28:	f3bf 8f6f 	isb	sy
 800be2c:	f3bf 8f4f 	dsb	sy
 800be30:	b662      	cpsie	i
 800be32:	603b      	str	r3, [r7, #0]
}
 800be34:	bf00      	nop
 800be36:	bf00      	nop
 800be38:	e7fd      	b.n	800be36 <vPortValidateInterruptPriority+0x6a>
	}
 800be3a:	bf00      	nop
 800be3c:	3714      	adds	r7, #20
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr
 800be46:	bf00      	nop
 800be48:	e000e3f0 	.word	0xe000e3f0
 800be4c:	20000e5c 	.word	0x20000e5c
 800be50:	e000ed0c 	.word	0xe000ed0c
 800be54:	20000e60 	.word	0x20000e60

0800be58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b08a      	sub	sp, #40	@ 0x28
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800be60:	2300      	movs	r3, #0
 800be62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800be64:	f7ff f974 	bl	800b150 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800be68:	4b5d      	ldr	r3, [pc, #372]	@ (800bfe0 <pvPortMalloc+0x188>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d101      	bne.n	800be74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800be70:	f000 f920 	bl	800c0b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800be74:	4b5b      	ldr	r3, [pc, #364]	@ (800bfe4 <pvPortMalloc+0x18c>)
 800be76:	681a      	ldr	r2, [r3, #0]
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	4013      	ands	r3, r2
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	f040 8094 	bne.w	800bfaa <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d020      	beq.n	800beca <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800be88:	2208      	movs	r2, #8
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	4413      	add	r3, r2
 800be8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f003 0307 	and.w	r3, r3, #7
 800be96:	2b00      	cmp	r3, #0
 800be98:	d017      	beq.n	800beca <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f023 0307 	bic.w	r3, r3, #7
 800bea0:	3308      	adds	r3, #8
 800bea2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f003 0307 	and.w	r3, r3, #7
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d00d      	beq.n	800beca <pvPortMalloc+0x72>
	__asm volatile
 800beae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beb2:	b672      	cpsid	i
 800beb4:	f383 8811 	msr	BASEPRI, r3
 800beb8:	f3bf 8f6f 	isb	sy
 800bebc:	f3bf 8f4f 	dsb	sy
 800bec0:	b662      	cpsie	i
 800bec2:	617b      	str	r3, [r7, #20]
}
 800bec4:	bf00      	nop
 800bec6:	bf00      	nop
 800bec8:	e7fd      	b.n	800bec6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d06c      	beq.n	800bfaa <pvPortMalloc+0x152>
 800bed0:	4b45      	ldr	r3, [pc, #276]	@ (800bfe8 <pvPortMalloc+0x190>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	687a      	ldr	r2, [r7, #4]
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d867      	bhi.n	800bfaa <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800beda:	4b44      	ldr	r3, [pc, #272]	@ (800bfec <pvPortMalloc+0x194>)
 800bedc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bede:	4b43      	ldr	r3, [pc, #268]	@ (800bfec <pvPortMalloc+0x194>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bee4:	e004      	b.n	800bef0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800bee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bee8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800beea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bef2:	685b      	ldr	r3, [r3, #4]
 800bef4:	687a      	ldr	r2, [r7, #4]
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d903      	bls.n	800bf02 <pvPortMalloc+0xaa>
 800befa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d1f1      	bne.n	800bee6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bf02:	4b37      	ldr	r3, [pc, #220]	@ (800bfe0 <pvPortMalloc+0x188>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d04e      	beq.n	800bfaa <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bf0c:	6a3b      	ldr	r3, [r7, #32]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	2208      	movs	r2, #8
 800bf12:	4413      	add	r3, r2
 800bf14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bf16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf18:	681a      	ldr	r2, [r3, #0]
 800bf1a:	6a3b      	ldr	r3, [r7, #32]
 800bf1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bf1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf20:	685a      	ldr	r2, [r3, #4]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	1ad2      	subs	r2, r2, r3
 800bf26:	2308      	movs	r3, #8
 800bf28:	005b      	lsls	r3, r3, #1
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	d922      	bls.n	800bf74 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bf2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	4413      	add	r3, r2
 800bf34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf36:	69bb      	ldr	r3, [r7, #24]
 800bf38:	f003 0307 	and.w	r3, r3, #7
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d00d      	beq.n	800bf5c <pvPortMalloc+0x104>
	__asm volatile
 800bf40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf44:	b672      	cpsid	i
 800bf46:	f383 8811 	msr	BASEPRI, r3
 800bf4a:	f3bf 8f6f 	isb	sy
 800bf4e:	f3bf 8f4f 	dsb	sy
 800bf52:	b662      	cpsie	i
 800bf54:	613b      	str	r3, [r7, #16]
}
 800bf56:	bf00      	nop
 800bf58:	bf00      	nop
 800bf5a:	e7fd      	b.n	800bf58 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bf5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf5e:	685a      	ldr	r2, [r3, #4]
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	1ad2      	subs	r2, r2, r3
 800bf64:	69bb      	ldr	r3, [r7, #24]
 800bf66:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bf68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf6a:	687a      	ldr	r2, [r7, #4]
 800bf6c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bf6e:	69b8      	ldr	r0, [r7, #24]
 800bf70:	f000 f902 	bl	800c178 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bf74:	4b1c      	ldr	r3, [pc, #112]	@ (800bfe8 <pvPortMalloc+0x190>)
 800bf76:	681a      	ldr	r2, [r3, #0]
 800bf78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	1ad3      	subs	r3, r2, r3
 800bf7e:	4a1a      	ldr	r2, [pc, #104]	@ (800bfe8 <pvPortMalloc+0x190>)
 800bf80:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bf82:	4b19      	ldr	r3, [pc, #100]	@ (800bfe8 <pvPortMalloc+0x190>)
 800bf84:	681a      	ldr	r2, [r3, #0]
 800bf86:	4b1a      	ldr	r3, [pc, #104]	@ (800bff0 <pvPortMalloc+0x198>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	d203      	bcs.n	800bf96 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bf8e:	4b16      	ldr	r3, [pc, #88]	@ (800bfe8 <pvPortMalloc+0x190>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	4a17      	ldr	r2, [pc, #92]	@ (800bff0 <pvPortMalloc+0x198>)
 800bf94:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bf96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf98:	685a      	ldr	r2, [r3, #4]
 800bf9a:	4b12      	ldr	r3, [pc, #72]	@ (800bfe4 <pvPortMalloc+0x18c>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	431a      	orrs	r2, r3
 800bfa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfa2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bfa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bfaa:	f7ff f8df 	bl	800b16c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bfae:	69fb      	ldr	r3, [r7, #28]
 800bfb0:	f003 0307 	and.w	r3, r3, #7
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d00d      	beq.n	800bfd4 <pvPortMalloc+0x17c>
	__asm volatile
 800bfb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfbc:	b672      	cpsid	i
 800bfbe:	f383 8811 	msr	BASEPRI, r3
 800bfc2:	f3bf 8f6f 	isb	sy
 800bfc6:	f3bf 8f4f 	dsb	sy
 800bfca:	b662      	cpsie	i
 800bfcc:	60fb      	str	r3, [r7, #12]
}
 800bfce:	bf00      	nop
 800bfd0:	bf00      	nop
 800bfd2:	e7fd      	b.n	800bfd0 <pvPortMalloc+0x178>
	return pvReturn;
 800bfd4:	69fb      	ldr	r3, [r7, #28]
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3728      	adds	r7, #40	@ 0x28
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
 800bfde:	bf00      	nop
 800bfe0:	20004a6c 	.word	0x20004a6c
 800bfe4:	20004a78 	.word	0x20004a78
 800bfe8:	20004a70 	.word	0x20004a70
 800bfec:	20004a64 	.word	0x20004a64
 800bff0:	20004a74 	.word	0x20004a74

0800bff4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b086      	sub	sp, #24
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d04e      	beq.n	800c0a4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c006:	2308      	movs	r3, #8
 800c008:	425b      	negs	r3, r3
 800c00a:	697a      	ldr	r2, [r7, #20]
 800c00c:	4413      	add	r3, r2
 800c00e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c010:	697b      	ldr	r3, [r7, #20]
 800c012:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	685a      	ldr	r2, [r3, #4]
 800c018:	4b24      	ldr	r3, [pc, #144]	@ (800c0ac <vPortFree+0xb8>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	4013      	ands	r3, r2
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d10d      	bne.n	800c03e <vPortFree+0x4a>
	__asm volatile
 800c022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c026:	b672      	cpsid	i
 800c028:	f383 8811 	msr	BASEPRI, r3
 800c02c:	f3bf 8f6f 	isb	sy
 800c030:	f3bf 8f4f 	dsb	sy
 800c034:	b662      	cpsie	i
 800c036:	60fb      	str	r3, [r7, #12]
}
 800c038:	bf00      	nop
 800c03a:	bf00      	nop
 800c03c:	e7fd      	b.n	800c03a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d00d      	beq.n	800c062 <vPortFree+0x6e>
	__asm volatile
 800c046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c04a:	b672      	cpsid	i
 800c04c:	f383 8811 	msr	BASEPRI, r3
 800c050:	f3bf 8f6f 	isb	sy
 800c054:	f3bf 8f4f 	dsb	sy
 800c058:	b662      	cpsie	i
 800c05a:	60bb      	str	r3, [r7, #8]
}
 800c05c:	bf00      	nop
 800c05e:	bf00      	nop
 800c060:	e7fd      	b.n	800c05e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	685a      	ldr	r2, [r3, #4]
 800c066:	4b11      	ldr	r3, [pc, #68]	@ (800c0ac <vPortFree+0xb8>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	4013      	ands	r3, r2
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d019      	beq.n	800c0a4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d115      	bne.n	800c0a4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	685a      	ldr	r2, [r3, #4]
 800c07c:	4b0b      	ldr	r3, [pc, #44]	@ (800c0ac <vPortFree+0xb8>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	43db      	mvns	r3, r3
 800c082:	401a      	ands	r2, r3
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c088:	f7ff f862 	bl	800b150 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	685a      	ldr	r2, [r3, #4]
 800c090:	4b07      	ldr	r3, [pc, #28]	@ (800c0b0 <vPortFree+0xbc>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	4413      	add	r3, r2
 800c096:	4a06      	ldr	r2, [pc, #24]	@ (800c0b0 <vPortFree+0xbc>)
 800c098:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c09a:	6938      	ldr	r0, [r7, #16]
 800c09c:	f000 f86c 	bl	800c178 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c0a0:	f7ff f864 	bl	800b16c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c0a4:	bf00      	nop
 800c0a6:	3718      	adds	r7, #24
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}
 800c0ac:	20004a78 	.word	0x20004a78
 800c0b0:	20004a70 	.word	0x20004a70

0800c0b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b085      	sub	sp, #20
 800c0b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c0ba:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c0be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c0c0:	4b27      	ldr	r3, [pc, #156]	@ (800c160 <prvHeapInit+0xac>)
 800c0c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f003 0307 	and.w	r3, r3, #7
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d00c      	beq.n	800c0e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	3307      	adds	r3, #7
 800c0d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	f023 0307 	bic.w	r3, r3, #7
 800c0da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c0dc:	68ba      	ldr	r2, [r7, #8]
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	1ad3      	subs	r3, r2, r3
 800c0e2:	4a1f      	ldr	r2, [pc, #124]	@ (800c160 <prvHeapInit+0xac>)
 800c0e4:	4413      	add	r3, r2
 800c0e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c0ec:	4a1d      	ldr	r2, [pc, #116]	@ (800c164 <prvHeapInit+0xb0>)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c0f2:	4b1c      	ldr	r3, [pc, #112]	@ (800c164 <prvHeapInit+0xb0>)
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	68ba      	ldr	r2, [r7, #8]
 800c0fc:	4413      	add	r3, r2
 800c0fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c100:	2208      	movs	r2, #8
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	1a9b      	subs	r3, r3, r2
 800c106:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	f023 0307 	bic.w	r3, r3, #7
 800c10e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	4a15      	ldr	r2, [pc, #84]	@ (800c168 <prvHeapInit+0xb4>)
 800c114:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c116:	4b14      	ldr	r3, [pc, #80]	@ (800c168 <prvHeapInit+0xb4>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	2200      	movs	r2, #0
 800c11c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c11e:	4b12      	ldr	r3, [pc, #72]	@ (800c168 <prvHeapInit+0xb4>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	2200      	movs	r2, #0
 800c124:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	68fa      	ldr	r2, [r7, #12]
 800c12e:	1ad2      	subs	r2, r2, r3
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c134:	4b0c      	ldr	r3, [pc, #48]	@ (800c168 <prvHeapInit+0xb4>)
 800c136:	681a      	ldr	r2, [r3, #0]
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	4a0a      	ldr	r2, [pc, #40]	@ (800c16c <prvHeapInit+0xb8>)
 800c142:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	685b      	ldr	r3, [r3, #4]
 800c148:	4a09      	ldr	r2, [pc, #36]	@ (800c170 <prvHeapInit+0xbc>)
 800c14a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c14c:	4b09      	ldr	r3, [pc, #36]	@ (800c174 <prvHeapInit+0xc0>)
 800c14e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c152:	601a      	str	r2, [r3, #0]
}
 800c154:	bf00      	nop
 800c156:	3714      	adds	r7, #20
 800c158:	46bd      	mov	sp, r7
 800c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15e:	4770      	bx	lr
 800c160:	20000e64 	.word	0x20000e64
 800c164:	20004a64 	.word	0x20004a64
 800c168:	20004a6c 	.word	0x20004a6c
 800c16c:	20004a74 	.word	0x20004a74
 800c170:	20004a70 	.word	0x20004a70
 800c174:	20004a78 	.word	0x20004a78

0800c178 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c178:	b480      	push	{r7}
 800c17a:	b085      	sub	sp, #20
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c180:	4b28      	ldr	r3, [pc, #160]	@ (800c224 <prvInsertBlockIntoFreeList+0xac>)
 800c182:	60fb      	str	r3, [r7, #12]
 800c184:	e002      	b.n	800c18c <prvInsertBlockIntoFreeList+0x14>
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	60fb      	str	r3, [r7, #12]
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	687a      	ldr	r2, [r7, #4]
 800c192:	429a      	cmp	r2, r3
 800c194:	d8f7      	bhi.n	800c186 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	685b      	ldr	r3, [r3, #4]
 800c19e:	68ba      	ldr	r2, [r7, #8]
 800c1a0:	4413      	add	r3, r2
 800c1a2:	687a      	ldr	r2, [r7, #4]
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d108      	bne.n	800c1ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	685a      	ldr	r2, [r3, #4]
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	685b      	ldr	r3, [r3, #4]
 800c1b0:	441a      	add	r2, r3
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	685b      	ldr	r3, [r3, #4]
 800c1c2:	68ba      	ldr	r2, [r7, #8]
 800c1c4:	441a      	add	r2, r3
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d118      	bne.n	800c200 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681a      	ldr	r2, [r3, #0]
 800c1d2:	4b15      	ldr	r3, [pc, #84]	@ (800c228 <prvInsertBlockIntoFreeList+0xb0>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d00d      	beq.n	800c1f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	685a      	ldr	r2, [r3, #4]
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	441a      	add	r2, r3
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	681a      	ldr	r2, [r3, #0]
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	601a      	str	r2, [r3, #0]
 800c1f4:	e008      	b.n	800c208 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c1f6:	4b0c      	ldr	r3, [pc, #48]	@ (800c228 <prvInsertBlockIntoFreeList+0xb0>)
 800c1f8:	681a      	ldr	r2, [r3, #0]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	601a      	str	r2, [r3, #0]
 800c1fe:	e003      	b.n	800c208 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681a      	ldr	r2, [r3, #0]
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c208:	68fa      	ldr	r2, [r7, #12]
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	429a      	cmp	r2, r3
 800c20e:	d002      	beq.n	800c216 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	687a      	ldr	r2, [r7, #4]
 800c214:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c216:	bf00      	nop
 800c218:	3714      	adds	r7, #20
 800c21a:	46bd      	mov	sp, r7
 800c21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c220:	4770      	bx	lr
 800c222:	bf00      	nop
 800c224:	20004a64 	.word	0x20004a64
 800c228:	20004a6c 	.word	0x20004a6c

0800c22c <atoi>:
 800c22c:	220a      	movs	r2, #10
 800c22e:	2100      	movs	r1, #0
 800c230:	f000 b87c 	b.w	800c32c <strtol>

0800c234 <_strtol_l.constprop.0>:
 800c234:	2b24      	cmp	r3, #36	@ 0x24
 800c236:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c23a:	4686      	mov	lr, r0
 800c23c:	4690      	mov	r8, r2
 800c23e:	d801      	bhi.n	800c244 <_strtol_l.constprop.0+0x10>
 800c240:	2b01      	cmp	r3, #1
 800c242:	d106      	bne.n	800c252 <_strtol_l.constprop.0+0x1e>
 800c244:	f001 fa48 	bl	800d6d8 <__errno>
 800c248:	2316      	movs	r3, #22
 800c24a:	6003      	str	r3, [r0, #0]
 800c24c:	2000      	movs	r0, #0
 800c24e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c252:	4834      	ldr	r0, [pc, #208]	@ (800c324 <_strtol_l.constprop.0+0xf0>)
 800c254:	460d      	mov	r5, r1
 800c256:	462a      	mov	r2, r5
 800c258:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c25c:	5d06      	ldrb	r6, [r0, r4]
 800c25e:	f016 0608 	ands.w	r6, r6, #8
 800c262:	d1f8      	bne.n	800c256 <_strtol_l.constprop.0+0x22>
 800c264:	2c2d      	cmp	r4, #45	@ 0x2d
 800c266:	d12d      	bne.n	800c2c4 <_strtol_l.constprop.0+0x90>
 800c268:	782c      	ldrb	r4, [r5, #0]
 800c26a:	2601      	movs	r6, #1
 800c26c:	1c95      	adds	r5, r2, #2
 800c26e:	f033 0210 	bics.w	r2, r3, #16
 800c272:	d109      	bne.n	800c288 <_strtol_l.constprop.0+0x54>
 800c274:	2c30      	cmp	r4, #48	@ 0x30
 800c276:	d12a      	bne.n	800c2ce <_strtol_l.constprop.0+0x9a>
 800c278:	782a      	ldrb	r2, [r5, #0]
 800c27a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c27e:	2a58      	cmp	r2, #88	@ 0x58
 800c280:	d125      	bne.n	800c2ce <_strtol_l.constprop.0+0x9a>
 800c282:	786c      	ldrb	r4, [r5, #1]
 800c284:	2310      	movs	r3, #16
 800c286:	3502      	adds	r5, #2
 800c288:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c28c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c290:	2200      	movs	r2, #0
 800c292:	fbbc f9f3 	udiv	r9, ip, r3
 800c296:	4610      	mov	r0, r2
 800c298:	fb03 ca19 	mls	sl, r3, r9, ip
 800c29c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c2a0:	2f09      	cmp	r7, #9
 800c2a2:	d81b      	bhi.n	800c2dc <_strtol_l.constprop.0+0xa8>
 800c2a4:	463c      	mov	r4, r7
 800c2a6:	42a3      	cmp	r3, r4
 800c2a8:	dd27      	ble.n	800c2fa <_strtol_l.constprop.0+0xc6>
 800c2aa:	1c57      	adds	r7, r2, #1
 800c2ac:	d007      	beq.n	800c2be <_strtol_l.constprop.0+0x8a>
 800c2ae:	4581      	cmp	r9, r0
 800c2b0:	d320      	bcc.n	800c2f4 <_strtol_l.constprop.0+0xc0>
 800c2b2:	d101      	bne.n	800c2b8 <_strtol_l.constprop.0+0x84>
 800c2b4:	45a2      	cmp	sl, r4
 800c2b6:	db1d      	blt.n	800c2f4 <_strtol_l.constprop.0+0xc0>
 800c2b8:	fb00 4003 	mla	r0, r0, r3, r4
 800c2bc:	2201      	movs	r2, #1
 800c2be:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c2c2:	e7eb      	b.n	800c29c <_strtol_l.constprop.0+0x68>
 800c2c4:	2c2b      	cmp	r4, #43	@ 0x2b
 800c2c6:	bf04      	itt	eq
 800c2c8:	782c      	ldrbeq	r4, [r5, #0]
 800c2ca:	1c95      	addeq	r5, r2, #2
 800c2cc:	e7cf      	b.n	800c26e <_strtol_l.constprop.0+0x3a>
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d1da      	bne.n	800c288 <_strtol_l.constprop.0+0x54>
 800c2d2:	2c30      	cmp	r4, #48	@ 0x30
 800c2d4:	bf0c      	ite	eq
 800c2d6:	2308      	moveq	r3, #8
 800c2d8:	230a      	movne	r3, #10
 800c2da:	e7d5      	b.n	800c288 <_strtol_l.constprop.0+0x54>
 800c2dc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c2e0:	2f19      	cmp	r7, #25
 800c2e2:	d801      	bhi.n	800c2e8 <_strtol_l.constprop.0+0xb4>
 800c2e4:	3c37      	subs	r4, #55	@ 0x37
 800c2e6:	e7de      	b.n	800c2a6 <_strtol_l.constprop.0+0x72>
 800c2e8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c2ec:	2f19      	cmp	r7, #25
 800c2ee:	d804      	bhi.n	800c2fa <_strtol_l.constprop.0+0xc6>
 800c2f0:	3c57      	subs	r4, #87	@ 0x57
 800c2f2:	e7d8      	b.n	800c2a6 <_strtol_l.constprop.0+0x72>
 800c2f4:	f04f 32ff 	mov.w	r2, #4294967295
 800c2f8:	e7e1      	b.n	800c2be <_strtol_l.constprop.0+0x8a>
 800c2fa:	1c53      	adds	r3, r2, #1
 800c2fc:	d108      	bne.n	800c310 <_strtol_l.constprop.0+0xdc>
 800c2fe:	2322      	movs	r3, #34	@ 0x22
 800c300:	f8ce 3000 	str.w	r3, [lr]
 800c304:	4660      	mov	r0, ip
 800c306:	f1b8 0f00 	cmp.w	r8, #0
 800c30a:	d0a0      	beq.n	800c24e <_strtol_l.constprop.0+0x1a>
 800c30c:	1e69      	subs	r1, r5, #1
 800c30e:	e006      	b.n	800c31e <_strtol_l.constprop.0+0xea>
 800c310:	b106      	cbz	r6, 800c314 <_strtol_l.constprop.0+0xe0>
 800c312:	4240      	negs	r0, r0
 800c314:	f1b8 0f00 	cmp.w	r8, #0
 800c318:	d099      	beq.n	800c24e <_strtol_l.constprop.0+0x1a>
 800c31a:	2a00      	cmp	r2, #0
 800c31c:	d1f6      	bne.n	800c30c <_strtol_l.constprop.0+0xd8>
 800c31e:	f8c8 1000 	str.w	r1, [r8]
 800c322:	e794      	b.n	800c24e <_strtol_l.constprop.0+0x1a>
 800c324:	080112e9 	.word	0x080112e9

0800c328 <_strtol_r>:
 800c328:	f7ff bf84 	b.w	800c234 <_strtol_l.constprop.0>

0800c32c <strtol>:
 800c32c:	4613      	mov	r3, r2
 800c32e:	460a      	mov	r2, r1
 800c330:	4601      	mov	r1, r0
 800c332:	4802      	ldr	r0, [pc, #8]	@ (800c33c <strtol+0x10>)
 800c334:	6800      	ldr	r0, [r0, #0]
 800c336:	f7ff bf7d 	b.w	800c234 <_strtol_l.constprop.0>
 800c33a:	bf00      	nop
 800c33c:	2000025c 	.word	0x2000025c

0800c340 <__cvt>:
 800c340:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c342:	ed2d 8b02 	vpush	{d8}
 800c346:	eeb0 8b40 	vmov.f64	d8, d0
 800c34a:	b085      	sub	sp, #20
 800c34c:	4617      	mov	r7, r2
 800c34e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800c350:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c352:	ee18 2a90 	vmov	r2, s17
 800c356:	f025 0520 	bic.w	r5, r5, #32
 800c35a:	2a00      	cmp	r2, #0
 800c35c:	bfb6      	itet	lt
 800c35e:	222d      	movlt	r2, #45	@ 0x2d
 800c360:	2200      	movge	r2, #0
 800c362:	eeb1 8b40 	vneglt.f64	d8, d0
 800c366:	2d46      	cmp	r5, #70	@ 0x46
 800c368:	460c      	mov	r4, r1
 800c36a:	701a      	strb	r2, [r3, #0]
 800c36c:	d004      	beq.n	800c378 <__cvt+0x38>
 800c36e:	2d45      	cmp	r5, #69	@ 0x45
 800c370:	d100      	bne.n	800c374 <__cvt+0x34>
 800c372:	3401      	adds	r4, #1
 800c374:	2102      	movs	r1, #2
 800c376:	e000      	b.n	800c37a <__cvt+0x3a>
 800c378:	2103      	movs	r1, #3
 800c37a:	ab03      	add	r3, sp, #12
 800c37c:	9301      	str	r3, [sp, #4]
 800c37e:	ab02      	add	r3, sp, #8
 800c380:	9300      	str	r3, [sp, #0]
 800c382:	4622      	mov	r2, r4
 800c384:	4633      	mov	r3, r6
 800c386:	eeb0 0b48 	vmov.f64	d0, d8
 800c38a:	f001 fa8d 	bl	800d8a8 <_dtoa_r>
 800c38e:	2d47      	cmp	r5, #71	@ 0x47
 800c390:	d114      	bne.n	800c3bc <__cvt+0x7c>
 800c392:	07fb      	lsls	r3, r7, #31
 800c394:	d50a      	bpl.n	800c3ac <__cvt+0x6c>
 800c396:	1902      	adds	r2, r0, r4
 800c398:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c39c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3a0:	bf08      	it	eq
 800c3a2:	9203      	streq	r2, [sp, #12]
 800c3a4:	2130      	movs	r1, #48	@ 0x30
 800c3a6:	9b03      	ldr	r3, [sp, #12]
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	d319      	bcc.n	800c3e0 <__cvt+0xa0>
 800c3ac:	9b03      	ldr	r3, [sp, #12]
 800c3ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c3b0:	1a1b      	subs	r3, r3, r0
 800c3b2:	6013      	str	r3, [r2, #0]
 800c3b4:	b005      	add	sp, #20
 800c3b6:	ecbd 8b02 	vpop	{d8}
 800c3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3bc:	2d46      	cmp	r5, #70	@ 0x46
 800c3be:	eb00 0204 	add.w	r2, r0, r4
 800c3c2:	d1e9      	bne.n	800c398 <__cvt+0x58>
 800c3c4:	7803      	ldrb	r3, [r0, #0]
 800c3c6:	2b30      	cmp	r3, #48	@ 0x30
 800c3c8:	d107      	bne.n	800c3da <__cvt+0x9a>
 800c3ca:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c3ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3d2:	bf1c      	itt	ne
 800c3d4:	f1c4 0401 	rsbne	r4, r4, #1
 800c3d8:	6034      	strne	r4, [r6, #0]
 800c3da:	6833      	ldr	r3, [r6, #0]
 800c3dc:	441a      	add	r2, r3
 800c3de:	e7db      	b.n	800c398 <__cvt+0x58>
 800c3e0:	1c5c      	adds	r4, r3, #1
 800c3e2:	9403      	str	r4, [sp, #12]
 800c3e4:	7019      	strb	r1, [r3, #0]
 800c3e6:	e7de      	b.n	800c3a6 <__cvt+0x66>

0800c3e8 <__exponent>:
 800c3e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c3ea:	2900      	cmp	r1, #0
 800c3ec:	bfba      	itte	lt
 800c3ee:	4249      	neglt	r1, r1
 800c3f0:	232d      	movlt	r3, #45	@ 0x2d
 800c3f2:	232b      	movge	r3, #43	@ 0x2b
 800c3f4:	2909      	cmp	r1, #9
 800c3f6:	7002      	strb	r2, [r0, #0]
 800c3f8:	7043      	strb	r3, [r0, #1]
 800c3fa:	dd29      	ble.n	800c450 <__exponent+0x68>
 800c3fc:	f10d 0307 	add.w	r3, sp, #7
 800c400:	461d      	mov	r5, r3
 800c402:	270a      	movs	r7, #10
 800c404:	461a      	mov	r2, r3
 800c406:	fbb1 f6f7 	udiv	r6, r1, r7
 800c40a:	fb07 1416 	mls	r4, r7, r6, r1
 800c40e:	3430      	adds	r4, #48	@ 0x30
 800c410:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c414:	460c      	mov	r4, r1
 800c416:	2c63      	cmp	r4, #99	@ 0x63
 800c418:	f103 33ff 	add.w	r3, r3, #4294967295
 800c41c:	4631      	mov	r1, r6
 800c41e:	dcf1      	bgt.n	800c404 <__exponent+0x1c>
 800c420:	3130      	adds	r1, #48	@ 0x30
 800c422:	1e94      	subs	r4, r2, #2
 800c424:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c428:	1c41      	adds	r1, r0, #1
 800c42a:	4623      	mov	r3, r4
 800c42c:	42ab      	cmp	r3, r5
 800c42e:	d30a      	bcc.n	800c446 <__exponent+0x5e>
 800c430:	f10d 0309 	add.w	r3, sp, #9
 800c434:	1a9b      	subs	r3, r3, r2
 800c436:	42ac      	cmp	r4, r5
 800c438:	bf88      	it	hi
 800c43a:	2300      	movhi	r3, #0
 800c43c:	3302      	adds	r3, #2
 800c43e:	4403      	add	r3, r0
 800c440:	1a18      	subs	r0, r3, r0
 800c442:	b003      	add	sp, #12
 800c444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c446:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c44a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c44e:	e7ed      	b.n	800c42c <__exponent+0x44>
 800c450:	2330      	movs	r3, #48	@ 0x30
 800c452:	3130      	adds	r1, #48	@ 0x30
 800c454:	7083      	strb	r3, [r0, #2]
 800c456:	70c1      	strb	r1, [r0, #3]
 800c458:	1d03      	adds	r3, r0, #4
 800c45a:	e7f1      	b.n	800c440 <__exponent+0x58>
 800c45c:	0000      	movs	r0, r0
	...

0800c460 <_printf_float>:
 800c460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c464:	b08d      	sub	sp, #52	@ 0x34
 800c466:	460c      	mov	r4, r1
 800c468:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c46c:	4616      	mov	r6, r2
 800c46e:	461f      	mov	r7, r3
 800c470:	4605      	mov	r5, r0
 800c472:	f001 f891 	bl	800d598 <_localeconv_r>
 800c476:	f8d0 b000 	ldr.w	fp, [r0]
 800c47a:	4658      	mov	r0, fp
 800c47c:	f7f3 ff40 	bl	8000300 <strlen>
 800c480:	2300      	movs	r3, #0
 800c482:	930a      	str	r3, [sp, #40]	@ 0x28
 800c484:	f8d8 3000 	ldr.w	r3, [r8]
 800c488:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c48c:	6822      	ldr	r2, [r4, #0]
 800c48e:	9005      	str	r0, [sp, #20]
 800c490:	3307      	adds	r3, #7
 800c492:	f023 0307 	bic.w	r3, r3, #7
 800c496:	f103 0108 	add.w	r1, r3, #8
 800c49a:	f8c8 1000 	str.w	r1, [r8]
 800c49e:	ed93 0b00 	vldr	d0, [r3]
 800c4a2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800c700 <_printf_float+0x2a0>
 800c4a6:	eeb0 7bc0 	vabs.f64	d7, d0
 800c4aa:	eeb4 7b46 	vcmp.f64	d7, d6
 800c4ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4b2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800c4b6:	dd24      	ble.n	800c502 <_printf_float+0xa2>
 800c4b8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c4bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4c0:	d502      	bpl.n	800c4c8 <_printf_float+0x68>
 800c4c2:	232d      	movs	r3, #45	@ 0x2d
 800c4c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c4c8:	498f      	ldr	r1, [pc, #572]	@ (800c708 <_printf_float+0x2a8>)
 800c4ca:	4b90      	ldr	r3, [pc, #576]	@ (800c70c <_printf_float+0x2ac>)
 800c4cc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800c4d0:	bf94      	ite	ls
 800c4d2:	4688      	movls	r8, r1
 800c4d4:	4698      	movhi	r8, r3
 800c4d6:	f022 0204 	bic.w	r2, r2, #4
 800c4da:	2303      	movs	r3, #3
 800c4dc:	6123      	str	r3, [r4, #16]
 800c4de:	6022      	str	r2, [r4, #0]
 800c4e0:	f04f 0a00 	mov.w	sl, #0
 800c4e4:	9700      	str	r7, [sp, #0]
 800c4e6:	4633      	mov	r3, r6
 800c4e8:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c4ea:	4621      	mov	r1, r4
 800c4ec:	4628      	mov	r0, r5
 800c4ee:	f000 f9d1 	bl	800c894 <_printf_common>
 800c4f2:	3001      	adds	r0, #1
 800c4f4:	f040 8089 	bne.w	800c60a <_printf_float+0x1aa>
 800c4f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c4fc:	b00d      	add	sp, #52	@ 0x34
 800c4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c502:	eeb4 0b40 	vcmp.f64	d0, d0
 800c506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c50a:	d709      	bvc.n	800c520 <_printf_float+0xc0>
 800c50c:	ee10 3a90 	vmov	r3, s1
 800c510:	2b00      	cmp	r3, #0
 800c512:	bfbc      	itt	lt
 800c514:	232d      	movlt	r3, #45	@ 0x2d
 800c516:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c51a:	497d      	ldr	r1, [pc, #500]	@ (800c710 <_printf_float+0x2b0>)
 800c51c:	4b7d      	ldr	r3, [pc, #500]	@ (800c714 <_printf_float+0x2b4>)
 800c51e:	e7d5      	b.n	800c4cc <_printf_float+0x6c>
 800c520:	6863      	ldr	r3, [r4, #4]
 800c522:	1c59      	adds	r1, r3, #1
 800c524:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800c528:	d139      	bne.n	800c59e <_printf_float+0x13e>
 800c52a:	2306      	movs	r3, #6
 800c52c:	6063      	str	r3, [r4, #4]
 800c52e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c532:	2300      	movs	r3, #0
 800c534:	6022      	str	r2, [r4, #0]
 800c536:	9303      	str	r3, [sp, #12]
 800c538:	ab0a      	add	r3, sp, #40	@ 0x28
 800c53a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c53e:	ab09      	add	r3, sp, #36	@ 0x24
 800c540:	9300      	str	r3, [sp, #0]
 800c542:	6861      	ldr	r1, [r4, #4]
 800c544:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c548:	4628      	mov	r0, r5
 800c54a:	f7ff fef9 	bl	800c340 <__cvt>
 800c54e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c552:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c554:	4680      	mov	r8, r0
 800c556:	d129      	bne.n	800c5ac <_printf_float+0x14c>
 800c558:	1cc8      	adds	r0, r1, #3
 800c55a:	db02      	blt.n	800c562 <_printf_float+0x102>
 800c55c:	6863      	ldr	r3, [r4, #4]
 800c55e:	4299      	cmp	r1, r3
 800c560:	dd41      	ble.n	800c5e6 <_printf_float+0x186>
 800c562:	f1a9 0902 	sub.w	r9, r9, #2
 800c566:	fa5f f989 	uxtb.w	r9, r9
 800c56a:	3901      	subs	r1, #1
 800c56c:	464a      	mov	r2, r9
 800c56e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c572:	9109      	str	r1, [sp, #36]	@ 0x24
 800c574:	f7ff ff38 	bl	800c3e8 <__exponent>
 800c578:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c57a:	1813      	adds	r3, r2, r0
 800c57c:	2a01      	cmp	r2, #1
 800c57e:	4682      	mov	sl, r0
 800c580:	6123      	str	r3, [r4, #16]
 800c582:	dc02      	bgt.n	800c58a <_printf_float+0x12a>
 800c584:	6822      	ldr	r2, [r4, #0]
 800c586:	07d2      	lsls	r2, r2, #31
 800c588:	d501      	bpl.n	800c58e <_printf_float+0x12e>
 800c58a:	3301      	adds	r3, #1
 800c58c:	6123      	str	r3, [r4, #16]
 800c58e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c592:	2b00      	cmp	r3, #0
 800c594:	d0a6      	beq.n	800c4e4 <_printf_float+0x84>
 800c596:	232d      	movs	r3, #45	@ 0x2d
 800c598:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c59c:	e7a2      	b.n	800c4e4 <_printf_float+0x84>
 800c59e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c5a2:	d1c4      	bne.n	800c52e <_printf_float+0xce>
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d1c2      	bne.n	800c52e <_printf_float+0xce>
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	e7bf      	b.n	800c52c <_printf_float+0xcc>
 800c5ac:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800c5b0:	d9db      	bls.n	800c56a <_printf_float+0x10a>
 800c5b2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800c5b6:	d118      	bne.n	800c5ea <_printf_float+0x18a>
 800c5b8:	2900      	cmp	r1, #0
 800c5ba:	6863      	ldr	r3, [r4, #4]
 800c5bc:	dd0b      	ble.n	800c5d6 <_printf_float+0x176>
 800c5be:	6121      	str	r1, [r4, #16]
 800c5c0:	b913      	cbnz	r3, 800c5c8 <_printf_float+0x168>
 800c5c2:	6822      	ldr	r2, [r4, #0]
 800c5c4:	07d0      	lsls	r0, r2, #31
 800c5c6:	d502      	bpl.n	800c5ce <_printf_float+0x16e>
 800c5c8:	3301      	adds	r3, #1
 800c5ca:	440b      	add	r3, r1
 800c5cc:	6123      	str	r3, [r4, #16]
 800c5ce:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c5d0:	f04f 0a00 	mov.w	sl, #0
 800c5d4:	e7db      	b.n	800c58e <_printf_float+0x12e>
 800c5d6:	b913      	cbnz	r3, 800c5de <_printf_float+0x17e>
 800c5d8:	6822      	ldr	r2, [r4, #0]
 800c5da:	07d2      	lsls	r2, r2, #31
 800c5dc:	d501      	bpl.n	800c5e2 <_printf_float+0x182>
 800c5de:	3302      	adds	r3, #2
 800c5e0:	e7f4      	b.n	800c5cc <_printf_float+0x16c>
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	e7f2      	b.n	800c5cc <_printf_float+0x16c>
 800c5e6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800c5ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5ec:	4299      	cmp	r1, r3
 800c5ee:	db05      	blt.n	800c5fc <_printf_float+0x19c>
 800c5f0:	6823      	ldr	r3, [r4, #0]
 800c5f2:	6121      	str	r1, [r4, #16]
 800c5f4:	07d8      	lsls	r0, r3, #31
 800c5f6:	d5ea      	bpl.n	800c5ce <_printf_float+0x16e>
 800c5f8:	1c4b      	adds	r3, r1, #1
 800c5fa:	e7e7      	b.n	800c5cc <_printf_float+0x16c>
 800c5fc:	2900      	cmp	r1, #0
 800c5fe:	bfd4      	ite	le
 800c600:	f1c1 0202 	rsble	r2, r1, #2
 800c604:	2201      	movgt	r2, #1
 800c606:	4413      	add	r3, r2
 800c608:	e7e0      	b.n	800c5cc <_printf_float+0x16c>
 800c60a:	6823      	ldr	r3, [r4, #0]
 800c60c:	055a      	lsls	r2, r3, #21
 800c60e:	d407      	bmi.n	800c620 <_printf_float+0x1c0>
 800c610:	6923      	ldr	r3, [r4, #16]
 800c612:	4642      	mov	r2, r8
 800c614:	4631      	mov	r1, r6
 800c616:	4628      	mov	r0, r5
 800c618:	47b8      	blx	r7
 800c61a:	3001      	adds	r0, #1
 800c61c:	d12a      	bne.n	800c674 <_printf_float+0x214>
 800c61e:	e76b      	b.n	800c4f8 <_printf_float+0x98>
 800c620:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800c624:	f240 80e0 	bls.w	800c7e8 <_printf_float+0x388>
 800c628:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c62c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c634:	d133      	bne.n	800c69e <_printf_float+0x23e>
 800c636:	4a38      	ldr	r2, [pc, #224]	@ (800c718 <_printf_float+0x2b8>)
 800c638:	2301      	movs	r3, #1
 800c63a:	4631      	mov	r1, r6
 800c63c:	4628      	mov	r0, r5
 800c63e:	47b8      	blx	r7
 800c640:	3001      	adds	r0, #1
 800c642:	f43f af59 	beq.w	800c4f8 <_printf_float+0x98>
 800c646:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c64a:	4543      	cmp	r3, r8
 800c64c:	db02      	blt.n	800c654 <_printf_float+0x1f4>
 800c64e:	6823      	ldr	r3, [r4, #0]
 800c650:	07d8      	lsls	r0, r3, #31
 800c652:	d50f      	bpl.n	800c674 <_printf_float+0x214>
 800c654:	9b05      	ldr	r3, [sp, #20]
 800c656:	465a      	mov	r2, fp
 800c658:	4631      	mov	r1, r6
 800c65a:	4628      	mov	r0, r5
 800c65c:	47b8      	blx	r7
 800c65e:	3001      	adds	r0, #1
 800c660:	f43f af4a 	beq.w	800c4f8 <_printf_float+0x98>
 800c664:	f04f 0900 	mov.w	r9, #0
 800c668:	f108 38ff 	add.w	r8, r8, #4294967295
 800c66c:	f104 0a1a 	add.w	sl, r4, #26
 800c670:	45c8      	cmp	r8, r9
 800c672:	dc09      	bgt.n	800c688 <_printf_float+0x228>
 800c674:	6823      	ldr	r3, [r4, #0]
 800c676:	079b      	lsls	r3, r3, #30
 800c678:	f100 8107 	bmi.w	800c88a <_printf_float+0x42a>
 800c67c:	68e0      	ldr	r0, [r4, #12]
 800c67e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c680:	4298      	cmp	r0, r3
 800c682:	bfb8      	it	lt
 800c684:	4618      	movlt	r0, r3
 800c686:	e739      	b.n	800c4fc <_printf_float+0x9c>
 800c688:	2301      	movs	r3, #1
 800c68a:	4652      	mov	r2, sl
 800c68c:	4631      	mov	r1, r6
 800c68e:	4628      	mov	r0, r5
 800c690:	47b8      	blx	r7
 800c692:	3001      	adds	r0, #1
 800c694:	f43f af30 	beq.w	800c4f8 <_printf_float+0x98>
 800c698:	f109 0901 	add.w	r9, r9, #1
 800c69c:	e7e8      	b.n	800c670 <_printf_float+0x210>
 800c69e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	dc3b      	bgt.n	800c71c <_printf_float+0x2bc>
 800c6a4:	4a1c      	ldr	r2, [pc, #112]	@ (800c718 <_printf_float+0x2b8>)
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	4631      	mov	r1, r6
 800c6aa:	4628      	mov	r0, r5
 800c6ac:	47b8      	blx	r7
 800c6ae:	3001      	adds	r0, #1
 800c6b0:	f43f af22 	beq.w	800c4f8 <_printf_float+0x98>
 800c6b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c6b8:	ea59 0303 	orrs.w	r3, r9, r3
 800c6bc:	d102      	bne.n	800c6c4 <_printf_float+0x264>
 800c6be:	6823      	ldr	r3, [r4, #0]
 800c6c0:	07d9      	lsls	r1, r3, #31
 800c6c2:	d5d7      	bpl.n	800c674 <_printf_float+0x214>
 800c6c4:	9b05      	ldr	r3, [sp, #20]
 800c6c6:	465a      	mov	r2, fp
 800c6c8:	4631      	mov	r1, r6
 800c6ca:	4628      	mov	r0, r5
 800c6cc:	47b8      	blx	r7
 800c6ce:	3001      	adds	r0, #1
 800c6d0:	f43f af12 	beq.w	800c4f8 <_printf_float+0x98>
 800c6d4:	f04f 0a00 	mov.w	sl, #0
 800c6d8:	f104 0b1a 	add.w	fp, r4, #26
 800c6dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6de:	425b      	negs	r3, r3
 800c6e0:	4553      	cmp	r3, sl
 800c6e2:	dc01      	bgt.n	800c6e8 <_printf_float+0x288>
 800c6e4:	464b      	mov	r3, r9
 800c6e6:	e794      	b.n	800c612 <_printf_float+0x1b2>
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	465a      	mov	r2, fp
 800c6ec:	4631      	mov	r1, r6
 800c6ee:	4628      	mov	r0, r5
 800c6f0:	47b8      	blx	r7
 800c6f2:	3001      	adds	r0, #1
 800c6f4:	f43f af00 	beq.w	800c4f8 <_printf_float+0x98>
 800c6f8:	f10a 0a01 	add.w	sl, sl, #1
 800c6fc:	e7ee      	b.n	800c6dc <_printf_float+0x27c>
 800c6fe:	bf00      	nop
 800c700:	ffffffff 	.word	0xffffffff
 800c704:	7fefffff 	.word	0x7fefffff
 800c708:	080113e9 	.word	0x080113e9
 800c70c:	080113ed 	.word	0x080113ed
 800c710:	080113f1 	.word	0x080113f1
 800c714:	080113f5 	.word	0x080113f5
 800c718:	080113f9 	.word	0x080113f9
 800c71c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c71e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c722:	4553      	cmp	r3, sl
 800c724:	bfa8      	it	ge
 800c726:	4653      	movge	r3, sl
 800c728:	2b00      	cmp	r3, #0
 800c72a:	4699      	mov	r9, r3
 800c72c:	dc37      	bgt.n	800c79e <_printf_float+0x33e>
 800c72e:	2300      	movs	r3, #0
 800c730:	9307      	str	r3, [sp, #28]
 800c732:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c736:	f104 021a 	add.w	r2, r4, #26
 800c73a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c73c:	9907      	ldr	r1, [sp, #28]
 800c73e:	9306      	str	r3, [sp, #24]
 800c740:	eba3 0309 	sub.w	r3, r3, r9
 800c744:	428b      	cmp	r3, r1
 800c746:	dc31      	bgt.n	800c7ac <_printf_float+0x34c>
 800c748:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c74a:	459a      	cmp	sl, r3
 800c74c:	dc3b      	bgt.n	800c7c6 <_printf_float+0x366>
 800c74e:	6823      	ldr	r3, [r4, #0]
 800c750:	07da      	lsls	r2, r3, #31
 800c752:	d438      	bmi.n	800c7c6 <_printf_float+0x366>
 800c754:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c756:	ebaa 0903 	sub.w	r9, sl, r3
 800c75a:	9b06      	ldr	r3, [sp, #24]
 800c75c:	ebaa 0303 	sub.w	r3, sl, r3
 800c760:	4599      	cmp	r9, r3
 800c762:	bfa8      	it	ge
 800c764:	4699      	movge	r9, r3
 800c766:	f1b9 0f00 	cmp.w	r9, #0
 800c76a:	dc34      	bgt.n	800c7d6 <_printf_float+0x376>
 800c76c:	f04f 0800 	mov.w	r8, #0
 800c770:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c774:	f104 0b1a 	add.w	fp, r4, #26
 800c778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c77a:	ebaa 0303 	sub.w	r3, sl, r3
 800c77e:	eba3 0309 	sub.w	r3, r3, r9
 800c782:	4543      	cmp	r3, r8
 800c784:	f77f af76 	ble.w	800c674 <_printf_float+0x214>
 800c788:	2301      	movs	r3, #1
 800c78a:	465a      	mov	r2, fp
 800c78c:	4631      	mov	r1, r6
 800c78e:	4628      	mov	r0, r5
 800c790:	47b8      	blx	r7
 800c792:	3001      	adds	r0, #1
 800c794:	f43f aeb0 	beq.w	800c4f8 <_printf_float+0x98>
 800c798:	f108 0801 	add.w	r8, r8, #1
 800c79c:	e7ec      	b.n	800c778 <_printf_float+0x318>
 800c79e:	4642      	mov	r2, r8
 800c7a0:	4631      	mov	r1, r6
 800c7a2:	4628      	mov	r0, r5
 800c7a4:	47b8      	blx	r7
 800c7a6:	3001      	adds	r0, #1
 800c7a8:	d1c1      	bne.n	800c72e <_printf_float+0x2ce>
 800c7aa:	e6a5      	b.n	800c4f8 <_printf_float+0x98>
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	4631      	mov	r1, r6
 800c7b0:	4628      	mov	r0, r5
 800c7b2:	9206      	str	r2, [sp, #24]
 800c7b4:	47b8      	blx	r7
 800c7b6:	3001      	adds	r0, #1
 800c7b8:	f43f ae9e 	beq.w	800c4f8 <_printf_float+0x98>
 800c7bc:	9b07      	ldr	r3, [sp, #28]
 800c7be:	9a06      	ldr	r2, [sp, #24]
 800c7c0:	3301      	adds	r3, #1
 800c7c2:	9307      	str	r3, [sp, #28]
 800c7c4:	e7b9      	b.n	800c73a <_printf_float+0x2da>
 800c7c6:	9b05      	ldr	r3, [sp, #20]
 800c7c8:	465a      	mov	r2, fp
 800c7ca:	4631      	mov	r1, r6
 800c7cc:	4628      	mov	r0, r5
 800c7ce:	47b8      	blx	r7
 800c7d0:	3001      	adds	r0, #1
 800c7d2:	d1bf      	bne.n	800c754 <_printf_float+0x2f4>
 800c7d4:	e690      	b.n	800c4f8 <_printf_float+0x98>
 800c7d6:	9a06      	ldr	r2, [sp, #24]
 800c7d8:	464b      	mov	r3, r9
 800c7da:	4442      	add	r2, r8
 800c7dc:	4631      	mov	r1, r6
 800c7de:	4628      	mov	r0, r5
 800c7e0:	47b8      	blx	r7
 800c7e2:	3001      	adds	r0, #1
 800c7e4:	d1c2      	bne.n	800c76c <_printf_float+0x30c>
 800c7e6:	e687      	b.n	800c4f8 <_printf_float+0x98>
 800c7e8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800c7ec:	f1b9 0f01 	cmp.w	r9, #1
 800c7f0:	dc01      	bgt.n	800c7f6 <_printf_float+0x396>
 800c7f2:	07db      	lsls	r3, r3, #31
 800c7f4:	d536      	bpl.n	800c864 <_printf_float+0x404>
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	4642      	mov	r2, r8
 800c7fa:	4631      	mov	r1, r6
 800c7fc:	4628      	mov	r0, r5
 800c7fe:	47b8      	blx	r7
 800c800:	3001      	adds	r0, #1
 800c802:	f43f ae79 	beq.w	800c4f8 <_printf_float+0x98>
 800c806:	9b05      	ldr	r3, [sp, #20]
 800c808:	465a      	mov	r2, fp
 800c80a:	4631      	mov	r1, r6
 800c80c:	4628      	mov	r0, r5
 800c80e:	47b8      	blx	r7
 800c810:	3001      	adds	r0, #1
 800c812:	f43f ae71 	beq.w	800c4f8 <_printf_float+0x98>
 800c816:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c81a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c81e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c822:	f109 39ff 	add.w	r9, r9, #4294967295
 800c826:	d018      	beq.n	800c85a <_printf_float+0x3fa>
 800c828:	464b      	mov	r3, r9
 800c82a:	f108 0201 	add.w	r2, r8, #1
 800c82e:	4631      	mov	r1, r6
 800c830:	4628      	mov	r0, r5
 800c832:	47b8      	blx	r7
 800c834:	3001      	adds	r0, #1
 800c836:	d10c      	bne.n	800c852 <_printf_float+0x3f2>
 800c838:	e65e      	b.n	800c4f8 <_printf_float+0x98>
 800c83a:	2301      	movs	r3, #1
 800c83c:	465a      	mov	r2, fp
 800c83e:	4631      	mov	r1, r6
 800c840:	4628      	mov	r0, r5
 800c842:	47b8      	blx	r7
 800c844:	3001      	adds	r0, #1
 800c846:	f43f ae57 	beq.w	800c4f8 <_printf_float+0x98>
 800c84a:	f108 0801 	add.w	r8, r8, #1
 800c84e:	45c8      	cmp	r8, r9
 800c850:	dbf3      	blt.n	800c83a <_printf_float+0x3da>
 800c852:	4653      	mov	r3, sl
 800c854:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c858:	e6dc      	b.n	800c614 <_printf_float+0x1b4>
 800c85a:	f04f 0800 	mov.w	r8, #0
 800c85e:	f104 0b1a 	add.w	fp, r4, #26
 800c862:	e7f4      	b.n	800c84e <_printf_float+0x3ee>
 800c864:	2301      	movs	r3, #1
 800c866:	4642      	mov	r2, r8
 800c868:	e7e1      	b.n	800c82e <_printf_float+0x3ce>
 800c86a:	2301      	movs	r3, #1
 800c86c:	464a      	mov	r2, r9
 800c86e:	4631      	mov	r1, r6
 800c870:	4628      	mov	r0, r5
 800c872:	47b8      	blx	r7
 800c874:	3001      	adds	r0, #1
 800c876:	f43f ae3f 	beq.w	800c4f8 <_printf_float+0x98>
 800c87a:	f108 0801 	add.w	r8, r8, #1
 800c87e:	68e3      	ldr	r3, [r4, #12]
 800c880:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c882:	1a5b      	subs	r3, r3, r1
 800c884:	4543      	cmp	r3, r8
 800c886:	dcf0      	bgt.n	800c86a <_printf_float+0x40a>
 800c888:	e6f8      	b.n	800c67c <_printf_float+0x21c>
 800c88a:	f04f 0800 	mov.w	r8, #0
 800c88e:	f104 0919 	add.w	r9, r4, #25
 800c892:	e7f4      	b.n	800c87e <_printf_float+0x41e>

0800c894 <_printf_common>:
 800c894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c898:	4616      	mov	r6, r2
 800c89a:	4698      	mov	r8, r3
 800c89c:	688a      	ldr	r2, [r1, #8]
 800c89e:	690b      	ldr	r3, [r1, #16]
 800c8a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	bfb8      	it	lt
 800c8a8:	4613      	movlt	r3, r2
 800c8aa:	6033      	str	r3, [r6, #0]
 800c8ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c8b0:	4607      	mov	r7, r0
 800c8b2:	460c      	mov	r4, r1
 800c8b4:	b10a      	cbz	r2, 800c8ba <_printf_common+0x26>
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	6033      	str	r3, [r6, #0]
 800c8ba:	6823      	ldr	r3, [r4, #0]
 800c8bc:	0699      	lsls	r1, r3, #26
 800c8be:	bf42      	ittt	mi
 800c8c0:	6833      	ldrmi	r3, [r6, #0]
 800c8c2:	3302      	addmi	r3, #2
 800c8c4:	6033      	strmi	r3, [r6, #0]
 800c8c6:	6825      	ldr	r5, [r4, #0]
 800c8c8:	f015 0506 	ands.w	r5, r5, #6
 800c8cc:	d106      	bne.n	800c8dc <_printf_common+0x48>
 800c8ce:	f104 0a19 	add.w	sl, r4, #25
 800c8d2:	68e3      	ldr	r3, [r4, #12]
 800c8d4:	6832      	ldr	r2, [r6, #0]
 800c8d6:	1a9b      	subs	r3, r3, r2
 800c8d8:	42ab      	cmp	r3, r5
 800c8da:	dc26      	bgt.n	800c92a <_printf_common+0x96>
 800c8dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c8e0:	6822      	ldr	r2, [r4, #0]
 800c8e2:	3b00      	subs	r3, #0
 800c8e4:	bf18      	it	ne
 800c8e6:	2301      	movne	r3, #1
 800c8e8:	0692      	lsls	r2, r2, #26
 800c8ea:	d42b      	bmi.n	800c944 <_printf_common+0xb0>
 800c8ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c8f0:	4641      	mov	r1, r8
 800c8f2:	4638      	mov	r0, r7
 800c8f4:	47c8      	blx	r9
 800c8f6:	3001      	adds	r0, #1
 800c8f8:	d01e      	beq.n	800c938 <_printf_common+0xa4>
 800c8fa:	6823      	ldr	r3, [r4, #0]
 800c8fc:	6922      	ldr	r2, [r4, #16]
 800c8fe:	f003 0306 	and.w	r3, r3, #6
 800c902:	2b04      	cmp	r3, #4
 800c904:	bf02      	ittt	eq
 800c906:	68e5      	ldreq	r5, [r4, #12]
 800c908:	6833      	ldreq	r3, [r6, #0]
 800c90a:	1aed      	subeq	r5, r5, r3
 800c90c:	68a3      	ldr	r3, [r4, #8]
 800c90e:	bf0c      	ite	eq
 800c910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c914:	2500      	movne	r5, #0
 800c916:	4293      	cmp	r3, r2
 800c918:	bfc4      	itt	gt
 800c91a:	1a9b      	subgt	r3, r3, r2
 800c91c:	18ed      	addgt	r5, r5, r3
 800c91e:	2600      	movs	r6, #0
 800c920:	341a      	adds	r4, #26
 800c922:	42b5      	cmp	r5, r6
 800c924:	d11a      	bne.n	800c95c <_printf_common+0xc8>
 800c926:	2000      	movs	r0, #0
 800c928:	e008      	b.n	800c93c <_printf_common+0xa8>
 800c92a:	2301      	movs	r3, #1
 800c92c:	4652      	mov	r2, sl
 800c92e:	4641      	mov	r1, r8
 800c930:	4638      	mov	r0, r7
 800c932:	47c8      	blx	r9
 800c934:	3001      	adds	r0, #1
 800c936:	d103      	bne.n	800c940 <_printf_common+0xac>
 800c938:	f04f 30ff 	mov.w	r0, #4294967295
 800c93c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c940:	3501      	adds	r5, #1
 800c942:	e7c6      	b.n	800c8d2 <_printf_common+0x3e>
 800c944:	18e1      	adds	r1, r4, r3
 800c946:	1c5a      	adds	r2, r3, #1
 800c948:	2030      	movs	r0, #48	@ 0x30
 800c94a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c94e:	4422      	add	r2, r4
 800c950:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c954:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c958:	3302      	adds	r3, #2
 800c95a:	e7c7      	b.n	800c8ec <_printf_common+0x58>
 800c95c:	2301      	movs	r3, #1
 800c95e:	4622      	mov	r2, r4
 800c960:	4641      	mov	r1, r8
 800c962:	4638      	mov	r0, r7
 800c964:	47c8      	blx	r9
 800c966:	3001      	adds	r0, #1
 800c968:	d0e6      	beq.n	800c938 <_printf_common+0xa4>
 800c96a:	3601      	adds	r6, #1
 800c96c:	e7d9      	b.n	800c922 <_printf_common+0x8e>
	...

0800c970 <_printf_i>:
 800c970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c974:	7e0f      	ldrb	r7, [r1, #24]
 800c976:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c978:	2f78      	cmp	r7, #120	@ 0x78
 800c97a:	4691      	mov	r9, r2
 800c97c:	4680      	mov	r8, r0
 800c97e:	460c      	mov	r4, r1
 800c980:	469a      	mov	sl, r3
 800c982:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c986:	d807      	bhi.n	800c998 <_printf_i+0x28>
 800c988:	2f62      	cmp	r7, #98	@ 0x62
 800c98a:	d80a      	bhi.n	800c9a2 <_printf_i+0x32>
 800c98c:	2f00      	cmp	r7, #0
 800c98e:	f000 80d2 	beq.w	800cb36 <_printf_i+0x1c6>
 800c992:	2f58      	cmp	r7, #88	@ 0x58
 800c994:	f000 80b9 	beq.w	800cb0a <_printf_i+0x19a>
 800c998:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c99c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c9a0:	e03a      	b.n	800ca18 <_printf_i+0xa8>
 800c9a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c9a6:	2b15      	cmp	r3, #21
 800c9a8:	d8f6      	bhi.n	800c998 <_printf_i+0x28>
 800c9aa:	a101      	add	r1, pc, #4	@ (adr r1, 800c9b0 <_printf_i+0x40>)
 800c9ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c9b0:	0800ca09 	.word	0x0800ca09
 800c9b4:	0800ca1d 	.word	0x0800ca1d
 800c9b8:	0800c999 	.word	0x0800c999
 800c9bc:	0800c999 	.word	0x0800c999
 800c9c0:	0800c999 	.word	0x0800c999
 800c9c4:	0800c999 	.word	0x0800c999
 800c9c8:	0800ca1d 	.word	0x0800ca1d
 800c9cc:	0800c999 	.word	0x0800c999
 800c9d0:	0800c999 	.word	0x0800c999
 800c9d4:	0800c999 	.word	0x0800c999
 800c9d8:	0800c999 	.word	0x0800c999
 800c9dc:	0800cb1d 	.word	0x0800cb1d
 800c9e0:	0800ca47 	.word	0x0800ca47
 800c9e4:	0800cad7 	.word	0x0800cad7
 800c9e8:	0800c999 	.word	0x0800c999
 800c9ec:	0800c999 	.word	0x0800c999
 800c9f0:	0800cb3f 	.word	0x0800cb3f
 800c9f4:	0800c999 	.word	0x0800c999
 800c9f8:	0800ca47 	.word	0x0800ca47
 800c9fc:	0800c999 	.word	0x0800c999
 800ca00:	0800c999 	.word	0x0800c999
 800ca04:	0800cadf 	.word	0x0800cadf
 800ca08:	6833      	ldr	r3, [r6, #0]
 800ca0a:	1d1a      	adds	r2, r3, #4
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	6032      	str	r2, [r6, #0]
 800ca10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ca14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ca18:	2301      	movs	r3, #1
 800ca1a:	e09d      	b.n	800cb58 <_printf_i+0x1e8>
 800ca1c:	6833      	ldr	r3, [r6, #0]
 800ca1e:	6820      	ldr	r0, [r4, #0]
 800ca20:	1d19      	adds	r1, r3, #4
 800ca22:	6031      	str	r1, [r6, #0]
 800ca24:	0606      	lsls	r6, r0, #24
 800ca26:	d501      	bpl.n	800ca2c <_printf_i+0xbc>
 800ca28:	681d      	ldr	r5, [r3, #0]
 800ca2a:	e003      	b.n	800ca34 <_printf_i+0xc4>
 800ca2c:	0645      	lsls	r5, r0, #25
 800ca2e:	d5fb      	bpl.n	800ca28 <_printf_i+0xb8>
 800ca30:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ca34:	2d00      	cmp	r5, #0
 800ca36:	da03      	bge.n	800ca40 <_printf_i+0xd0>
 800ca38:	232d      	movs	r3, #45	@ 0x2d
 800ca3a:	426d      	negs	r5, r5
 800ca3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca40:	4859      	ldr	r0, [pc, #356]	@ (800cba8 <_printf_i+0x238>)
 800ca42:	230a      	movs	r3, #10
 800ca44:	e011      	b.n	800ca6a <_printf_i+0xfa>
 800ca46:	6821      	ldr	r1, [r4, #0]
 800ca48:	6833      	ldr	r3, [r6, #0]
 800ca4a:	0608      	lsls	r0, r1, #24
 800ca4c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ca50:	d402      	bmi.n	800ca58 <_printf_i+0xe8>
 800ca52:	0649      	lsls	r1, r1, #25
 800ca54:	bf48      	it	mi
 800ca56:	b2ad      	uxthmi	r5, r5
 800ca58:	2f6f      	cmp	r7, #111	@ 0x6f
 800ca5a:	4853      	ldr	r0, [pc, #332]	@ (800cba8 <_printf_i+0x238>)
 800ca5c:	6033      	str	r3, [r6, #0]
 800ca5e:	bf14      	ite	ne
 800ca60:	230a      	movne	r3, #10
 800ca62:	2308      	moveq	r3, #8
 800ca64:	2100      	movs	r1, #0
 800ca66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ca6a:	6866      	ldr	r6, [r4, #4]
 800ca6c:	60a6      	str	r6, [r4, #8]
 800ca6e:	2e00      	cmp	r6, #0
 800ca70:	bfa2      	ittt	ge
 800ca72:	6821      	ldrge	r1, [r4, #0]
 800ca74:	f021 0104 	bicge.w	r1, r1, #4
 800ca78:	6021      	strge	r1, [r4, #0]
 800ca7a:	b90d      	cbnz	r5, 800ca80 <_printf_i+0x110>
 800ca7c:	2e00      	cmp	r6, #0
 800ca7e:	d04b      	beq.n	800cb18 <_printf_i+0x1a8>
 800ca80:	4616      	mov	r6, r2
 800ca82:	fbb5 f1f3 	udiv	r1, r5, r3
 800ca86:	fb03 5711 	mls	r7, r3, r1, r5
 800ca8a:	5dc7      	ldrb	r7, [r0, r7]
 800ca8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ca90:	462f      	mov	r7, r5
 800ca92:	42bb      	cmp	r3, r7
 800ca94:	460d      	mov	r5, r1
 800ca96:	d9f4      	bls.n	800ca82 <_printf_i+0x112>
 800ca98:	2b08      	cmp	r3, #8
 800ca9a:	d10b      	bne.n	800cab4 <_printf_i+0x144>
 800ca9c:	6823      	ldr	r3, [r4, #0]
 800ca9e:	07df      	lsls	r7, r3, #31
 800caa0:	d508      	bpl.n	800cab4 <_printf_i+0x144>
 800caa2:	6923      	ldr	r3, [r4, #16]
 800caa4:	6861      	ldr	r1, [r4, #4]
 800caa6:	4299      	cmp	r1, r3
 800caa8:	bfde      	ittt	le
 800caaa:	2330      	movle	r3, #48	@ 0x30
 800caac:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cab0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cab4:	1b92      	subs	r2, r2, r6
 800cab6:	6122      	str	r2, [r4, #16]
 800cab8:	f8cd a000 	str.w	sl, [sp]
 800cabc:	464b      	mov	r3, r9
 800cabe:	aa03      	add	r2, sp, #12
 800cac0:	4621      	mov	r1, r4
 800cac2:	4640      	mov	r0, r8
 800cac4:	f7ff fee6 	bl	800c894 <_printf_common>
 800cac8:	3001      	adds	r0, #1
 800caca:	d14a      	bne.n	800cb62 <_printf_i+0x1f2>
 800cacc:	f04f 30ff 	mov.w	r0, #4294967295
 800cad0:	b004      	add	sp, #16
 800cad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cad6:	6823      	ldr	r3, [r4, #0]
 800cad8:	f043 0320 	orr.w	r3, r3, #32
 800cadc:	6023      	str	r3, [r4, #0]
 800cade:	4833      	ldr	r0, [pc, #204]	@ (800cbac <_printf_i+0x23c>)
 800cae0:	2778      	movs	r7, #120	@ 0x78
 800cae2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cae6:	6823      	ldr	r3, [r4, #0]
 800cae8:	6831      	ldr	r1, [r6, #0]
 800caea:	061f      	lsls	r7, r3, #24
 800caec:	f851 5b04 	ldr.w	r5, [r1], #4
 800caf0:	d402      	bmi.n	800caf8 <_printf_i+0x188>
 800caf2:	065f      	lsls	r7, r3, #25
 800caf4:	bf48      	it	mi
 800caf6:	b2ad      	uxthmi	r5, r5
 800caf8:	6031      	str	r1, [r6, #0]
 800cafa:	07d9      	lsls	r1, r3, #31
 800cafc:	bf44      	itt	mi
 800cafe:	f043 0320 	orrmi.w	r3, r3, #32
 800cb02:	6023      	strmi	r3, [r4, #0]
 800cb04:	b11d      	cbz	r5, 800cb0e <_printf_i+0x19e>
 800cb06:	2310      	movs	r3, #16
 800cb08:	e7ac      	b.n	800ca64 <_printf_i+0xf4>
 800cb0a:	4827      	ldr	r0, [pc, #156]	@ (800cba8 <_printf_i+0x238>)
 800cb0c:	e7e9      	b.n	800cae2 <_printf_i+0x172>
 800cb0e:	6823      	ldr	r3, [r4, #0]
 800cb10:	f023 0320 	bic.w	r3, r3, #32
 800cb14:	6023      	str	r3, [r4, #0]
 800cb16:	e7f6      	b.n	800cb06 <_printf_i+0x196>
 800cb18:	4616      	mov	r6, r2
 800cb1a:	e7bd      	b.n	800ca98 <_printf_i+0x128>
 800cb1c:	6833      	ldr	r3, [r6, #0]
 800cb1e:	6825      	ldr	r5, [r4, #0]
 800cb20:	6961      	ldr	r1, [r4, #20]
 800cb22:	1d18      	adds	r0, r3, #4
 800cb24:	6030      	str	r0, [r6, #0]
 800cb26:	062e      	lsls	r6, r5, #24
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	d501      	bpl.n	800cb30 <_printf_i+0x1c0>
 800cb2c:	6019      	str	r1, [r3, #0]
 800cb2e:	e002      	b.n	800cb36 <_printf_i+0x1c6>
 800cb30:	0668      	lsls	r0, r5, #25
 800cb32:	d5fb      	bpl.n	800cb2c <_printf_i+0x1bc>
 800cb34:	8019      	strh	r1, [r3, #0]
 800cb36:	2300      	movs	r3, #0
 800cb38:	6123      	str	r3, [r4, #16]
 800cb3a:	4616      	mov	r6, r2
 800cb3c:	e7bc      	b.n	800cab8 <_printf_i+0x148>
 800cb3e:	6833      	ldr	r3, [r6, #0]
 800cb40:	1d1a      	adds	r2, r3, #4
 800cb42:	6032      	str	r2, [r6, #0]
 800cb44:	681e      	ldr	r6, [r3, #0]
 800cb46:	6862      	ldr	r2, [r4, #4]
 800cb48:	2100      	movs	r1, #0
 800cb4a:	4630      	mov	r0, r6
 800cb4c:	f7f3 fb88 	bl	8000260 <memchr>
 800cb50:	b108      	cbz	r0, 800cb56 <_printf_i+0x1e6>
 800cb52:	1b80      	subs	r0, r0, r6
 800cb54:	6060      	str	r0, [r4, #4]
 800cb56:	6863      	ldr	r3, [r4, #4]
 800cb58:	6123      	str	r3, [r4, #16]
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb60:	e7aa      	b.n	800cab8 <_printf_i+0x148>
 800cb62:	6923      	ldr	r3, [r4, #16]
 800cb64:	4632      	mov	r2, r6
 800cb66:	4649      	mov	r1, r9
 800cb68:	4640      	mov	r0, r8
 800cb6a:	47d0      	blx	sl
 800cb6c:	3001      	adds	r0, #1
 800cb6e:	d0ad      	beq.n	800cacc <_printf_i+0x15c>
 800cb70:	6823      	ldr	r3, [r4, #0]
 800cb72:	079b      	lsls	r3, r3, #30
 800cb74:	d413      	bmi.n	800cb9e <_printf_i+0x22e>
 800cb76:	68e0      	ldr	r0, [r4, #12]
 800cb78:	9b03      	ldr	r3, [sp, #12]
 800cb7a:	4298      	cmp	r0, r3
 800cb7c:	bfb8      	it	lt
 800cb7e:	4618      	movlt	r0, r3
 800cb80:	e7a6      	b.n	800cad0 <_printf_i+0x160>
 800cb82:	2301      	movs	r3, #1
 800cb84:	4632      	mov	r2, r6
 800cb86:	4649      	mov	r1, r9
 800cb88:	4640      	mov	r0, r8
 800cb8a:	47d0      	blx	sl
 800cb8c:	3001      	adds	r0, #1
 800cb8e:	d09d      	beq.n	800cacc <_printf_i+0x15c>
 800cb90:	3501      	adds	r5, #1
 800cb92:	68e3      	ldr	r3, [r4, #12]
 800cb94:	9903      	ldr	r1, [sp, #12]
 800cb96:	1a5b      	subs	r3, r3, r1
 800cb98:	42ab      	cmp	r3, r5
 800cb9a:	dcf2      	bgt.n	800cb82 <_printf_i+0x212>
 800cb9c:	e7eb      	b.n	800cb76 <_printf_i+0x206>
 800cb9e:	2500      	movs	r5, #0
 800cba0:	f104 0619 	add.w	r6, r4, #25
 800cba4:	e7f5      	b.n	800cb92 <_printf_i+0x222>
 800cba6:	bf00      	nop
 800cba8:	080113fb 	.word	0x080113fb
 800cbac:	0801140c 	.word	0x0801140c

0800cbb0 <_scanf_float>:
 800cbb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbb4:	b087      	sub	sp, #28
 800cbb6:	4617      	mov	r7, r2
 800cbb8:	9303      	str	r3, [sp, #12]
 800cbba:	688b      	ldr	r3, [r1, #8]
 800cbbc:	1e5a      	subs	r2, r3, #1
 800cbbe:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800cbc2:	bf81      	itttt	hi
 800cbc4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800cbc8:	eb03 0b05 	addhi.w	fp, r3, r5
 800cbcc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800cbd0:	608b      	strhi	r3, [r1, #8]
 800cbd2:	680b      	ldr	r3, [r1, #0]
 800cbd4:	460a      	mov	r2, r1
 800cbd6:	f04f 0500 	mov.w	r5, #0
 800cbda:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800cbde:	f842 3b1c 	str.w	r3, [r2], #28
 800cbe2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cbe6:	4680      	mov	r8, r0
 800cbe8:	460c      	mov	r4, r1
 800cbea:	bf98      	it	ls
 800cbec:	f04f 0b00 	movls.w	fp, #0
 800cbf0:	9201      	str	r2, [sp, #4]
 800cbf2:	4616      	mov	r6, r2
 800cbf4:	46aa      	mov	sl, r5
 800cbf6:	46a9      	mov	r9, r5
 800cbf8:	9502      	str	r5, [sp, #8]
 800cbfa:	68a2      	ldr	r2, [r4, #8]
 800cbfc:	b152      	cbz	r2, 800cc14 <_scanf_float+0x64>
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	781b      	ldrb	r3, [r3, #0]
 800cc02:	2b4e      	cmp	r3, #78	@ 0x4e
 800cc04:	d864      	bhi.n	800ccd0 <_scanf_float+0x120>
 800cc06:	2b40      	cmp	r3, #64	@ 0x40
 800cc08:	d83c      	bhi.n	800cc84 <_scanf_float+0xd4>
 800cc0a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800cc0e:	b2c8      	uxtb	r0, r1
 800cc10:	280e      	cmp	r0, #14
 800cc12:	d93a      	bls.n	800cc8a <_scanf_float+0xda>
 800cc14:	f1b9 0f00 	cmp.w	r9, #0
 800cc18:	d003      	beq.n	800cc22 <_scanf_float+0x72>
 800cc1a:	6823      	ldr	r3, [r4, #0]
 800cc1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cc20:	6023      	str	r3, [r4, #0]
 800cc22:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cc26:	f1ba 0f01 	cmp.w	sl, #1
 800cc2a:	f200 8117 	bhi.w	800ce5c <_scanf_float+0x2ac>
 800cc2e:	9b01      	ldr	r3, [sp, #4]
 800cc30:	429e      	cmp	r6, r3
 800cc32:	f200 8108 	bhi.w	800ce46 <_scanf_float+0x296>
 800cc36:	2001      	movs	r0, #1
 800cc38:	b007      	add	sp, #28
 800cc3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc3e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800cc42:	2a0d      	cmp	r2, #13
 800cc44:	d8e6      	bhi.n	800cc14 <_scanf_float+0x64>
 800cc46:	a101      	add	r1, pc, #4	@ (adr r1, 800cc4c <_scanf_float+0x9c>)
 800cc48:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cc4c:	0800cd93 	.word	0x0800cd93
 800cc50:	0800cc15 	.word	0x0800cc15
 800cc54:	0800cc15 	.word	0x0800cc15
 800cc58:	0800cc15 	.word	0x0800cc15
 800cc5c:	0800cdf3 	.word	0x0800cdf3
 800cc60:	0800cdcb 	.word	0x0800cdcb
 800cc64:	0800cc15 	.word	0x0800cc15
 800cc68:	0800cc15 	.word	0x0800cc15
 800cc6c:	0800cda1 	.word	0x0800cda1
 800cc70:	0800cc15 	.word	0x0800cc15
 800cc74:	0800cc15 	.word	0x0800cc15
 800cc78:	0800cc15 	.word	0x0800cc15
 800cc7c:	0800cc15 	.word	0x0800cc15
 800cc80:	0800cd59 	.word	0x0800cd59
 800cc84:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800cc88:	e7db      	b.n	800cc42 <_scanf_float+0x92>
 800cc8a:	290e      	cmp	r1, #14
 800cc8c:	d8c2      	bhi.n	800cc14 <_scanf_float+0x64>
 800cc8e:	a001      	add	r0, pc, #4	@ (adr r0, 800cc94 <_scanf_float+0xe4>)
 800cc90:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cc94:	0800cd49 	.word	0x0800cd49
 800cc98:	0800cc15 	.word	0x0800cc15
 800cc9c:	0800cd49 	.word	0x0800cd49
 800cca0:	0800cddf 	.word	0x0800cddf
 800cca4:	0800cc15 	.word	0x0800cc15
 800cca8:	0800ccf1 	.word	0x0800ccf1
 800ccac:	0800cd2f 	.word	0x0800cd2f
 800ccb0:	0800cd2f 	.word	0x0800cd2f
 800ccb4:	0800cd2f 	.word	0x0800cd2f
 800ccb8:	0800cd2f 	.word	0x0800cd2f
 800ccbc:	0800cd2f 	.word	0x0800cd2f
 800ccc0:	0800cd2f 	.word	0x0800cd2f
 800ccc4:	0800cd2f 	.word	0x0800cd2f
 800ccc8:	0800cd2f 	.word	0x0800cd2f
 800cccc:	0800cd2f 	.word	0x0800cd2f
 800ccd0:	2b6e      	cmp	r3, #110	@ 0x6e
 800ccd2:	d809      	bhi.n	800cce8 <_scanf_float+0x138>
 800ccd4:	2b60      	cmp	r3, #96	@ 0x60
 800ccd6:	d8b2      	bhi.n	800cc3e <_scanf_float+0x8e>
 800ccd8:	2b54      	cmp	r3, #84	@ 0x54
 800ccda:	d07b      	beq.n	800cdd4 <_scanf_float+0x224>
 800ccdc:	2b59      	cmp	r3, #89	@ 0x59
 800ccde:	d199      	bne.n	800cc14 <_scanf_float+0x64>
 800cce0:	2d07      	cmp	r5, #7
 800cce2:	d197      	bne.n	800cc14 <_scanf_float+0x64>
 800cce4:	2508      	movs	r5, #8
 800cce6:	e02c      	b.n	800cd42 <_scanf_float+0x192>
 800cce8:	2b74      	cmp	r3, #116	@ 0x74
 800ccea:	d073      	beq.n	800cdd4 <_scanf_float+0x224>
 800ccec:	2b79      	cmp	r3, #121	@ 0x79
 800ccee:	e7f6      	b.n	800ccde <_scanf_float+0x12e>
 800ccf0:	6821      	ldr	r1, [r4, #0]
 800ccf2:	05c8      	lsls	r0, r1, #23
 800ccf4:	d51b      	bpl.n	800cd2e <_scanf_float+0x17e>
 800ccf6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ccfa:	6021      	str	r1, [r4, #0]
 800ccfc:	f109 0901 	add.w	r9, r9, #1
 800cd00:	f1bb 0f00 	cmp.w	fp, #0
 800cd04:	d003      	beq.n	800cd0e <_scanf_float+0x15e>
 800cd06:	3201      	adds	r2, #1
 800cd08:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cd0c:	60a2      	str	r2, [r4, #8]
 800cd0e:	68a3      	ldr	r3, [r4, #8]
 800cd10:	3b01      	subs	r3, #1
 800cd12:	60a3      	str	r3, [r4, #8]
 800cd14:	6923      	ldr	r3, [r4, #16]
 800cd16:	3301      	adds	r3, #1
 800cd18:	6123      	str	r3, [r4, #16]
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	3b01      	subs	r3, #1
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	607b      	str	r3, [r7, #4]
 800cd22:	f340 8087 	ble.w	800ce34 <_scanf_float+0x284>
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	3301      	adds	r3, #1
 800cd2a:	603b      	str	r3, [r7, #0]
 800cd2c:	e765      	b.n	800cbfa <_scanf_float+0x4a>
 800cd2e:	eb1a 0105 	adds.w	r1, sl, r5
 800cd32:	f47f af6f 	bne.w	800cc14 <_scanf_float+0x64>
 800cd36:	6822      	ldr	r2, [r4, #0]
 800cd38:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800cd3c:	6022      	str	r2, [r4, #0]
 800cd3e:	460d      	mov	r5, r1
 800cd40:	468a      	mov	sl, r1
 800cd42:	f806 3b01 	strb.w	r3, [r6], #1
 800cd46:	e7e2      	b.n	800cd0e <_scanf_float+0x15e>
 800cd48:	6822      	ldr	r2, [r4, #0]
 800cd4a:	0610      	lsls	r0, r2, #24
 800cd4c:	f57f af62 	bpl.w	800cc14 <_scanf_float+0x64>
 800cd50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cd54:	6022      	str	r2, [r4, #0]
 800cd56:	e7f4      	b.n	800cd42 <_scanf_float+0x192>
 800cd58:	f1ba 0f00 	cmp.w	sl, #0
 800cd5c:	d10e      	bne.n	800cd7c <_scanf_float+0x1cc>
 800cd5e:	f1b9 0f00 	cmp.w	r9, #0
 800cd62:	d10e      	bne.n	800cd82 <_scanf_float+0x1d2>
 800cd64:	6822      	ldr	r2, [r4, #0]
 800cd66:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cd6a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cd6e:	d108      	bne.n	800cd82 <_scanf_float+0x1d2>
 800cd70:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cd74:	6022      	str	r2, [r4, #0]
 800cd76:	f04f 0a01 	mov.w	sl, #1
 800cd7a:	e7e2      	b.n	800cd42 <_scanf_float+0x192>
 800cd7c:	f1ba 0f02 	cmp.w	sl, #2
 800cd80:	d055      	beq.n	800ce2e <_scanf_float+0x27e>
 800cd82:	2d01      	cmp	r5, #1
 800cd84:	d002      	beq.n	800cd8c <_scanf_float+0x1dc>
 800cd86:	2d04      	cmp	r5, #4
 800cd88:	f47f af44 	bne.w	800cc14 <_scanf_float+0x64>
 800cd8c:	3501      	adds	r5, #1
 800cd8e:	b2ed      	uxtb	r5, r5
 800cd90:	e7d7      	b.n	800cd42 <_scanf_float+0x192>
 800cd92:	f1ba 0f01 	cmp.w	sl, #1
 800cd96:	f47f af3d 	bne.w	800cc14 <_scanf_float+0x64>
 800cd9a:	f04f 0a02 	mov.w	sl, #2
 800cd9e:	e7d0      	b.n	800cd42 <_scanf_float+0x192>
 800cda0:	b97d      	cbnz	r5, 800cdc2 <_scanf_float+0x212>
 800cda2:	f1b9 0f00 	cmp.w	r9, #0
 800cda6:	f47f af38 	bne.w	800cc1a <_scanf_float+0x6a>
 800cdaa:	6822      	ldr	r2, [r4, #0]
 800cdac:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cdb0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cdb4:	f040 8101 	bne.w	800cfba <_scanf_float+0x40a>
 800cdb8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cdbc:	6022      	str	r2, [r4, #0]
 800cdbe:	2501      	movs	r5, #1
 800cdc0:	e7bf      	b.n	800cd42 <_scanf_float+0x192>
 800cdc2:	2d03      	cmp	r5, #3
 800cdc4:	d0e2      	beq.n	800cd8c <_scanf_float+0x1dc>
 800cdc6:	2d05      	cmp	r5, #5
 800cdc8:	e7de      	b.n	800cd88 <_scanf_float+0x1d8>
 800cdca:	2d02      	cmp	r5, #2
 800cdcc:	f47f af22 	bne.w	800cc14 <_scanf_float+0x64>
 800cdd0:	2503      	movs	r5, #3
 800cdd2:	e7b6      	b.n	800cd42 <_scanf_float+0x192>
 800cdd4:	2d06      	cmp	r5, #6
 800cdd6:	f47f af1d 	bne.w	800cc14 <_scanf_float+0x64>
 800cdda:	2507      	movs	r5, #7
 800cddc:	e7b1      	b.n	800cd42 <_scanf_float+0x192>
 800cdde:	6822      	ldr	r2, [r4, #0]
 800cde0:	0591      	lsls	r1, r2, #22
 800cde2:	f57f af17 	bpl.w	800cc14 <_scanf_float+0x64>
 800cde6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800cdea:	6022      	str	r2, [r4, #0]
 800cdec:	f8cd 9008 	str.w	r9, [sp, #8]
 800cdf0:	e7a7      	b.n	800cd42 <_scanf_float+0x192>
 800cdf2:	6822      	ldr	r2, [r4, #0]
 800cdf4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800cdf8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800cdfc:	d006      	beq.n	800ce0c <_scanf_float+0x25c>
 800cdfe:	0550      	lsls	r0, r2, #21
 800ce00:	f57f af08 	bpl.w	800cc14 <_scanf_float+0x64>
 800ce04:	f1b9 0f00 	cmp.w	r9, #0
 800ce08:	f000 80d7 	beq.w	800cfba <_scanf_float+0x40a>
 800ce0c:	0591      	lsls	r1, r2, #22
 800ce0e:	bf58      	it	pl
 800ce10:	9902      	ldrpl	r1, [sp, #8]
 800ce12:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ce16:	bf58      	it	pl
 800ce18:	eba9 0101 	subpl.w	r1, r9, r1
 800ce1c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ce20:	bf58      	it	pl
 800ce22:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ce26:	6022      	str	r2, [r4, #0]
 800ce28:	f04f 0900 	mov.w	r9, #0
 800ce2c:	e789      	b.n	800cd42 <_scanf_float+0x192>
 800ce2e:	f04f 0a03 	mov.w	sl, #3
 800ce32:	e786      	b.n	800cd42 <_scanf_float+0x192>
 800ce34:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ce38:	4639      	mov	r1, r7
 800ce3a:	4640      	mov	r0, r8
 800ce3c:	4798      	blx	r3
 800ce3e:	2800      	cmp	r0, #0
 800ce40:	f43f aedb 	beq.w	800cbfa <_scanf_float+0x4a>
 800ce44:	e6e6      	b.n	800cc14 <_scanf_float+0x64>
 800ce46:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ce4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ce4e:	463a      	mov	r2, r7
 800ce50:	4640      	mov	r0, r8
 800ce52:	4798      	blx	r3
 800ce54:	6923      	ldr	r3, [r4, #16]
 800ce56:	3b01      	subs	r3, #1
 800ce58:	6123      	str	r3, [r4, #16]
 800ce5a:	e6e8      	b.n	800cc2e <_scanf_float+0x7e>
 800ce5c:	1e6b      	subs	r3, r5, #1
 800ce5e:	2b06      	cmp	r3, #6
 800ce60:	d824      	bhi.n	800ceac <_scanf_float+0x2fc>
 800ce62:	2d02      	cmp	r5, #2
 800ce64:	d836      	bhi.n	800ced4 <_scanf_float+0x324>
 800ce66:	9b01      	ldr	r3, [sp, #4]
 800ce68:	429e      	cmp	r6, r3
 800ce6a:	f67f aee4 	bls.w	800cc36 <_scanf_float+0x86>
 800ce6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ce72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ce76:	463a      	mov	r2, r7
 800ce78:	4640      	mov	r0, r8
 800ce7a:	4798      	blx	r3
 800ce7c:	6923      	ldr	r3, [r4, #16]
 800ce7e:	3b01      	subs	r3, #1
 800ce80:	6123      	str	r3, [r4, #16]
 800ce82:	e7f0      	b.n	800ce66 <_scanf_float+0x2b6>
 800ce84:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ce88:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800ce8c:	463a      	mov	r2, r7
 800ce8e:	4640      	mov	r0, r8
 800ce90:	4798      	blx	r3
 800ce92:	6923      	ldr	r3, [r4, #16]
 800ce94:	3b01      	subs	r3, #1
 800ce96:	6123      	str	r3, [r4, #16]
 800ce98:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ce9c:	fa5f fa8a 	uxtb.w	sl, sl
 800cea0:	f1ba 0f02 	cmp.w	sl, #2
 800cea4:	d1ee      	bne.n	800ce84 <_scanf_float+0x2d4>
 800cea6:	3d03      	subs	r5, #3
 800cea8:	b2ed      	uxtb	r5, r5
 800ceaa:	1b76      	subs	r6, r6, r5
 800ceac:	6823      	ldr	r3, [r4, #0]
 800ceae:	05da      	lsls	r2, r3, #23
 800ceb0:	d530      	bpl.n	800cf14 <_scanf_float+0x364>
 800ceb2:	055b      	lsls	r3, r3, #21
 800ceb4:	d511      	bpl.n	800ceda <_scanf_float+0x32a>
 800ceb6:	9b01      	ldr	r3, [sp, #4]
 800ceb8:	429e      	cmp	r6, r3
 800ceba:	f67f aebc 	bls.w	800cc36 <_scanf_float+0x86>
 800cebe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cec2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cec6:	463a      	mov	r2, r7
 800cec8:	4640      	mov	r0, r8
 800ceca:	4798      	blx	r3
 800cecc:	6923      	ldr	r3, [r4, #16]
 800cece:	3b01      	subs	r3, #1
 800ced0:	6123      	str	r3, [r4, #16]
 800ced2:	e7f0      	b.n	800ceb6 <_scanf_float+0x306>
 800ced4:	46aa      	mov	sl, r5
 800ced6:	46b3      	mov	fp, r6
 800ced8:	e7de      	b.n	800ce98 <_scanf_float+0x2e8>
 800ceda:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cede:	6923      	ldr	r3, [r4, #16]
 800cee0:	2965      	cmp	r1, #101	@ 0x65
 800cee2:	f103 33ff 	add.w	r3, r3, #4294967295
 800cee6:	f106 35ff 	add.w	r5, r6, #4294967295
 800ceea:	6123      	str	r3, [r4, #16]
 800ceec:	d00c      	beq.n	800cf08 <_scanf_float+0x358>
 800ceee:	2945      	cmp	r1, #69	@ 0x45
 800cef0:	d00a      	beq.n	800cf08 <_scanf_float+0x358>
 800cef2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cef6:	463a      	mov	r2, r7
 800cef8:	4640      	mov	r0, r8
 800cefa:	4798      	blx	r3
 800cefc:	6923      	ldr	r3, [r4, #16]
 800cefe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cf02:	3b01      	subs	r3, #1
 800cf04:	1eb5      	subs	r5, r6, #2
 800cf06:	6123      	str	r3, [r4, #16]
 800cf08:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cf0c:	463a      	mov	r2, r7
 800cf0e:	4640      	mov	r0, r8
 800cf10:	4798      	blx	r3
 800cf12:	462e      	mov	r6, r5
 800cf14:	6822      	ldr	r2, [r4, #0]
 800cf16:	f012 0210 	ands.w	r2, r2, #16
 800cf1a:	d001      	beq.n	800cf20 <_scanf_float+0x370>
 800cf1c:	2000      	movs	r0, #0
 800cf1e:	e68b      	b.n	800cc38 <_scanf_float+0x88>
 800cf20:	7032      	strb	r2, [r6, #0]
 800cf22:	6823      	ldr	r3, [r4, #0]
 800cf24:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800cf28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf2c:	d11a      	bne.n	800cf64 <_scanf_float+0x3b4>
 800cf2e:	9b02      	ldr	r3, [sp, #8]
 800cf30:	454b      	cmp	r3, r9
 800cf32:	eba3 0209 	sub.w	r2, r3, r9
 800cf36:	d121      	bne.n	800cf7c <_scanf_float+0x3cc>
 800cf38:	9901      	ldr	r1, [sp, #4]
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	4640      	mov	r0, r8
 800cf3e:	f002 fd69 	bl	800fa14 <_strtod_r>
 800cf42:	9b03      	ldr	r3, [sp, #12]
 800cf44:	6821      	ldr	r1, [r4, #0]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	f011 0f02 	tst.w	r1, #2
 800cf4c:	f103 0204 	add.w	r2, r3, #4
 800cf50:	d01f      	beq.n	800cf92 <_scanf_float+0x3e2>
 800cf52:	9903      	ldr	r1, [sp, #12]
 800cf54:	600a      	str	r2, [r1, #0]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	ed83 0b00 	vstr	d0, [r3]
 800cf5c:	68e3      	ldr	r3, [r4, #12]
 800cf5e:	3301      	adds	r3, #1
 800cf60:	60e3      	str	r3, [r4, #12]
 800cf62:	e7db      	b.n	800cf1c <_scanf_float+0x36c>
 800cf64:	9b04      	ldr	r3, [sp, #16]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d0e6      	beq.n	800cf38 <_scanf_float+0x388>
 800cf6a:	9905      	ldr	r1, [sp, #20]
 800cf6c:	230a      	movs	r3, #10
 800cf6e:	3101      	adds	r1, #1
 800cf70:	4640      	mov	r0, r8
 800cf72:	f7ff f9d9 	bl	800c328 <_strtol_r>
 800cf76:	9b04      	ldr	r3, [sp, #16]
 800cf78:	9e05      	ldr	r6, [sp, #20]
 800cf7a:	1ac2      	subs	r2, r0, r3
 800cf7c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800cf80:	429e      	cmp	r6, r3
 800cf82:	bf28      	it	cs
 800cf84:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800cf88:	490d      	ldr	r1, [pc, #52]	@ (800cfc0 <_scanf_float+0x410>)
 800cf8a:	4630      	mov	r0, r6
 800cf8c:	f000 f982 	bl	800d294 <siprintf>
 800cf90:	e7d2      	b.n	800cf38 <_scanf_float+0x388>
 800cf92:	f011 0f04 	tst.w	r1, #4
 800cf96:	9903      	ldr	r1, [sp, #12]
 800cf98:	600a      	str	r2, [r1, #0]
 800cf9a:	d1dc      	bne.n	800cf56 <_scanf_float+0x3a6>
 800cf9c:	eeb4 0b40 	vcmp.f64	d0, d0
 800cfa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfa4:	681d      	ldr	r5, [r3, #0]
 800cfa6:	d705      	bvc.n	800cfb4 <_scanf_float+0x404>
 800cfa8:	4806      	ldr	r0, [pc, #24]	@ (800cfc4 <_scanf_float+0x414>)
 800cfaa:	f000 fbd1 	bl	800d750 <nanf>
 800cfae:	ed85 0a00 	vstr	s0, [r5]
 800cfb2:	e7d3      	b.n	800cf5c <_scanf_float+0x3ac>
 800cfb4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800cfb8:	e7f9      	b.n	800cfae <_scanf_float+0x3fe>
 800cfba:	f04f 0900 	mov.w	r9, #0
 800cfbe:	e630      	b.n	800cc22 <_scanf_float+0x72>
 800cfc0:	0801141d 	.word	0x0801141d
 800cfc4:	080114ce 	.word	0x080114ce

0800cfc8 <std>:
 800cfc8:	2300      	movs	r3, #0
 800cfca:	b510      	push	{r4, lr}
 800cfcc:	4604      	mov	r4, r0
 800cfce:	e9c0 3300 	strd	r3, r3, [r0]
 800cfd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cfd6:	6083      	str	r3, [r0, #8]
 800cfd8:	8181      	strh	r1, [r0, #12]
 800cfda:	6643      	str	r3, [r0, #100]	@ 0x64
 800cfdc:	81c2      	strh	r2, [r0, #14]
 800cfde:	6183      	str	r3, [r0, #24]
 800cfe0:	4619      	mov	r1, r3
 800cfe2:	2208      	movs	r2, #8
 800cfe4:	305c      	adds	r0, #92	@ 0x5c
 800cfe6:	f000 fa4d 	bl	800d484 <memset>
 800cfea:	4b0d      	ldr	r3, [pc, #52]	@ (800d020 <std+0x58>)
 800cfec:	6263      	str	r3, [r4, #36]	@ 0x24
 800cfee:	4b0d      	ldr	r3, [pc, #52]	@ (800d024 <std+0x5c>)
 800cff0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cff2:	4b0d      	ldr	r3, [pc, #52]	@ (800d028 <std+0x60>)
 800cff4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cff6:	4b0d      	ldr	r3, [pc, #52]	@ (800d02c <std+0x64>)
 800cff8:	6323      	str	r3, [r4, #48]	@ 0x30
 800cffa:	4b0d      	ldr	r3, [pc, #52]	@ (800d030 <std+0x68>)
 800cffc:	6224      	str	r4, [r4, #32]
 800cffe:	429c      	cmp	r4, r3
 800d000:	d006      	beq.n	800d010 <std+0x48>
 800d002:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d006:	4294      	cmp	r4, r2
 800d008:	d002      	beq.n	800d010 <std+0x48>
 800d00a:	33d0      	adds	r3, #208	@ 0xd0
 800d00c:	429c      	cmp	r4, r3
 800d00e:	d105      	bne.n	800d01c <std+0x54>
 800d010:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d018:	f000 bb88 	b.w	800d72c <__retarget_lock_init_recursive>
 800d01c:	bd10      	pop	{r4, pc}
 800d01e:	bf00      	nop
 800d020:	0800d2d5 	.word	0x0800d2d5
 800d024:	0800d2f7 	.word	0x0800d2f7
 800d028:	0800d32f 	.word	0x0800d32f
 800d02c:	0800d353 	.word	0x0800d353
 800d030:	20004a7c 	.word	0x20004a7c

0800d034 <stdio_exit_handler>:
 800d034:	4a02      	ldr	r2, [pc, #8]	@ (800d040 <stdio_exit_handler+0xc>)
 800d036:	4903      	ldr	r1, [pc, #12]	@ (800d044 <stdio_exit_handler+0x10>)
 800d038:	4803      	ldr	r0, [pc, #12]	@ (800d048 <stdio_exit_handler+0x14>)
 800d03a:	f000 b869 	b.w	800d110 <_fwalk_sglue>
 800d03e:	bf00      	nop
 800d040:	20000250 	.word	0x20000250
 800d044:	0801005d 	.word	0x0801005d
 800d048:	20000260 	.word	0x20000260

0800d04c <cleanup_stdio>:
 800d04c:	6841      	ldr	r1, [r0, #4]
 800d04e:	4b0c      	ldr	r3, [pc, #48]	@ (800d080 <cleanup_stdio+0x34>)
 800d050:	4299      	cmp	r1, r3
 800d052:	b510      	push	{r4, lr}
 800d054:	4604      	mov	r4, r0
 800d056:	d001      	beq.n	800d05c <cleanup_stdio+0x10>
 800d058:	f003 f800 	bl	801005c <_fflush_r>
 800d05c:	68a1      	ldr	r1, [r4, #8]
 800d05e:	4b09      	ldr	r3, [pc, #36]	@ (800d084 <cleanup_stdio+0x38>)
 800d060:	4299      	cmp	r1, r3
 800d062:	d002      	beq.n	800d06a <cleanup_stdio+0x1e>
 800d064:	4620      	mov	r0, r4
 800d066:	f002 fff9 	bl	801005c <_fflush_r>
 800d06a:	68e1      	ldr	r1, [r4, #12]
 800d06c:	4b06      	ldr	r3, [pc, #24]	@ (800d088 <cleanup_stdio+0x3c>)
 800d06e:	4299      	cmp	r1, r3
 800d070:	d004      	beq.n	800d07c <cleanup_stdio+0x30>
 800d072:	4620      	mov	r0, r4
 800d074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d078:	f002 bff0 	b.w	801005c <_fflush_r>
 800d07c:	bd10      	pop	{r4, pc}
 800d07e:	bf00      	nop
 800d080:	20004a7c 	.word	0x20004a7c
 800d084:	20004ae4 	.word	0x20004ae4
 800d088:	20004b4c 	.word	0x20004b4c

0800d08c <global_stdio_init.part.0>:
 800d08c:	b510      	push	{r4, lr}
 800d08e:	4b0b      	ldr	r3, [pc, #44]	@ (800d0bc <global_stdio_init.part.0+0x30>)
 800d090:	4c0b      	ldr	r4, [pc, #44]	@ (800d0c0 <global_stdio_init.part.0+0x34>)
 800d092:	4a0c      	ldr	r2, [pc, #48]	@ (800d0c4 <global_stdio_init.part.0+0x38>)
 800d094:	601a      	str	r2, [r3, #0]
 800d096:	4620      	mov	r0, r4
 800d098:	2200      	movs	r2, #0
 800d09a:	2104      	movs	r1, #4
 800d09c:	f7ff ff94 	bl	800cfc8 <std>
 800d0a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d0a4:	2201      	movs	r2, #1
 800d0a6:	2109      	movs	r1, #9
 800d0a8:	f7ff ff8e 	bl	800cfc8 <std>
 800d0ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d0b0:	2202      	movs	r2, #2
 800d0b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0b6:	2112      	movs	r1, #18
 800d0b8:	f7ff bf86 	b.w	800cfc8 <std>
 800d0bc:	20004bb4 	.word	0x20004bb4
 800d0c0:	20004a7c 	.word	0x20004a7c
 800d0c4:	0800d035 	.word	0x0800d035

0800d0c8 <__sfp_lock_acquire>:
 800d0c8:	4801      	ldr	r0, [pc, #4]	@ (800d0d0 <__sfp_lock_acquire+0x8>)
 800d0ca:	f000 bb30 	b.w	800d72e <__retarget_lock_acquire_recursive>
 800d0ce:	bf00      	nop
 800d0d0:	20004bbd 	.word	0x20004bbd

0800d0d4 <__sfp_lock_release>:
 800d0d4:	4801      	ldr	r0, [pc, #4]	@ (800d0dc <__sfp_lock_release+0x8>)
 800d0d6:	f000 bb2b 	b.w	800d730 <__retarget_lock_release_recursive>
 800d0da:	bf00      	nop
 800d0dc:	20004bbd 	.word	0x20004bbd

0800d0e0 <__sinit>:
 800d0e0:	b510      	push	{r4, lr}
 800d0e2:	4604      	mov	r4, r0
 800d0e4:	f7ff fff0 	bl	800d0c8 <__sfp_lock_acquire>
 800d0e8:	6a23      	ldr	r3, [r4, #32]
 800d0ea:	b11b      	cbz	r3, 800d0f4 <__sinit+0x14>
 800d0ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0f0:	f7ff bff0 	b.w	800d0d4 <__sfp_lock_release>
 800d0f4:	4b04      	ldr	r3, [pc, #16]	@ (800d108 <__sinit+0x28>)
 800d0f6:	6223      	str	r3, [r4, #32]
 800d0f8:	4b04      	ldr	r3, [pc, #16]	@ (800d10c <__sinit+0x2c>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d1f5      	bne.n	800d0ec <__sinit+0xc>
 800d100:	f7ff ffc4 	bl	800d08c <global_stdio_init.part.0>
 800d104:	e7f2      	b.n	800d0ec <__sinit+0xc>
 800d106:	bf00      	nop
 800d108:	0800d04d 	.word	0x0800d04d
 800d10c:	20004bb4 	.word	0x20004bb4

0800d110 <_fwalk_sglue>:
 800d110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d114:	4607      	mov	r7, r0
 800d116:	4688      	mov	r8, r1
 800d118:	4614      	mov	r4, r2
 800d11a:	2600      	movs	r6, #0
 800d11c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d120:	f1b9 0901 	subs.w	r9, r9, #1
 800d124:	d505      	bpl.n	800d132 <_fwalk_sglue+0x22>
 800d126:	6824      	ldr	r4, [r4, #0]
 800d128:	2c00      	cmp	r4, #0
 800d12a:	d1f7      	bne.n	800d11c <_fwalk_sglue+0xc>
 800d12c:	4630      	mov	r0, r6
 800d12e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d132:	89ab      	ldrh	r3, [r5, #12]
 800d134:	2b01      	cmp	r3, #1
 800d136:	d907      	bls.n	800d148 <_fwalk_sglue+0x38>
 800d138:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d13c:	3301      	adds	r3, #1
 800d13e:	d003      	beq.n	800d148 <_fwalk_sglue+0x38>
 800d140:	4629      	mov	r1, r5
 800d142:	4638      	mov	r0, r7
 800d144:	47c0      	blx	r8
 800d146:	4306      	orrs	r6, r0
 800d148:	3568      	adds	r5, #104	@ 0x68
 800d14a:	e7e9      	b.n	800d120 <_fwalk_sglue+0x10>

0800d14c <iprintf>:
 800d14c:	b40f      	push	{r0, r1, r2, r3}
 800d14e:	b507      	push	{r0, r1, r2, lr}
 800d150:	4906      	ldr	r1, [pc, #24]	@ (800d16c <iprintf+0x20>)
 800d152:	ab04      	add	r3, sp, #16
 800d154:	6808      	ldr	r0, [r1, #0]
 800d156:	f853 2b04 	ldr.w	r2, [r3], #4
 800d15a:	6881      	ldr	r1, [r0, #8]
 800d15c:	9301      	str	r3, [sp, #4]
 800d15e:	f002 fde1 	bl	800fd24 <_vfiprintf_r>
 800d162:	b003      	add	sp, #12
 800d164:	f85d eb04 	ldr.w	lr, [sp], #4
 800d168:	b004      	add	sp, #16
 800d16a:	4770      	bx	lr
 800d16c:	2000025c 	.word	0x2000025c

0800d170 <_puts_r>:
 800d170:	6a03      	ldr	r3, [r0, #32]
 800d172:	b570      	push	{r4, r5, r6, lr}
 800d174:	6884      	ldr	r4, [r0, #8]
 800d176:	4605      	mov	r5, r0
 800d178:	460e      	mov	r6, r1
 800d17a:	b90b      	cbnz	r3, 800d180 <_puts_r+0x10>
 800d17c:	f7ff ffb0 	bl	800d0e0 <__sinit>
 800d180:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d182:	07db      	lsls	r3, r3, #31
 800d184:	d405      	bmi.n	800d192 <_puts_r+0x22>
 800d186:	89a3      	ldrh	r3, [r4, #12]
 800d188:	0598      	lsls	r0, r3, #22
 800d18a:	d402      	bmi.n	800d192 <_puts_r+0x22>
 800d18c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d18e:	f000 face 	bl	800d72e <__retarget_lock_acquire_recursive>
 800d192:	89a3      	ldrh	r3, [r4, #12]
 800d194:	0719      	lsls	r1, r3, #28
 800d196:	d502      	bpl.n	800d19e <_puts_r+0x2e>
 800d198:	6923      	ldr	r3, [r4, #16]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d135      	bne.n	800d20a <_puts_r+0x9a>
 800d19e:	4621      	mov	r1, r4
 800d1a0:	4628      	mov	r0, r5
 800d1a2:	f000 f919 	bl	800d3d8 <__swsetup_r>
 800d1a6:	b380      	cbz	r0, 800d20a <_puts_r+0x9a>
 800d1a8:	f04f 35ff 	mov.w	r5, #4294967295
 800d1ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d1ae:	07da      	lsls	r2, r3, #31
 800d1b0:	d405      	bmi.n	800d1be <_puts_r+0x4e>
 800d1b2:	89a3      	ldrh	r3, [r4, #12]
 800d1b4:	059b      	lsls	r3, r3, #22
 800d1b6:	d402      	bmi.n	800d1be <_puts_r+0x4e>
 800d1b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d1ba:	f000 fab9 	bl	800d730 <__retarget_lock_release_recursive>
 800d1be:	4628      	mov	r0, r5
 800d1c0:	bd70      	pop	{r4, r5, r6, pc}
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	da04      	bge.n	800d1d0 <_puts_r+0x60>
 800d1c6:	69a2      	ldr	r2, [r4, #24]
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	dc17      	bgt.n	800d1fc <_puts_r+0x8c>
 800d1cc:	290a      	cmp	r1, #10
 800d1ce:	d015      	beq.n	800d1fc <_puts_r+0x8c>
 800d1d0:	6823      	ldr	r3, [r4, #0]
 800d1d2:	1c5a      	adds	r2, r3, #1
 800d1d4:	6022      	str	r2, [r4, #0]
 800d1d6:	7019      	strb	r1, [r3, #0]
 800d1d8:	68a3      	ldr	r3, [r4, #8]
 800d1da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d1de:	3b01      	subs	r3, #1
 800d1e0:	60a3      	str	r3, [r4, #8]
 800d1e2:	2900      	cmp	r1, #0
 800d1e4:	d1ed      	bne.n	800d1c2 <_puts_r+0x52>
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	da11      	bge.n	800d20e <_puts_r+0x9e>
 800d1ea:	4622      	mov	r2, r4
 800d1ec:	210a      	movs	r1, #10
 800d1ee:	4628      	mov	r0, r5
 800d1f0:	f000 f8b3 	bl	800d35a <__swbuf_r>
 800d1f4:	3001      	adds	r0, #1
 800d1f6:	d0d7      	beq.n	800d1a8 <_puts_r+0x38>
 800d1f8:	250a      	movs	r5, #10
 800d1fa:	e7d7      	b.n	800d1ac <_puts_r+0x3c>
 800d1fc:	4622      	mov	r2, r4
 800d1fe:	4628      	mov	r0, r5
 800d200:	f000 f8ab 	bl	800d35a <__swbuf_r>
 800d204:	3001      	adds	r0, #1
 800d206:	d1e7      	bne.n	800d1d8 <_puts_r+0x68>
 800d208:	e7ce      	b.n	800d1a8 <_puts_r+0x38>
 800d20a:	3e01      	subs	r6, #1
 800d20c:	e7e4      	b.n	800d1d8 <_puts_r+0x68>
 800d20e:	6823      	ldr	r3, [r4, #0]
 800d210:	1c5a      	adds	r2, r3, #1
 800d212:	6022      	str	r2, [r4, #0]
 800d214:	220a      	movs	r2, #10
 800d216:	701a      	strb	r2, [r3, #0]
 800d218:	e7ee      	b.n	800d1f8 <_puts_r+0x88>
	...

0800d21c <puts>:
 800d21c:	4b02      	ldr	r3, [pc, #8]	@ (800d228 <puts+0xc>)
 800d21e:	4601      	mov	r1, r0
 800d220:	6818      	ldr	r0, [r3, #0]
 800d222:	f7ff bfa5 	b.w	800d170 <_puts_r>
 800d226:	bf00      	nop
 800d228:	2000025c 	.word	0x2000025c

0800d22c <sniprintf>:
 800d22c:	b40c      	push	{r2, r3}
 800d22e:	b530      	push	{r4, r5, lr}
 800d230:	4b17      	ldr	r3, [pc, #92]	@ (800d290 <sniprintf+0x64>)
 800d232:	1e0c      	subs	r4, r1, #0
 800d234:	681d      	ldr	r5, [r3, #0]
 800d236:	b09d      	sub	sp, #116	@ 0x74
 800d238:	da08      	bge.n	800d24c <sniprintf+0x20>
 800d23a:	238b      	movs	r3, #139	@ 0x8b
 800d23c:	602b      	str	r3, [r5, #0]
 800d23e:	f04f 30ff 	mov.w	r0, #4294967295
 800d242:	b01d      	add	sp, #116	@ 0x74
 800d244:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d248:	b002      	add	sp, #8
 800d24a:	4770      	bx	lr
 800d24c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d250:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d254:	bf14      	ite	ne
 800d256:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d25a:	4623      	moveq	r3, r4
 800d25c:	9304      	str	r3, [sp, #16]
 800d25e:	9307      	str	r3, [sp, #28]
 800d260:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d264:	9002      	str	r0, [sp, #8]
 800d266:	9006      	str	r0, [sp, #24]
 800d268:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d26c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d26e:	ab21      	add	r3, sp, #132	@ 0x84
 800d270:	a902      	add	r1, sp, #8
 800d272:	4628      	mov	r0, r5
 800d274:	9301      	str	r3, [sp, #4]
 800d276:	f002 fc2f 	bl	800fad8 <_svfiprintf_r>
 800d27a:	1c43      	adds	r3, r0, #1
 800d27c:	bfbc      	itt	lt
 800d27e:	238b      	movlt	r3, #139	@ 0x8b
 800d280:	602b      	strlt	r3, [r5, #0]
 800d282:	2c00      	cmp	r4, #0
 800d284:	d0dd      	beq.n	800d242 <sniprintf+0x16>
 800d286:	9b02      	ldr	r3, [sp, #8]
 800d288:	2200      	movs	r2, #0
 800d28a:	701a      	strb	r2, [r3, #0]
 800d28c:	e7d9      	b.n	800d242 <sniprintf+0x16>
 800d28e:	bf00      	nop
 800d290:	2000025c 	.word	0x2000025c

0800d294 <siprintf>:
 800d294:	b40e      	push	{r1, r2, r3}
 800d296:	b500      	push	{lr}
 800d298:	b09c      	sub	sp, #112	@ 0x70
 800d29a:	ab1d      	add	r3, sp, #116	@ 0x74
 800d29c:	9002      	str	r0, [sp, #8]
 800d29e:	9006      	str	r0, [sp, #24]
 800d2a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d2a4:	4809      	ldr	r0, [pc, #36]	@ (800d2cc <siprintf+0x38>)
 800d2a6:	9107      	str	r1, [sp, #28]
 800d2a8:	9104      	str	r1, [sp, #16]
 800d2aa:	4909      	ldr	r1, [pc, #36]	@ (800d2d0 <siprintf+0x3c>)
 800d2ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2b0:	9105      	str	r1, [sp, #20]
 800d2b2:	6800      	ldr	r0, [r0, #0]
 800d2b4:	9301      	str	r3, [sp, #4]
 800d2b6:	a902      	add	r1, sp, #8
 800d2b8:	f002 fc0e 	bl	800fad8 <_svfiprintf_r>
 800d2bc:	9b02      	ldr	r3, [sp, #8]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	701a      	strb	r2, [r3, #0]
 800d2c2:	b01c      	add	sp, #112	@ 0x70
 800d2c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2c8:	b003      	add	sp, #12
 800d2ca:	4770      	bx	lr
 800d2cc:	2000025c 	.word	0x2000025c
 800d2d0:	ffff0208 	.word	0xffff0208

0800d2d4 <__sread>:
 800d2d4:	b510      	push	{r4, lr}
 800d2d6:	460c      	mov	r4, r1
 800d2d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2dc:	f000 f9d8 	bl	800d690 <_read_r>
 800d2e0:	2800      	cmp	r0, #0
 800d2e2:	bfab      	itete	ge
 800d2e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d2e6:	89a3      	ldrhlt	r3, [r4, #12]
 800d2e8:	181b      	addge	r3, r3, r0
 800d2ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d2ee:	bfac      	ite	ge
 800d2f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d2f2:	81a3      	strhlt	r3, [r4, #12]
 800d2f4:	bd10      	pop	{r4, pc}

0800d2f6 <__swrite>:
 800d2f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2fa:	461f      	mov	r7, r3
 800d2fc:	898b      	ldrh	r3, [r1, #12]
 800d2fe:	05db      	lsls	r3, r3, #23
 800d300:	4605      	mov	r5, r0
 800d302:	460c      	mov	r4, r1
 800d304:	4616      	mov	r6, r2
 800d306:	d505      	bpl.n	800d314 <__swrite+0x1e>
 800d308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d30c:	2302      	movs	r3, #2
 800d30e:	2200      	movs	r2, #0
 800d310:	f000 f9ac 	bl	800d66c <_lseek_r>
 800d314:	89a3      	ldrh	r3, [r4, #12]
 800d316:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d31a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d31e:	81a3      	strh	r3, [r4, #12]
 800d320:	4632      	mov	r2, r6
 800d322:	463b      	mov	r3, r7
 800d324:	4628      	mov	r0, r5
 800d326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d32a:	f000 b9c3 	b.w	800d6b4 <_write_r>

0800d32e <__sseek>:
 800d32e:	b510      	push	{r4, lr}
 800d330:	460c      	mov	r4, r1
 800d332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d336:	f000 f999 	bl	800d66c <_lseek_r>
 800d33a:	1c43      	adds	r3, r0, #1
 800d33c:	89a3      	ldrh	r3, [r4, #12]
 800d33e:	bf15      	itete	ne
 800d340:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d342:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d346:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d34a:	81a3      	strheq	r3, [r4, #12]
 800d34c:	bf18      	it	ne
 800d34e:	81a3      	strhne	r3, [r4, #12]
 800d350:	bd10      	pop	{r4, pc}

0800d352 <__sclose>:
 800d352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d356:	f000 b923 	b.w	800d5a0 <_close_r>

0800d35a <__swbuf_r>:
 800d35a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d35c:	460e      	mov	r6, r1
 800d35e:	4614      	mov	r4, r2
 800d360:	4605      	mov	r5, r0
 800d362:	b118      	cbz	r0, 800d36c <__swbuf_r+0x12>
 800d364:	6a03      	ldr	r3, [r0, #32]
 800d366:	b90b      	cbnz	r3, 800d36c <__swbuf_r+0x12>
 800d368:	f7ff feba 	bl	800d0e0 <__sinit>
 800d36c:	69a3      	ldr	r3, [r4, #24]
 800d36e:	60a3      	str	r3, [r4, #8]
 800d370:	89a3      	ldrh	r3, [r4, #12]
 800d372:	071a      	lsls	r2, r3, #28
 800d374:	d501      	bpl.n	800d37a <__swbuf_r+0x20>
 800d376:	6923      	ldr	r3, [r4, #16]
 800d378:	b943      	cbnz	r3, 800d38c <__swbuf_r+0x32>
 800d37a:	4621      	mov	r1, r4
 800d37c:	4628      	mov	r0, r5
 800d37e:	f000 f82b 	bl	800d3d8 <__swsetup_r>
 800d382:	b118      	cbz	r0, 800d38c <__swbuf_r+0x32>
 800d384:	f04f 37ff 	mov.w	r7, #4294967295
 800d388:	4638      	mov	r0, r7
 800d38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d38c:	6823      	ldr	r3, [r4, #0]
 800d38e:	6922      	ldr	r2, [r4, #16]
 800d390:	1a98      	subs	r0, r3, r2
 800d392:	6963      	ldr	r3, [r4, #20]
 800d394:	b2f6      	uxtb	r6, r6
 800d396:	4283      	cmp	r3, r0
 800d398:	4637      	mov	r7, r6
 800d39a:	dc05      	bgt.n	800d3a8 <__swbuf_r+0x4e>
 800d39c:	4621      	mov	r1, r4
 800d39e:	4628      	mov	r0, r5
 800d3a0:	f002 fe5c 	bl	801005c <_fflush_r>
 800d3a4:	2800      	cmp	r0, #0
 800d3a6:	d1ed      	bne.n	800d384 <__swbuf_r+0x2a>
 800d3a8:	68a3      	ldr	r3, [r4, #8]
 800d3aa:	3b01      	subs	r3, #1
 800d3ac:	60a3      	str	r3, [r4, #8]
 800d3ae:	6823      	ldr	r3, [r4, #0]
 800d3b0:	1c5a      	adds	r2, r3, #1
 800d3b2:	6022      	str	r2, [r4, #0]
 800d3b4:	701e      	strb	r6, [r3, #0]
 800d3b6:	6962      	ldr	r2, [r4, #20]
 800d3b8:	1c43      	adds	r3, r0, #1
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d004      	beq.n	800d3c8 <__swbuf_r+0x6e>
 800d3be:	89a3      	ldrh	r3, [r4, #12]
 800d3c0:	07db      	lsls	r3, r3, #31
 800d3c2:	d5e1      	bpl.n	800d388 <__swbuf_r+0x2e>
 800d3c4:	2e0a      	cmp	r6, #10
 800d3c6:	d1df      	bne.n	800d388 <__swbuf_r+0x2e>
 800d3c8:	4621      	mov	r1, r4
 800d3ca:	4628      	mov	r0, r5
 800d3cc:	f002 fe46 	bl	801005c <_fflush_r>
 800d3d0:	2800      	cmp	r0, #0
 800d3d2:	d0d9      	beq.n	800d388 <__swbuf_r+0x2e>
 800d3d4:	e7d6      	b.n	800d384 <__swbuf_r+0x2a>
	...

0800d3d8 <__swsetup_r>:
 800d3d8:	b538      	push	{r3, r4, r5, lr}
 800d3da:	4b29      	ldr	r3, [pc, #164]	@ (800d480 <__swsetup_r+0xa8>)
 800d3dc:	4605      	mov	r5, r0
 800d3de:	6818      	ldr	r0, [r3, #0]
 800d3e0:	460c      	mov	r4, r1
 800d3e2:	b118      	cbz	r0, 800d3ec <__swsetup_r+0x14>
 800d3e4:	6a03      	ldr	r3, [r0, #32]
 800d3e6:	b90b      	cbnz	r3, 800d3ec <__swsetup_r+0x14>
 800d3e8:	f7ff fe7a 	bl	800d0e0 <__sinit>
 800d3ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3f0:	0719      	lsls	r1, r3, #28
 800d3f2:	d422      	bmi.n	800d43a <__swsetup_r+0x62>
 800d3f4:	06da      	lsls	r2, r3, #27
 800d3f6:	d407      	bmi.n	800d408 <__swsetup_r+0x30>
 800d3f8:	2209      	movs	r2, #9
 800d3fa:	602a      	str	r2, [r5, #0]
 800d3fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d400:	81a3      	strh	r3, [r4, #12]
 800d402:	f04f 30ff 	mov.w	r0, #4294967295
 800d406:	e033      	b.n	800d470 <__swsetup_r+0x98>
 800d408:	0758      	lsls	r0, r3, #29
 800d40a:	d512      	bpl.n	800d432 <__swsetup_r+0x5a>
 800d40c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d40e:	b141      	cbz	r1, 800d422 <__swsetup_r+0x4a>
 800d410:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d414:	4299      	cmp	r1, r3
 800d416:	d002      	beq.n	800d41e <__swsetup_r+0x46>
 800d418:	4628      	mov	r0, r5
 800d41a:	f000 ff9b 	bl	800e354 <_free_r>
 800d41e:	2300      	movs	r3, #0
 800d420:	6363      	str	r3, [r4, #52]	@ 0x34
 800d422:	89a3      	ldrh	r3, [r4, #12]
 800d424:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d428:	81a3      	strh	r3, [r4, #12]
 800d42a:	2300      	movs	r3, #0
 800d42c:	6063      	str	r3, [r4, #4]
 800d42e:	6923      	ldr	r3, [r4, #16]
 800d430:	6023      	str	r3, [r4, #0]
 800d432:	89a3      	ldrh	r3, [r4, #12]
 800d434:	f043 0308 	orr.w	r3, r3, #8
 800d438:	81a3      	strh	r3, [r4, #12]
 800d43a:	6923      	ldr	r3, [r4, #16]
 800d43c:	b94b      	cbnz	r3, 800d452 <__swsetup_r+0x7a>
 800d43e:	89a3      	ldrh	r3, [r4, #12]
 800d440:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d444:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d448:	d003      	beq.n	800d452 <__swsetup_r+0x7a>
 800d44a:	4621      	mov	r1, r4
 800d44c:	4628      	mov	r0, r5
 800d44e:	f002 fe65 	bl	801011c <__smakebuf_r>
 800d452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d456:	f013 0201 	ands.w	r2, r3, #1
 800d45a:	d00a      	beq.n	800d472 <__swsetup_r+0x9a>
 800d45c:	2200      	movs	r2, #0
 800d45e:	60a2      	str	r2, [r4, #8]
 800d460:	6962      	ldr	r2, [r4, #20]
 800d462:	4252      	negs	r2, r2
 800d464:	61a2      	str	r2, [r4, #24]
 800d466:	6922      	ldr	r2, [r4, #16]
 800d468:	b942      	cbnz	r2, 800d47c <__swsetup_r+0xa4>
 800d46a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d46e:	d1c5      	bne.n	800d3fc <__swsetup_r+0x24>
 800d470:	bd38      	pop	{r3, r4, r5, pc}
 800d472:	0799      	lsls	r1, r3, #30
 800d474:	bf58      	it	pl
 800d476:	6962      	ldrpl	r2, [r4, #20]
 800d478:	60a2      	str	r2, [r4, #8]
 800d47a:	e7f4      	b.n	800d466 <__swsetup_r+0x8e>
 800d47c:	2000      	movs	r0, #0
 800d47e:	e7f7      	b.n	800d470 <__swsetup_r+0x98>
 800d480:	2000025c 	.word	0x2000025c

0800d484 <memset>:
 800d484:	4402      	add	r2, r0
 800d486:	4603      	mov	r3, r0
 800d488:	4293      	cmp	r3, r2
 800d48a:	d100      	bne.n	800d48e <memset+0xa>
 800d48c:	4770      	bx	lr
 800d48e:	f803 1b01 	strb.w	r1, [r3], #1
 800d492:	e7f9      	b.n	800d488 <memset+0x4>

0800d494 <strncmp>:
 800d494:	b510      	push	{r4, lr}
 800d496:	b16a      	cbz	r2, 800d4b4 <strncmp+0x20>
 800d498:	3901      	subs	r1, #1
 800d49a:	1884      	adds	r4, r0, r2
 800d49c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4a0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	d103      	bne.n	800d4b0 <strncmp+0x1c>
 800d4a8:	42a0      	cmp	r0, r4
 800d4aa:	d001      	beq.n	800d4b0 <strncmp+0x1c>
 800d4ac:	2a00      	cmp	r2, #0
 800d4ae:	d1f5      	bne.n	800d49c <strncmp+0x8>
 800d4b0:	1ad0      	subs	r0, r2, r3
 800d4b2:	bd10      	pop	{r4, pc}
 800d4b4:	4610      	mov	r0, r2
 800d4b6:	e7fc      	b.n	800d4b2 <strncmp+0x1e>

0800d4b8 <strncpy>:
 800d4b8:	b510      	push	{r4, lr}
 800d4ba:	3901      	subs	r1, #1
 800d4bc:	4603      	mov	r3, r0
 800d4be:	b132      	cbz	r2, 800d4ce <strncpy+0x16>
 800d4c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d4c4:	f803 4b01 	strb.w	r4, [r3], #1
 800d4c8:	3a01      	subs	r2, #1
 800d4ca:	2c00      	cmp	r4, #0
 800d4cc:	d1f7      	bne.n	800d4be <strncpy+0x6>
 800d4ce:	441a      	add	r2, r3
 800d4d0:	2100      	movs	r1, #0
 800d4d2:	4293      	cmp	r3, r2
 800d4d4:	d100      	bne.n	800d4d8 <strncpy+0x20>
 800d4d6:	bd10      	pop	{r4, pc}
 800d4d8:	f803 1b01 	strb.w	r1, [r3], #1
 800d4dc:	e7f9      	b.n	800d4d2 <strncpy+0x1a>
	...

0800d4e0 <strtok>:
 800d4e0:	4b16      	ldr	r3, [pc, #88]	@ (800d53c <strtok+0x5c>)
 800d4e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4e6:	681f      	ldr	r7, [r3, #0]
 800d4e8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800d4ea:	4605      	mov	r5, r0
 800d4ec:	460e      	mov	r6, r1
 800d4ee:	b9ec      	cbnz	r4, 800d52c <strtok+0x4c>
 800d4f0:	2050      	movs	r0, #80	@ 0x50
 800d4f2:	f000 ff79 	bl	800e3e8 <malloc>
 800d4f6:	4602      	mov	r2, r0
 800d4f8:	6478      	str	r0, [r7, #68]	@ 0x44
 800d4fa:	b920      	cbnz	r0, 800d506 <strtok+0x26>
 800d4fc:	4b10      	ldr	r3, [pc, #64]	@ (800d540 <strtok+0x60>)
 800d4fe:	4811      	ldr	r0, [pc, #68]	@ (800d544 <strtok+0x64>)
 800d500:	215b      	movs	r1, #91	@ 0x5b
 800d502:	f000 f92b 	bl	800d75c <__assert_func>
 800d506:	e9c0 4400 	strd	r4, r4, [r0]
 800d50a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800d50e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800d512:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800d516:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800d51a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800d51e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800d522:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800d526:	6184      	str	r4, [r0, #24]
 800d528:	7704      	strb	r4, [r0, #28]
 800d52a:	6244      	str	r4, [r0, #36]	@ 0x24
 800d52c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d52e:	4631      	mov	r1, r6
 800d530:	4628      	mov	r0, r5
 800d532:	2301      	movs	r3, #1
 800d534:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d538:	f000 b806 	b.w	800d548 <__strtok_r>
 800d53c:	2000025c 	.word	0x2000025c
 800d540:	08011422 	.word	0x08011422
 800d544:	08011439 	.word	0x08011439

0800d548 <__strtok_r>:
 800d548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d54a:	4604      	mov	r4, r0
 800d54c:	b908      	cbnz	r0, 800d552 <__strtok_r+0xa>
 800d54e:	6814      	ldr	r4, [r2, #0]
 800d550:	b144      	cbz	r4, 800d564 <__strtok_r+0x1c>
 800d552:	4620      	mov	r0, r4
 800d554:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d558:	460f      	mov	r7, r1
 800d55a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800d55e:	b91e      	cbnz	r6, 800d568 <__strtok_r+0x20>
 800d560:	b965      	cbnz	r5, 800d57c <__strtok_r+0x34>
 800d562:	6015      	str	r5, [r2, #0]
 800d564:	2000      	movs	r0, #0
 800d566:	e005      	b.n	800d574 <__strtok_r+0x2c>
 800d568:	42b5      	cmp	r5, r6
 800d56a:	d1f6      	bne.n	800d55a <__strtok_r+0x12>
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d1f0      	bne.n	800d552 <__strtok_r+0xa>
 800d570:	6014      	str	r4, [r2, #0]
 800d572:	7003      	strb	r3, [r0, #0]
 800d574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d576:	461c      	mov	r4, r3
 800d578:	e00c      	b.n	800d594 <__strtok_r+0x4c>
 800d57a:	b915      	cbnz	r5, 800d582 <__strtok_r+0x3a>
 800d57c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d580:	460e      	mov	r6, r1
 800d582:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d586:	42ab      	cmp	r3, r5
 800d588:	d1f7      	bne.n	800d57a <__strtok_r+0x32>
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d0f3      	beq.n	800d576 <__strtok_r+0x2e>
 800d58e:	2300      	movs	r3, #0
 800d590:	f804 3c01 	strb.w	r3, [r4, #-1]
 800d594:	6014      	str	r4, [r2, #0]
 800d596:	e7ed      	b.n	800d574 <__strtok_r+0x2c>

0800d598 <_localeconv_r>:
 800d598:	4800      	ldr	r0, [pc, #0]	@ (800d59c <_localeconv_r+0x4>)
 800d59a:	4770      	bx	lr
 800d59c:	2000039c 	.word	0x2000039c

0800d5a0 <_close_r>:
 800d5a0:	b538      	push	{r3, r4, r5, lr}
 800d5a2:	4d06      	ldr	r5, [pc, #24]	@ (800d5bc <_close_r+0x1c>)
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	4604      	mov	r4, r0
 800d5a8:	4608      	mov	r0, r1
 800d5aa:	602b      	str	r3, [r5, #0]
 800d5ac:	f7f6 f90e 	bl	80037cc <_close>
 800d5b0:	1c43      	adds	r3, r0, #1
 800d5b2:	d102      	bne.n	800d5ba <_close_r+0x1a>
 800d5b4:	682b      	ldr	r3, [r5, #0]
 800d5b6:	b103      	cbz	r3, 800d5ba <_close_r+0x1a>
 800d5b8:	6023      	str	r3, [r4, #0]
 800d5ba:	bd38      	pop	{r3, r4, r5, pc}
 800d5bc:	20004bb8 	.word	0x20004bb8

0800d5c0 <_reclaim_reent>:
 800d5c0:	4b29      	ldr	r3, [pc, #164]	@ (800d668 <_reclaim_reent+0xa8>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	4283      	cmp	r3, r0
 800d5c6:	b570      	push	{r4, r5, r6, lr}
 800d5c8:	4604      	mov	r4, r0
 800d5ca:	d04b      	beq.n	800d664 <_reclaim_reent+0xa4>
 800d5cc:	69c3      	ldr	r3, [r0, #28]
 800d5ce:	b1ab      	cbz	r3, 800d5fc <_reclaim_reent+0x3c>
 800d5d0:	68db      	ldr	r3, [r3, #12]
 800d5d2:	b16b      	cbz	r3, 800d5f0 <_reclaim_reent+0x30>
 800d5d4:	2500      	movs	r5, #0
 800d5d6:	69e3      	ldr	r3, [r4, #28]
 800d5d8:	68db      	ldr	r3, [r3, #12]
 800d5da:	5959      	ldr	r1, [r3, r5]
 800d5dc:	2900      	cmp	r1, #0
 800d5de:	d13b      	bne.n	800d658 <_reclaim_reent+0x98>
 800d5e0:	3504      	adds	r5, #4
 800d5e2:	2d80      	cmp	r5, #128	@ 0x80
 800d5e4:	d1f7      	bne.n	800d5d6 <_reclaim_reent+0x16>
 800d5e6:	69e3      	ldr	r3, [r4, #28]
 800d5e8:	4620      	mov	r0, r4
 800d5ea:	68d9      	ldr	r1, [r3, #12]
 800d5ec:	f000 feb2 	bl	800e354 <_free_r>
 800d5f0:	69e3      	ldr	r3, [r4, #28]
 800d5f2:	6819      	ldr	r1, [r3, #0]
 800d5f4:	b111      	cbz	r1, 800d5fc <_reclaim_reent+0x3c>
 800d5f6:	4620      	mov	r0, r4
 800d5f8:	f000 feac 	bl	800e354 <_free_r>
 800d5fc:	6961      	ldr	r1, [r4, #20]
 800d5fe:	b111      	cbz	r1, 800d606 <_reclaim_reent+0x46>
 800d600:	4620      	mov	r0, r4
 800d602:	f000 fea7 	bl	800e354 <_free_r>
 800d606:	69e1      	ldr	r1, [r4, #28]
 800d608:	b111      	cbz	r1, 800d610 <_reclaim_reent+0x50>
 800d60a:	4620      	mov	r0, r4
 800d60c:	f000 fea2 	bl	800e354 <_free_r>
 800d610:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d612:	b111      	cbz	r1, 800d61a <_reclaim_reent+0x5a>
 800d614:	4620      	mov	r0, r4
 800d616:	f000 fe9d 	bl	800e354 <_free_r>
 800d61a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d61c:	b111      	cbz	r1, 800d624 <_reclaim_reent+0x64>
 800d61e:	4620      	mov	r0, r4
 800d620:	f000 fe98 	bl	800e354 <_free_r>
 800d624:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d626:	b111      	cbz	r1, 800d62e <_reclaim_reent+0x6e>
 800d628:	4620      	mov	r0, r4
 800d62a:	f000 fe93 	bl	800e354 <_free_r>
 800d62e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d630:	b111      	cbz	r1, 800d638 <_reclaim_reent+0x78>
 800d632:	4620      	mov	r0, r4
 800d634:	f000 fe8e 	bl	800e354 <_free_r>
 800d638:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d63a:	b111      	cbz	r1, 800d642 <_reclaim_reent+0x82>
 800d63c:	4620      	mov	r0, r4
 800d63e:	f000 fe89 	bl	800e354 <_free_r>
 800d642:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d644:	b111      	cbz	r1, 800d64c <_reclaim_reent+0x8c>
 800d646:	4620      	mov	r0, r4
 800d648:	f000 fe84 	bl	800e354 <_free_r>
 800d64c:	6a23      	ldr	r3, [r4, #32]
 800d64e:	b14b      	cbz	r3, 800d664 <_reclaim_reent+0xa4>
 800d650:	4620      	mov	r0, r4
 800d652:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d656:	4718      	bx	r3
 800d658:	680e      	ldr	r6, [r1, #0]
 800d65a:	4620      	mov	r0, r4
 800d65c:	f000 fe7a 	bl	800e354 <_free_r>
 800d660:	4631      	mov	r1, r6
 800d662:	e7bb      	b.n	800d5dc <_reclaim_reent+0x1c>
 800d664:	bd70      	pop	{r4, r5, r6, pc}
 800d666:	bf00      	nop
 800d668:	2000025c 	.word	0x2000025c

0800d66c <_lseek_r>:
 800d66c:	b538      	push	{r3, r4, r5, lr}
 800d66e:	4d07      	ldr	r5, [pc, #28]	@ (800d68c <_lseek_r+0x20>)
 800d670:	4604      	mov	r4, r0
 800d672:	4608      	mov	r0, r1
 800d674:	4611      	mov	r1, r2
 800d676:	2200      	movs	r2, #0
 800d678:	602a      	str	r2, [r5, #0]
 800d67a:	461a      	mov	r2, r3
 800d67c:	f7f6 f8cd 	bl	800381a <_lseek>
 800d680:	1c43      	adds	r3, r0, #1
 800d682:	d102      	bne.n	800d68a <_lseek_r+0x1e>
 800d684:	682b      	ldr	r3, [r5, #0]
 800d686:	b103      	cbz	r3, 800d68a <_lseek_r+0x1e>
 800d688:	6023      	str	r3, [r4, #0]
 800d68a:	bd38      	pop	{r3, r4, r5, pc}
 800d68c:	20004bb8 	.word	0x20004bb8

0800d690 <_read_r>:
 800d690:	b538      	push	{r3, r4, r5, lr}
 800d692:	4d07      	ldr	r5, [pc, #28]	@ (800d6b0 <_read_r+0x20>)
 800d694:	4604      	mov	r4, r0
 800d696:	4608      	mov	r0, r1
 800d698:	4611      	mov	r1, r2
 800d69a:	2200      	movs	r2, #0
 800d69c:	602a      	str	r2, [r5, #0]
 800d69e:	461a      	mov	r2, r3
 800d6a0:	f7f6 f877 	bl	8003792 <_read>
 800d6a4:	1c43      	adds	r3, r0, #1
 800d6a6:	d102      	bne.n	800d6ae <_read_r+0x1e>
 800d6a8:	682b      	ldr	r3, [r5, #0]
 800d6aa:	b103      	cbz	r3, 800d6ae <_read_r+0x1e>
 800d6ac:	6023      	str	r3, [r4, #0]
 800d6ae:	bd38      	pop	{r3, r4, r5, pc}
 800d6b0:	20004bb8 	.word	0x20004bb8

0800d6b4 <_write_r>:
 800d6b4:	b538      	push	{r3, r4, r5, lr}
 800d6b6:	4d07      	ldr	r5, [pc, #28]	@ (800d6d4 <_write_r+0x20>)
 800d6b8:	4604      	mov	r4, r0
 800d6ba:	4608      	mov	r0, r1
 800d6bc:	4611      	mov	r1, r2
 800d6be:	2200      	movs	r2, #0
 800d6c0:	602a      	str	r2, [r5, #0]
 800d6c2:	461a      	mov	r2, r3
 800d6c4:	f7f6 fd96 	bl	80041f4 <_write>
 800d6c8:	1c43      	adds	r3, r0, #1
 800d6ca:	d102      	bne.n	800d6d2 <_write_r+0x1e>
 800d6cc:	682b      	ldr	r3, [r5, #0]
 800d6ce:	b103      	cbz	r3, 800d6d2 <_write_r+0x1e>
 800d6d0:	6023      	str	r3, [r4, #0]
 800d6d2:	bd38      	pop	{r3, r4, r5, pc}
 800d6d4:	20004bb8 	.word	0x20004bb8

0800d6d8 <__errno>:
 800d6d8:	4b01      	ldr	r3, [pc, #4]	@ (800d6e0 <__errno+0x8>)
 800d6da:	6818      	ldr	r0, [r3, #0]
 800d6dc:	4770      	bx	lr
 800d6de:	bf00      	nop
 800d6e0:	2000025c 	.word	0x2000025c

0800d6e4 <__libc_init_array>:
 800d6e4:	b570      	push	{r4, r5, r6, lr}
 800d6e6:	4d0d      	ldr	r5, [pc, #52]	@ (800d71c <__libc_init_array+0x38>)
 800d6e8:	4c0d      	ldr	r4, [pc, #52]	@ (800d720 <__libc_init_array+0x3c>)
 800d6ea:	1b64      	subs	r4, r4, r5
 800d6ec:	10a4      	asrs	r4, r4, #2
 800d6ee:	2600      	movs	r6, #0
 800d6f0:	42a6      	cmp	r6, r4
 800d6f2:	d109      	bne.n	800d708 <__libc_init_array+0x24>
 800d6f4:	4d0b      	ldr	r5, [pc, #44]	@ (800d724 <__libc_init_array+0x40>)
 800d6f6:	4c0c      	ldr	r4, [pc, #48]	@ (800d728 <__libc_init_array+0x44>)
 800d6f8:	f003 f98e 	bl	8010a18 <_init>
 800d6fc:	1b64      	subs	r4, r4, r5
 800d6fe:	10a4      	asrs	r4, r4, #2
 800d700:	2600      	movs	r6, #0
 800d702:	42a6      	cmp	r6, r4
 800d704:	d105      	bne.n	800d712 <__libc_init_array+0x2e>
 800d706:	bd70      	pop	{r4, r5, r6, pc}
 800d708:	f855 3b04 	ldr.w	r3, [r5], #4
 800d70c:	4798      	blx	r3
 800d70e:	3601      	adds	r6, #1
 800d710:	e7ee      	b.n	800d6f0 <__libc_init_array+0xc>
 800d712:	f855 3b04 	ldr.w	r3, [r5], #4
 800d716:	4798      	blx	r3
 800d718:	3601      	adds	r6, #1
 800d71a:	e7f2      	b.n	800d702 <__libc_init_array+0x1e>
 800d71c:	0801177c 	.word	0x0801177c
 800d720:	0801177c 	.word	0x0801177c
 800d724:	0801177c 	.word	0x0801177c
 800d728:	08011780 	.word	0x08011780

0800d72c <__retarget_lock_init_recursive>:
 800d72c:	4770      	bx	lr

0800d72e <__retarget_lock_acquire_recursive>:
 800d72e:	4770      	bx	lr

0800d730 <__retarget_lock_release_recursive>:
 800d730:	4770      	bx	lr

0800d732 <memcpy>:
 800d732:	440a      	add	r2, r1
 800d734:	4291      	cmp	r1, r2
 800d736:	f100 33ff 	add.w	r3, r0, #4294967295
 800d73a:	d100      	bne.n	800d73e <memcpy+0xc>
 800d73c:	4770      	bx	lr
 800d73e:	b510      	push	{r4, lr}
 800d740:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d744:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d748:	4291      	cmp	r1, r2
 800d74a:	d1f9      	bne.n	800d740 <memcpy+0xe>
 800d74c:	bd10      	pop	{r4, pc}
	...

0800d750 <nanf>:
 800d750:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d758 <nanf+0x8>
 800d754:	4770      	bx	lr
 800d756:	bf00      	nop
 800d758:	7fc00000 	.word	0x7fc00000

0800d75c <__assert_func>:
 800d75c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d75e:	4614      	mov	r4, r2
 800d760:	461a      	mov	r2, r3
 800d762:	4b09      	ldr	r3, [pc, #36]	@ (800d788 <__assert_func+0x2c>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	4605      	mov	r5, r0
 800d768:	68d8      	ldr	r0, [r3, #12]
 800d76a:	b954      	cbnz	r4, 800d782 <__assert_func+0x26>
 800d76c:	4b07      	ldr	r3, [pc, #28]	@ (800d78c <__assert_func+0x30>)
 800d76e:	461c      	mov	r4, r3
 800d770:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d774:	9100      	str	r1, [sp, #0]
 800d776:	462b      	mov	r3, r5
 800d778:	4905      	ldr	r1, [pc, #20]	@ (800d790 <__assert_func+0x34>)
 800d77a:	f002 fc97 	bl	80100ac <fiprintf>
 800d77e:	f002 fd5f 	bl	8010240 <abort>
 800d782:	4b04      	ldr	r3, [pc, #16]	@ (800d794 <__assert_func+0x38>)
 800d784:	e7f4      	b.n	800d770 <__assert_func+0x14>
 800d786:	bf00      	nop
 800d788:	2000025c 	.word	0x2000025c
 800d78c:	080114ce 	.word	0x080114ce
 800d790:	080114a0 	.word	0x080114a0
 800d794:	08011493 	.word	0x08011493

0800d798 <quorem>:
 800d798:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d79c:	6903      	ldr	r3, [r0, #16]
 800d79e:	690c      	ldr	r4, [r1, #16]
 800d7a0:	42a3      	cmp	r3, r4
 800d7a2:	4607      	mov	r7, r0
 800d7a4:	db7e      	blt.n	800d8a4 <quorem+0x10c>
 800d7a6:	3c01      	subs	r4, #1
 800d7a8:	f101 0814 	add.w	r8, r1, #20
 800d7ac:	00a3      	lsls	r3, r4, #2
 800d7ae:	f100 0514 	add.w	r5, r0, #20
 800d7b2:	9300      	str	r3, [sp, #0]
 800d7b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d7b8:	9301      	str	r3, [sp, #4]
 800d7ba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d7be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d7c2:	3301      	adds	r3, #1
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d7ca:	fbb2 f6f3 	udiv	r6, r2, r3
 800d7ce:	d32e      	bcc.n	800d82e <quorem+0x96>
 800d7d0:	f04f 0a00 	mov.w	sl, #0
 800d7d4:	46c4      	mov	ip, r8
 800d7d6:	46ae      	mov	lr, r5
 800d7d8:	46d3      	mov	fp, sl
 800d7da:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d7de:	b298      	uxth	r0, r3
 800d7e0:	fb06 a000 	mla	r0, r6, r0, sl
 800d7e4:	0c02      	lsrs	r2, r0, #16
 800d7e6:	0c1b      	lsrs	r3, r3, #16
 800d7e8:	fb06 2303 	mla	r3, r6, r3, r2
 800d7ec:	f8de 2000 	ldr.w	r2, [lr]
 800d7f0:	b280      	uxth	r0, r0
 800d7f2:	b292      	uxth	r2, r2
 800d7f4:	1a12      	subs	r2, r2, r0
 800d7f6:	445a      	add	r2, fp
 800d7f8:	f8de 0000 	ldr.w	r0, [lr]
 800d7fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d800:	b29b      	uxth	r3, r3
 800d802:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d806:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d80a:	b292      	uxth	r2, r2
 800d80c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d810:	45e1      	cmp	r9, ip
 800d812:	f84e 2b04 	str.w	r2, [lr], #4
 800d816:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d81a:	d2de      	bcs.n	800d7da <quorem+0x42>
 800d81c:	9b00      	ldr	r3, [sp, #0]
 800d81e:	58eb      	ldr	r3, [r5, r3]
 800d820:	b92b      	cbnz	r3, 800d82e <quorem+0x96>
 800d822:	9b01      	ldr	r3, [sp, #4]
 800d824:	3b04      	subs	r3, #4
 800d826:	429d      	cmp	r5, r3
 800d828:	461a      	mov	r2, r3
 800d82a:	d32f      	bcc.n	800d88c <quorem+0xf4>
 800d82c:	613c      	str	r4, [r7, #16]
 800d82e:	4638      	mov	r0, r7
 800d830:	f001 f954 	bl	800eadc <__mcmp>
 800d834:	2800      	cmp	r0, #0
 800d836:	db25      	blt.n	800d884 <quorem+0xec>
 800d838:	4629      	mov	r1, r5
 800d83a:	2000      	movs	r0, #0
 800d83c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d840:	f8d1 c000 	ldr.w	ip, [r1]
 800d844:	fa1f fe82 	uxth.w	lr, r2
 800d848:	fa1f f38c 	uxth.w	r3, ip
 800d84c:	eba3 030e 	sub.w	r3, r3, lr
 800d850:	4403      	add	r3, r0
 800d852:	0c12      	lsrs	r2, r2, #16
 800d854:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d858:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d85c:	b29b      	uxth	r3, r3
 800d85e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d862:	45c1      	cmp	r9, r8
 800d864:	f841 3b04 	str.w	r3, [r1], #4
 800d868:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d86c:	d2e6      	bcs.n	800d83c <quorem+0xa4>
 800d86e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d872:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d876:	b922      	cbnz	r2, 800d882 <quorem+0xea>
 800d878:	3b04      	subs	r3, #4
 800d87a:	429d      	cmp	r5, r3
 800d87c:	461a      	mov	r2, r3
 800d87e:	d30b      	bcc.n	800d898 <quorem+0x100>
 800d880:	613c      	str	r4, [r7, #16]
 800d882:	3601      	adds	r6, #1
 800d884:	4630      	mov	r0, r6
 800d886:	b003      	add	sp, #12
 800d888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d88c:	6812      	ldr	r2, [r2, #0]
 800d88e:	3b04      	subs	r3, #4
 800d890:	2a00      	cmp	r2, #0
 800d892:	d1cb      	bne.n	800d82c <quorem+0x94>
 800d894:	3c01      	subs	r4, #1
 800d896:	e7c6      	b.n	800d826 <quorem+0x8e>
 800d898:	6812      	ldr	r2, [r2, #0]
 800d89a:	3b04      	subs	r3, #4
 800d89c:	2a00      	cmp	r2, #0
 800d89e:	d1ef      	bne.n	800d880 <quorem+0xe8>
 800d8a0:	3c01      	subs	r4, #1
 800d8a2:	e7ea      	b.n	800d87a <quorem+0xe2>
 800d8a4:	2000      	movs	r0, #0
 800d8a6:	e7ee      	b.n	800d886 <quorem+0xee>

0800d8a8 <_dtoa_r>:
 800d8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8ac:	ed2d 8b02 	vpush	{d8}
 800d8b0:	69c7      	ldr	r7, [r0, #28]
 800d8b2:	b091      	sub	sp, #68	@ 0x44
 800d8b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d8b8:	ec55 4b10 	vmov	r4, r5, d0
 800d8bc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800d8be:	9107      	str	r1, [sp, #28]
 800d8c0:	4681      	mov	r9, r0
 800d8c2:	9209      	str	r2, [sp, #36]	@ 0x24
 800d8c4:	930d      	str	r3, [sp, #52]	@ 0x34
 800d8c6:	b97f      	cbnz	r7, 800d8e8 <_dtoa_r+0x40>
 800d8c8:	2010      	movs	r0, #16
 800d8ca:	f000 fd8d 	bl	800e3e8 <malloc>
 800d8ce:	4602      	mov	r2, r0
 800d8d0:	f8c9 001c 	str.w	r0, [r9, #28]
 800d8d4:	b920      	cbnz	r0, 800d8e0 <_dtoa_r+0x38>
 800d8d6:	4ba0      	ldr	r3, [pc, #640]	@ (800db58 <_dtoa_r+0x2b0>)
 800d8d8:	21ef      	movs	r1, #239	@ 0xef
 800d8da:	48a0      	ldr	r0, [pc, #640]	@ (800db5c <_dtoa_r+0x2b4>)
 800d8dc:	f7ff ff3e 	bl	800d75c <__assert_func>
 800d8e0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d8e4:	6007      	str	r7, [r0, #0]
 800d8e6:	60c7      	str	r7, [r0, #12]
 800d8e8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d8ec:	6819      	ldr	r1, [r3, #0]
 800d8ee:	b159      	cbz	r1, 800d908 <_dtoa_r+0x60>
 800d8f0:	685a      	ldr	r2, [r3, #4]
 800d8f2:	604a      	str	r2, [r1, #4]
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	4093      	lsls	r3, r2
 800d8f8:	608b      	str	r3, [r1, #8]
 800d8fa:	4648      	mov	r0, r9
 800d8fc:	f000 fe6a 	bl	800e5d4 <_Bfree>
 800d900:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d904:	2200      	movs	r2, #0
 800d906:	601a      	str	r2, [r3, #0]
 800d908:	1e2b      	subs	r3, r5, #0
 800d90a:	bfbb      	ittet	lt
 800d90c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d910:	9303      	strlt	r3, [sp, #12]
 800d912:	2300      	movge	r3, #0
 800d914:	2201      	movlt	r2, #1
 800d916:	bfac      	ite	ge
 800d918:	6033      	strge	r3, [r6, #0]
 800d91a:	6032      	strlt	r2, [r6, #0]
 800d91c:	4b90      	ldr	r3, [pc, #576]	@ (800db60 <_dtoa_r+0x2b8>)
 800d91e:	9e03      	ldr	r6, [sp, #12]
 800d920:	43b3      	bics	r3, r6
 800d922:	d110      	bne.n	800d946 <_dtoa_r+0x9e>
 800d924:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d926:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d92a:	6013      	str	r3, [r2, #0]
 800d92c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800d930:	4323      	orrs	r3, r4
 800d932:	f000 84de 	beq.w	800e2f2 <_dtoa_r+0xa4a>
 800d936:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d938:	4f8a      	ldr	r7, [pc, #552]	@ (800db64 <_dtoa_r+0x2bc>)
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	f000 84e0 	beq.w	800e300 <_dtoa_r+0xa58>
 800d940:	1cfb      	adds	r3, r7, #3
 800d942:	f000 bcdb 	b.w	800e2fc <_dtoa_r+0xa54>
 800d946:	ed9d 8b02 	vldr	d8, [sp, #8]
 800d94a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d94e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d952:	d10a      	bne.n	800d96a <_dtoa_r+0xc2>
 800d954:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d956:	2301      	movs	r3, #1
 800d958:	6013      	str	r3, [r2, #0]
 800d95a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d95c:	b113      	cbz	r3, 800d964 <_dtoa_r+0xbc>
 800d95e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d960:	4b81      	ldr	r3, [pc, #516]	@ (800db68 <_dtoa_r+0x2c0>)
 800d962:	6013      	str	r3, [r2, #0]
 800d964:	4f81      	ldr	r7, [pc, #516]	@ (800db6c <_dtoa_r+0x2c4>)
 800d966:	f000 bccb 	b.w	800e300 <_dtoa_r+0xa58>
 800d96a:	aa0e      	add	r2, sp, #56	@ 0x38
 800d96c:	a90f      	add	r1, sp, #60	@ 0x3c
 800d96e:	4648      	mov	r0, r9
 800d970:	eeb0 0b48 	vmov.f64	d0, d8
 800d974:	f001 f9d2 	bl	800ed1c <__d2b>
 800d978:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800d97c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d97e:	9001      	str	r0, [sp, #4]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d045      	beq.n	800da10 <_dtoa_r+0x168>
 800d984:	eeb0 7b48 	vmov.f64	d7, d8
 800d988:	ee18 1a90 	vmov	r1, s17
 800d98c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d990:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800d994:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800d998:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800d99c:	2500      	movs	r5, #0
 800d99e:	ee07 1a90 	vmov	s15, r1
 800d9a2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800d9a6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800db40 <_dtoa_r+0x298>
 800d9aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d9ae:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800db48 <_dtoa_r+0x2a0>
 800d9b2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d9b6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800db50 <_dtoa_r+0x2a8>
 800d9ba:	ee07 3a90 	vmov	s15, r3
 800d9be:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800d9c2:	eeb0 7b46 	vmov.f64	d7, d6
 800d9c6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800d9ca:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d9ce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d9d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9d6:	ee16 8a90 	vmov	r8, s13
 800d9da:	d508      	bpl.n	800d9ee <_dtoa_r+0x146>
 800d9dc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d9e0:	eeb4 6b47 	vcmp.f64	d6, d7
 800d9e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9e8:	bf18      	it	ne
 800d9ea:	f108 38ff 	addne.w	r8, r8, #4294967295
 800d9ee:	f1b8 0f16 	cmp.w	r8, #22
 800d9f2:	d82b      	bhi.n	800da4c <_dtoa_r+0x1a4>
 800d9f4:	495e      	ldr	r1, [pc, #376]	@ (800db70 <_dtoa_r+0x2c8>)
 800d9f6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800d9fa:	ed91 7b00 	vldr	d7, [r1]
 800d9fe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800da02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da06:	d501      	bpl.n	800da0c <_dtoa_r+0x164>
 800da08:	f108 38ff 	add.w	r8, r8, #4294967295
 800da0c:	2100      	movs	r1, #0
 800da0e:	e01e      	b.n	800da4e <_dtoa_r+0x1a6>
 800da10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da12:	4413      	add	r3, r2
 800da14:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800da18:	2920      	cmp	r1, #32
 800da1a:	bfc1      	itttt	gt
 800da1c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800da20:	408e      	lslgt	r6, r1
 800da22:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800da26:	fa24 f101 	lsrgt.w	r1, r4, r1
 800da2a:	bfd6      	itet	le
 800da2c:	f1c1 0120 	rsble	r1, r1, #32
 800da30:	4331      	orrgt	r1, r6
 800da32:	fa04 f101 	lslle.w	r1, r4, r1
 800da36:	ee07 1a90 	vmov	s15, r1
 800da3a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800da3e:	3b01      	subs	r3, #1
 800da40:	ee17 1a90 	vmov	r1, s15
 800da44:	2501      	movs	r5, #1
 800da46:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800da4a:	e7a8      	b.n	800d99e <_dtoa_r+0xf6>
 800da4c:	2101      	movs	r1, #1
 800da4e:	1ad2      	subs	r2, r2, r3
 800da50:	1e53      	subs	r3, r2, #1
 800da52:	9306      	str	r3, [sp, #24]
 800da54:	bf45      	ittet	mi
 800da56:	f1c2 0301 	rsbmi	r3, r2, #1
 800da5a:	9305      	strmi	r3, [sp, #20]
 800da5c:	2300      	movpl	r3, #0
 800da5e:	2300      	movmi	r3, #0
 800da60:	bf4c      	ite	mi
 800da62:	9306      	strmi	r3, [sp, #24]
 800da64:	9305      	strpl	r3, [sp, #20]
 800da66:	f1b8 0f00 	cmp.w	r8, #0
 800da6a:	910c      	str	r1, [sp, #48]	@ 0x30
 800da6c:	db18      	blt.n	800daa0 <_dtoa_r+0x1f8>
 800da6e:	9b06      	ldr	r3, [sp, #24]
 800da70:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800da74:	4443      	add	r3, r8
 800da76:	9306      	str	r3, [sp, #24]
 800da78:	2300      	movs	r3, #0
 800da7a:	9a07      	ldr	r2, [sp, #28]
 800da7c:	2a09      	cmp	r2, #9
 800da7e:	d849      	bhi.n	800db14 <_dtoa_r+0x26c>
 800da80:	2a05      	cmp	r2, #5
 800da82:	bfc4      	itt	gt
 800da84:	3a04      	subgt	r2, #4
 800da86:	9207      	strgt	r2, [sp, #28]
 800da88:	9a07      	ldr	r2, [sp, #28]
 800da8a:	f1a2 0202 	sub.w	r2, r2, #2
 800da8e:	bfcc      	ite	gt
 800da90:	2400      	movgt	r4, #0
 800da92:	2401      	movle	r4, #1
 800da94:	2a03      	cmp	r2, #3
 800da96:	d848      	bhi.n	800db2a <_dtoa_r+0x282>
 800da98:	e8df f002 	tbb	[pc, r2]
 800da9c:	3a2c2e0b 	.word	0x3a2c2e0b
 800daa0:	9b05      	ldr	r3, [sp, #20]
 800daa2:	2200      	movs	r2, #0
 800daa4:	eba3 0308 	sub.w	r3, r3, r8
 800daa8:	9305      	str	r3, [sp, #20]
 800daaa:	920a      	str	r2, [sp, #40]	@ 0x28
 800daac:	f1c8 0300 	rsb	r3, r8, #0
 800dab0:	e7e3      	b.n	800da7a <_dtoa_r+0x1d2>
 800dab2:	2200      	movs	r2, #0
 800dab4:	9208      	str	r2, [sp, #32]
 800dab6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dab8:	2a00      	cmp	r2, #0
 800daba:	dc39      	bgt.n	800db30 <_dtoa_r+0x288>
 800dabc:	f04f 0b01 	mov.w	fp, #1
 800dac0:	46da      	mov	sl, fp
 800dac2:	465a      	mov	r2, fp
 800dac4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800dac8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800dacc:	2100      	movs	r1, #0
 800dace:	2004      	movs	r0, #4
 800dad0:	f100 0614 	add.w	r6, r0, #20
 800dad4:	4296      	cmp	r6, r2
 800dad6:	d930      	bls.n	800db3a <_dtoa_r+0x292>
 800dad8:	6079      	str	r1, [r7, #4]
 800dada:	4648      	mov	r0, r9
 800dadc:	9304      	str	r3, [sp, #16]
 800dade:	f000 fd39 	bl	800e554 <_Balloc>
 800dae2:	9b04      	ldr	r3, [sp, #16]
 800dae4:	4607      	mov	r7, r0
 800dae6:	2800      	cmp	r0, #0
 800dae8:	d146      	bne.n	800db78 <_dtoa_r+0x2d0>
 800daea:	4b22      	ldr	r3, [pc, #136]	@ (800db74 <_dtoa_r+0x2cc>)
 800daec:	4602      	mov	r2, r0
 800daee:	f240 11af 	movw	r1, #431	@ 0x1af
 800daf2:	e6f2      	b.n	800d8da <_dtoa_r+0x32>
 800daf4:	2201      	movs	r2, #1
 800daf6:	e7dd      	b.n	800dab4 <_dtoa_r+0x20c>
 800daf8:	2200      	movs	r2, #0
 800dafa:	9208      	str	r2, [sp, #32]
 800dafc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dafe:	eb08 0b02 	add.w	fp, r8, r2
 800db02:	f10b 0a01 	add.w	sl, fp, #1
 800db06:	4652      	mov	r2, sl
 800db08:	2a01      	cmp	r2, #1
 800db0a:	bfb8      	it	lt
 800db0c:	2201      	movlt	r2, #1
 800db0e:	e7db      	b.n	800dac8 <_dtoa_r+0x220>
 800db10:	2201      	movs	r2, #1
 800db12:	e7f2      	b.n	800dafa <_dtoa_r+0x252>
 800db14:	2401      	movs	r4, #1
 800db16:	2200      	movs	r2, #0
 800db18:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800db1c:	f04f 3bff 	mov.w	fp, #4294967295
 800db20:	2100      	movs	r1, #0
 800db22:	46da      	mov	sl, fp
 800db24:	2212      	movs	r2, #18
 800db26:	9109      	str	r1, [sp, #36]	@ 0x24
 800db28:	e7ce      	b.n	800dac8 <_dtoa_r+0x220>
 800db2a:	2201      	movs	r2, #1
 800db2c:	9208      	str	r2, [sp, #32]
 800db2e:	e7f5      	b.n	800db1c <_dtoa_r+0x274>
 800db30:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800db34:	46da      	mov	sl, fp
 800db36:	465a      	mov	r2, fp
 800db38:	e7c6      	b.n	800dac8 <_dtoa_r+0x220>
 800db3a:	3101      	adds	r1, #1
 800db3c:	0040      	lsls	r0, r0, #1
 800db3e:	e7c7      	b.n	800dad0 <_dtoa_r+0x228>
 800db40:	636f4361 	.word	0x636f4361
 800db44:	3fd287a7 	.word	0x3fd287a7
 800db48:	8b60c8b3 	.word	0x8b60c8b3
 800db4c:	3fc68a28 	.word	0x3fc68a28
 800db50:	509f79fb 	.word	0x509f79fb
 800db54:	3fd34413 	.word	0x3fd34413
 800db58:	08011422 	.word	0x08011422
 800db5c:	080114dc 	.word	0x080114dc
 800db60:	7ff00000 	.word	0x7ff00000
 800db64:	080114d8 	.word	0x080114d8
 800db68:	080113fa 	.word	0x080113fa
 800db6c:	080113f9 	.word	0x080113f9
 800db70:	080115d8 	.word	0x080115d8
 800db74:	08011534 	.word	0x08011534
 800db78:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800db7c:	f1ba 0f0e 	cmp.w	sl, #14
 800db80:	6010      	str	r0, [r2, #0]
 800db82:	d86f      	bhi.n	800dc64 <_dtoa_r+0x3bc>
 800db84:	2c00      	cmp	r4, #0
 800db86:	d06d      	beq.n	800dc64 <_dtoa_r+0x3bc>
 800db88:	f1b8 0f00 	cmp.w	r8, #0
 800db8c:	f340 80c2 	ble.w	800dd14 <_dtoa_r+0x46c>
 800db90:	4aca      	ldr	r2, [pc, #808]	@ (800debc <_dtoa_r+0x614>)
 800db92:	f008 010f 	and.w	r1, r8, #15
 800db96:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800db9a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800db9e:	ed92 7b00 	vldr	d7, [r2]
 800dba2:	ea4f 1128 	mov.w	r1, r8, asr #4
 800dba6:	f000 80a9 	beq.w	800dcfc <_dtoa_r+0x454>
 800dbaa:	4ac5      	ldr	r2, [pc, #788]	@ (800dec0 <_dtoa_r+0x618>)
 800dbac:	ed92 6b08 	vldr	d6, [r2, #32]
 800dbb0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800dbb4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800dbb8:	f001 010f 	and.w	r1, r1, #15
 800dbbc:	2203      	movs	r2, #3
 800dbbe:	48c0      	ldr	r0, [pc, #768]	@ (800dec0 <_dtoa_r+0x618>)
 800dbc0:	2900      	cmp	r1, #0
 800dbc2:	f040 809d 	bne.w	800dd00 <_dtoa_r+0x458>
 800dbc6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800dbca:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800dbce:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dbd2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800dbd4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dbd8:	2900      	cmp	r1, #0
 800dbda:	f000 80c1 	beq.w	800dd60 <_dtoa_r+0x4b8>
 800dbde:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800dbe2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800dbe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbea:	f140 80b9 	bpl.w	800dd60 <_dtoa_r+0x4b8>
 800dbee:	f1ba 0f00 	cmp.w	sl, #0
 800dbf2:	f000 80b5 	beq.w	800dd60 <_dtoa_r+0x4b8>
 800dbf6:	f1bb 0f00 	cmp.w	fp, #0
 800dbfa:	dd31      	ble.n	800dc60 <_dtoa_r+0x3b8>
 800dbfc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800dc00:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dc04:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dc08:	f108 31ff 	add.w	r1, r8, #4294967295
 800dc0c:	9104      	str	r1, [sp, #16]
 800dc0e:	3201      	adds	r2, #1
 800dc10:	465c      	mov	r4, fp
 800dc12:	ed9d 6b02 	vldr	d6, [sp, #8]
 800dc16:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800dc1a:	ee07 2a90 	vmov	s15, r2
 800dc1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dc22:	eea7 5b06 	vfma.f64	d5, d7, d6
 800dc26:	ee15 2a90 	vmov	r2, s11
 800dc2a:	ec51 0b15 	vmov	r0, r1, d5
 800dc2e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800dc32:	2c00      	cmp	r4, #0
 800dc34:	f040 8098 	bne.w	800dd68 <_dtoa_r+0x4c0>
 800dc38:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800dc3c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800dc40:	ec41 0b17 	vmov	d7, r0, r1
 800dc44:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dc48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc4c:	f300 8261 	bgt.w	800e112 <_dtoa_r+0x86a>
 800dc50:	eeb1 7b47 	vneg.f64	d7, d7
 800dc54:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dc58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc5c:	f100 80f5 	bmi.w	800de4a <_dtoa_r+0x5a2>
 800dc60:	ed8d 8b02 	vstr	d8, [sp, #8]
 800dc64:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800dc66:	2a00      	cmp	r2, #0
 800dc68:	f2c0 812c 	blt.w	800dec4 <_dtoa_r+0x61c>
 800dc6c:	f1b8 0f0e 	cmp.w	r8, #14
 800dc70:	f300 8128 	bgt.w	800dec4 <_dtoa_r+0x61c>
 800dc74:	4b91      	ldr	r3, [pc, #580]	@ (800debc <_dtoa_r+0x614>)
 800dc76:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800dc7a:	ed93 6b00 	vldr	d6, [r3]
 800dc7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	da03      	bge.n	800dc8c <_dtoa_r+0x3e4>
 800dc84:	f1ba 0f00 	cmp.w	sl, #0
 800dc88:	f340 80d2 	ble.w	800de30 <_dtoa_r+0x588>
 800dc8c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800dc90:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dc94:	463e      	mov	r6, r7
 800dc96:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800dc9a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800dc9e:	ee15 3a10 	vmov	r3, s10
 800dca2:	3330      	adds	r3, #48	@ 0x30
 800dca4:	f806 3b01 	strb.w	r3, [r6], #1
 800dca8:	1bf3      	subs	r3, r6, r7
 800dcaa:	459a      	cmp	sl, r3
 800dcac:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800dcb0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800dcb4:	f040 80f8 	bne.w	800dea8 <_dtoa_r+0x600>
 800dcb8:	ee37 7b07 	vadd.f64	d7, d7, d7
 800dcbc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800dcc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcc4:	f300 80dd 	bgt.w	800de82 <_dtoa_r+0x5da>
 800dcc8:	eeb4 7b46 	vcmp.f64	d7, d6
 800dccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcd0:	d104      	bne.n	800dcdc <_dtoa_r+0x434>
 800dcd2:	ee15 3a10 	vmov	r3, s10
 800dcd6:	07db      	lsls	r3, r3, #31
 800dcd8:	f100 80d3 	bmi.w	800de82 <_dtoa_r+0x5da>
 800dcdc:	9901      	ldr	r1, [sp, #4]
 800dcde:	4648      	mov	r0, r9
 800dce0:	f000 fc78 	bl	800e5d4 <_Bfree>
 800dce4:	2300      	movs	r3, #0
 800dce6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dce8:	7033      	strb	r3, [r6, #0]
 800dcea:	f108 0301 	add.w	r3, r8, #1
 800dcee:	6013      	str	r3, [r2, #0]
 800dcf0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	f000 8304 	beq.w	800e300 <_dtoa_r+0xa58>
 800dcf8:	601e      	str	r6, [r3, #0]
 800dcfa:	e301      	b.n	800e300 <_dtoa_r+0xa58>
 800dcfc:	2202      	movs	r2, #2
 800dcfe:	e75e      	b.n	800dbbe <_dtoa_r+0x316>
 800dd00:	07cc      	lsls	r4, r1, #31
 800dd02:	d504      	bpl.n	800dd0e <_dtoa_r+0x466>
 800dd04:	ed90 6b00 	vldr	d6, [r0]
 800dd08:	3201      	adds	r2, #1
 800dd0a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dd0e:	1049      	asrs	r1, r1, #1
 800dd10:	3008      	adds	r0, #8
 800dd12:	e755      	b.n	800dbc0 <_dtoa_r+0x318>
 800dd14:	d022      	beq.n	800dd5c <_dtoa_r+0x4b4>
 800dd16:	f1c8 0100 	rsb	r1, r8, #0
 800dd1a:	4a68      	ldr	r2, [pc, #416]	@ (800debc <_dtoa_r+0x614>)
 800dd1c:	f001 000f 	and.w	r0, r1, #15
 800dd20:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800dd24:	ed92 7b00 	vldr	d7, [r2]
 800dd28:	ee28 7b07 	vmul.f64	d7, d8, d7
 800dd2c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dd30:	4863      	ldr	r0, [pc, #396]	@ (800dec0 <_dtoa_r+0x618>)
 800dd32:	1109      	asrs	r1, r1, #4
 800dd34:	2400      	movs	r4, #0
 800dd36:	2202      	movs	r2, #2
 800dd38:	b929      	cbnz	r1, 800dd46 <_dtoa_r+0x49e>
 800dd3a:	2c00      	cmp	r4, #0
 800dd3c:	f43f af49 	beq.w	800dbd2 <_dtoa_r+0x32a>
 800dd40:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dd44:	e745      	b.n	800dbd2 <_dtoa_r+0x32a>
 800dd46:	07ce      	lsls	r6, r1, #31
 800dd48:	d505      	bpl.n	800dd56 <_dtoa_r+0x4ae>
 800dd4a:	ed90 6b00 	vldr	d6, [r0]
 800dd4e:	3201      	adds	r2, #1
 800dd50:	2401      	movs	r4, #1
 800dd52:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dd56:	1049      	asrs	r1, r1, #1
 800dd58:	3008      	adds	r0, #8
 800dd5a:	e7ed      	b.n	800dd38 <_dtoa_r+0x490>
 800dd5c:	2202      	movs	r2, #2
 800dd5e:	e738      	b.n	800dbd2 <_dtoa_r+0x32a>
 800dd60:	f8cd 8010 	str.w	r8, [sp, #16]
 800dd64:	4654      	mov	r4, sl
 800dd66:	e754      	b.n	800dc12 <_dtoa_r+0x36a>
 800dd68:	4a54      	ldr	r2, [pc, #336]	@ (800debc <_dtoa_r+0x614>)
 800dd6a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800dd6e:	ed12 4b02 	vldr	d4, [r2, #-8]
 800dd72:	9a08      	ldr	r2, [sp, #32]
 800dd74:	ec41 0b17 	vmov	d7, r0, r1
 800dd78:	443c      	add	r4, r7
 800dd7a:	b34a      	cbz	r2, 800ddd0 <_dtoa_r+0x528>
 800dd7c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800dd80:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800dd84:	463e      	mov	r6, r7
 800dd86:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800dd8a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800dd8e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800dd92:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800dd96:	ee14 2a90 	vmov	r2, s9
 800dd9a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800dd9e:	3230      	adds	r2, #48	@ 0x30
 800dda0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800dda4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dda8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddac:	f806 2b01 	strb.w	r2, [r6], #1
 800ddb0:	d438      	bmi.n	800de24 <_dtoa_r+0x57c>
 800ddb2:	ee32 5b46 	vsub.f64	d5, d2, d6
 800ddb6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800ddba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddbe:	d462      	bmi.n	800de86 <_dtoa_r+0x5de>
 800ddc0:	42a6      	cmp	r6, r4
 800ddc2:	f43f af4d 	beq.w	800dc60 <_dtoa_r+0x3b8>
 800ddc6:	ee27 7b03 	vmul.f64	d7, d7, d3
 800ddca:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ddce:	e7e0      	b.n	800dd92 <_dtoa_r+0x4ea>
 800ddd0:	4621      	mov	r1, r4
 800ddd2:	463e      	mov	r6, r7
 800ddd4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ddd8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800dddc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800dde0:	ee14 2a90 	vmov	r2, s9
 800dde4:	3230      	adds	r2, #48	@ 0x30
 800dde6:	f806 2b01 	strb.w	r2, [r6], #1
 800ddea:	42a6      	cmp	r6, r4
 800ddec:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ddf0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ddf4:	d119      	bne.n	800de2a <_dtoa_r+0x582>
 800ddf6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800ddfa:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ddfe:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800de02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de06:	dc3e      	bgt.n	800de86 <_dtoa_r+0x5de>
 800de08:	ee35 5b47 	vsub.f64	d5, d5, d7
 800de0c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800de10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de14:	f57f af24 	bpl.w	800dc60 <_dtoa_r+0x3b8>
 800de18:	460e      	mov	r6, r1
 800de1a:	3901      	subs	r1, #1
 800de1c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800de20:	2b30      	cmp	r3, #48	@ 0x30
 800de22:	d0f9      	beq.n	800de18 <_dtoa_r+0x570>
 800de24:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800de28:	e758      	b.n	800dcdc <_dtoa_r+0x434>
 800de2a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800de2e:	e7d5      	b.n	800dddc <_dtoa_r+0x534>
 800de30:	d10b      	bne.n	800de4a <_dtoa_r+0x5a2>
 800de32:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800de36:	ee26 6b07 	vmul.f64	d6, d6, d7
 800de3a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800de3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800de42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de46:	f2c0 8161 	blt.w	800e10c <_dtoa_r+0x864>
 800de4a:	2400      	movs	r4, #0
 800de4c:	4625      	mov	r5, r4
 800de4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de50:	43db      	mvns	r3, r3
 800de52:	9304      	str	r3, [sp, #16]
 800de54:	463e      	mov	r6, r7
 800de56:	f04f 0800 	mov.w	r8, #0
 800de5a:	4621      	mov	r1, r4
 800de5c:	4648      	mov	r0, r9
 800de5e:	f000 fbb9 	bl	800e5d4 <_Bfree>
 800de62:	2d00      	cmp	r5, #0
 800de64:	d0de      	beq.n	800de24 <_dtoa_r+0x57c>
 800de66:	f1b8 0f00 	cmp.w	r8, #0
 800de6a:	d005      	beq.n	800de78 <_dtoa_r+0x5d0>
 800de6c:	45a8      	cmp	r8, r5
 800de6e:	d003      	beq.n	800de78 <_dtoa_r+0x5d0>
 800de70:	4641      	mov	r1, r8
 800de72:	4648      	mov	r0, r9
 800de74:	f000 fbae 	bl	800e5d4 <_Bfree>
 800de78:	4629      	mov	r1, r5
 800de7a:	4648      	mov	r0, r9
 800de7c:	f000 fbaa 	bl	800e5d4 <_Bfree>
 800de80:	e7d0      	b.n	800de24 <_dtoa_r+0x57c>
 800de82:	f8cd 8010 	str.w	r8, [sp, #16]
 800de86:	4633      	mov	r3, r6
 800de88:	461e      	mov	r6, r3
 800de8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de8e:	2a39      	cmp	r2, #57	@ 0x39
 800de90:	d106      	bne.n	800dea0 <_dtoa_r+0x5f8>
 800de92:	429f      	cmp	r7, r3
 800de94:	d1f8      	bne.n	800de88 <_dtoa_r+0x5e0>
 800de96:	9a04      	ldr	r2, [sp, #16]
 800de98:	3201      	adds	r2, #1
 800de9a:	9204      	str	r2, [sp, #16]
 800de9c:	2230      	movs	r2, #48	@ 0x30
 800de9e:	703a      	strb	r2, [r7, #0]
 800dea0:	781a      	ldrb	r2, [r3, #0]
 800dea2:	3201      	adds	r2, #1
 800dea4:	701a      	strb	r2, [r3, #0]
 800dea6:	e7bd      	b.n	800de24 <_dtoa_r+0x57c>
 800dea8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800deac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800deb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deb4:	f47f aeef 	bne.w	800dc96 <_dtoa_r+0x3ee>
 800deb8:	e710      	b.n	800dcdc <_dtoa_r+0x434>
 800deba:	bf00      	nop
 800debc:	080115d8 	.word	0x080115d8
 800dec0:	080115b0 	.word	0x080115b0
 800dec4:	9908      	ldr	r1, [sp, #32]
 800dec6:	2900      	cmp	r1, #0
 800dec8:	f000 80e3 	beq.w	800e092 <_dtoa_r+0x7ea>
 800decc:	9907      	ldr	r1, [sp, #28]
 800dece:	2901      	cmp	r1, #1
 800ded0:	f300 80c8 	bgt.w	800e064 <_dtoa_r+0x7bc>
 800ded4:	2d00      	cmp	r5, #0
 800ded6:	f000 80c1 	beq.w	800e05c <_dtoa_r+0x7b4>
 800deda:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800dede:	9e05      	ldr	r6, [sp, #20]
 800dee0:	461c      	mov	r4, r3
 800dee2:	9304      	str	r3, [sp, #16]
 800dee4:	9b05      	ldr	r3, [sp, #20]
 800dee6:	4413      	add	r3, r2
 800dee8:	9305      	str	r3, [sp, #20]
 800deea:	9b06      	ldr	r3, [sp, #24]
 800deec:	2101      	movs	r1, #1
 800deee:	4413      	add	r3, r2
 800def0:	4648      	mov	r0, r9
 800def2:	9306      	str	r3, [sp, #24]
 800def4:	f000 fc6c 	bl	800e7d0 <__i2b>
 800def8:	9b04      	ldr	r3, [sp, #16]
 800defa:	4605      	mov	r5, r0
 800defc:	b166      	cbz	r6, 800df18 <_dtoa_r+0x670>
 800defe:	9a06      	ldr	r2, [sp, #24]
 800df00:	2a00      	cmp	r2, #0
 800df02:	dd09      	ble.n	800df18 <_dtoa_r+0x670>
 800df04:	42b2      	cmp	r2, r6
 800df06:	9905      	ldr	r1, [sp, #20]
 800df08:	bfa8      	it	ge
 800df0a:	4632      	movge	r2, r6
 800df0c:	1a89      	subs	r1, r1, r2
 800df0e:	9105      	str	r1, [sp, #20]
 800df10:	9906      	ldr	r1, [sp, #24]
 800df12:	1ab6      	subs	r6, r6, r2
 800df14:	1a8a      	subs	r2, r1, r2
 800df16:	9206      	str	r2, [sp, #24]
 800df18:	b1fb      	cbz	r3, 800df5a <_dtoa_r+0x6b2>
 800df1a:	9a08      	ldr	r2, [sp, #32]
 800df1c:	2a00      	cmp	r2, #0
 800df1e:	f000 80bc 	beq.w	800e09a <_dtoa_r+0x7f2>
 800df22:	b19c      	cbz	r4, 800df4c <_dtoa_r+0x6a4>
 800df24:	4629      	mov	r1, r5
 800df26:	4622      	mov	r2, r4
 800df28:	4648      	mov	r0, r9
 800df2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df2c:	f000 fd10 	bl	800e950 <__pow5mult>
 800df30:	9a01      	ldr	r2, [sp, #4]
 800df32:	4601      	mov	r1, r0
 800df34:	4605      	mov	r5, r0
 800df36:	4648      	mov	r0, r9
 800df38:	f000 fc60 	bl	800e7fc <__multiply>
 800df3c:	9901      	ldr	r1, [sp, #4]
 800df3e:	9004      	str	r0, [sp, #16]
 800df40:	4648      	mov	r0, r9
 800df42:	f000 fb47 	bl	800e5d4 <_Bfree>
 800df46:	9a04      	ldr	r2, [sp, #16]
 800df48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800df4a:	9201      	str	r2, [sp, #4]
 800df4c:	1b1a      	subs	r2, r3, r4
 800df4e:	d004      	beq.n	800df5a <_dtoa_r+0x6b2>
 800df50:	9901      	ldr	r1, [sp, #4]
 800df52:	4648      	mov	r0, r9
 800df54:	f000 fcfc 	bl	800e950 <__pow5mult>
 800df58:	9001      	str	r0, [sp, #4]
 800df5a:	2101      	movs	r1, #1
 800df5c:	4648      	mov	r0, r9
 800df5e:	f000 fc37 	bl	800e7d0 <__i2b>
 800df62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df64:	4604      	mov	r4, r0
 800df66:	2b00      	cmp	r3, #0
 800df68:	f000 81d0 	beq.w	800e30c <_dtoa_r+0xa64>
 800df6c:	461a      	mov	r2, r3
 800df6e:	4601      	mov	r1, r0
 800df70:	4648      	mov	r0, r9
 800df72:	f000 fced 	bl	800e950 <__pow5mult>
 800df76:	9b07      	ldr	r3, [sp, #28]
 800df78:	2b01      	cmp	r3, #1
 800df7a:	4604      	mov	r4, r0
 800df7c:	f300 8095 	bgt.w	800e0aa <_dtoa_r+0x802>
 800df80:	9b02      	ldr	r3, [sp, #8]
 800df82:	2b00      	cmp	r3, #0
 800df84:	f040 808b 	bne.w	800e09e <_dtoa_r+0x7f6>
 800df88:	9b03      	ldr	r3, [sp, #12]
 800df8a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800df8e:	2a00      	cmp	r2, #0
 800df90:	f040 8087 	bne.w	800e0a2 <_dtoa_r+0x7fa>
 800df94:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800df98:	0d12      	lsrs	r2, r2, #20
 800df9a:	0512      	lsls	r2, r2, #20
 800df9c:	2a00      	cmp	r2, #0
 800df9e:	f000 8082 	beq.w	800e0a6 <_dtoa_r+0x7fe>
 800dfa2:	9b05      	ldr	r3, [sp, #20]
 800dfa4:	3301      	adds	r3, #1
 800dfa6:	9305      	str	r3, [sp, #20]
 800dfa8:	9b06      	ldr	r3, [sp, #24]
 800dfaa:	3301      	adds	r3, #1
 800dfac:	9306      	str	r3, [sp, #24]
 800dfae:	2301      	movs	r3, #1
 800dfb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dfb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	f000 81af 	beq.w	800e318 <_dtoa_r+0xa70>
 800dfba:	6922      	ldr	r2, [r4, #16]
 800dfbc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800dfc0:	6910      	ldr	r0, [r2, #16]
 800dfc2:	f000 fbb9 	bl	800e738 <__hi0bits>
 800dfc6:	f1c0 0020 	rsb	r0, r0, #32
 800dfca:	9b06      	ldr	r3, [sp, #24]
 800dfcc:	4418      	add	r0, r3
 800dfce:	f010 001f 	ands.w	r0, r0, #31
 800dfd2:	d076      	beq.n	800e0c2 <_dtoa_r+0x81a>
 800dfd4:	f1c0 0220 	rsb	r2, r0, #32
 800dfd8:	2a04      	cmp	r2, #4
 800dfda:	dd69      	ble.n	800e0b0 <_dtoa_r+0x808>
 800dfdc:	9b05      	ldr	r3, [sp, #20]
 800dfde:	f1c0 001c 	rsb	r0, r0, #28
 800dfe2:	4403      	add	r3, r0
 800dfe4:	9305      	str	r3, [sp, #20]
 800dfe6:	9b06      	ldr	r3, [sp, #24]
 800dfe8:	4406      	add	r6, r0
 800dfea:	4403      	add	r3, r0
 800dfec:	9306      	str	r3, [sp, #24]
 800dfee:	9b05      	ldr	r3, [sp, #20]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	dd05      	ble.n	800e000 <_dtoa_r+0x758>
 800dff4:	9901      	ldr	r1, [sp, #4]
 800dff6:	461a      	mov	r2, r3
 800dff8:	4648      	mov	r0, r9
 800dffa:	f000 fd03 	bl	800ea04 <__lshift>
 800dffe:	9001      	str	r0, [sp, #4]
 800e000:	9b06      	ldr	r3, [sp, #24]
 800e002:	2b00      	cmp	r3, #0
 800e004:	dd05      	ble.n	800e012 <_dtoa_r+0x76a>
 800e006:	4621      	mov	r1, r4
 800e008:	461a      	mov	r2, r3
 800e00a:	4648      	mov	r0, r9
 800e00c:	f000 fcfa 	bl	800ea04 <__lshift>
 800e010:	4604      	mov	r4, r0
 800e012:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e014:	2b00      	cmp	r3, #0
 800e016:	d056      	beq.n	800e0c6 <_dtoa_r+0x81e>
 800e018:	9801      	ldr	r0, [sp, #4]
 800e01a:	4621      	mov	r1, r4
 800e01c:	f000 fd5e 	bl	800eadc <__mcmp>
 800e020:	2800      	cmp	r0, #0
 800e022:	da50      	bge.n	800e0c6 <_dtoa_r+0x81e>
 800e024:	f108 33ff 	add.w	r3, r8, #4294967295
 800e028:	9304      	str	r3, [sp, #16]
 800e02a:	9901      	ldr	r1, [sp, #4]
 800e02c:	2300      	movs	r3, #0
 800e02e:	220a      	movs	r2, #10
 800e030:	4648      	mov	r0, r9
 800e032:	f000 faf1 	bl	800e618 <__multadd>
 800e036:	9b08      	ldr	r3, [sp, #32]
 800e038:	9001      	str	r0, [sp, #4]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	f000 816e 	beq.w	800e31c <_dtoa_r+0xa74>
 800e040:	4629      	mov	r1, r5
 800e042:	2300      	movs	r3, #0
 800e044:	220a      	movs	r2, #10
 800e046:	4648      	mov	r0, r9
 800e048:	f000 fae6 	bl	800e618 <__multadd>
 800e04c:	f1bb 0f00 	cmp.w	fp, #0
 800e050:	4605      	mov	r5, r0
 800e052:	dc64      	bgt.n	800e11e <_dtoa_r+0x876>
 800e054:	9b07      	ldr	r3, [sp, #28]
 800e056:	2b02      	cmp	r3, #2
 800e058:	dc3e      	bgt.n	800e0d8 <_dtoa_r+0x830>
 800e05a:	e060      	b.n	800e11e <_dtoa_r+0x876>
 800e05c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e05e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e062:	e73c      	b.n	800dede <_dtoa_r+0x636>
 800e064:	f10a 34ff 	add.w	r4, sl, #4294967295
 800e068:	42a3      	cmp	r3, r4
 800e06a:	bfbf      	itttt	lt
 800e06c:	1ae2      	sublt	r2, r4, r3
 800e06e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e070:	189b      	addlt	r3, r3, r2
 800e072:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800e074:	bfae      	itee	ge
 800e076:	1b1c      	subge	r4, r3, r4
 800e078:	4623      	movlt	r3, r4
 800e07a:	2400      	movlt	r4, #0
 800e07c:	f1ba 0f00 	cmp.w	sl, #0
 800e080:	bfb5      	itete	lt
 800e082:	9a05      	ldrlt	r2, [sp, #20]
 800e084:	9e05      	ldrge	r6, [sp, #20]
 800e086:	eba2 060a 	sublt.w	r6, r2, sl
 800e08a:	4652      	movge	r2, sl
 800e08c:	bfb8      	it	lt
 800e08e:	2200      	movlt	r2, #0
 800e090:	e727      	b.n	800dee2 <_dtoa_r+0x63a>
 800e092:	9e05      	ldr	r6, [sp, #20]
 800e094:	9d08      	ldr	r5, [sp, #32]
 800e096:	461c      	mov	r4, r3
 800e098:	e730      	b.n	800defc <_dtoa_r+0x654>
 800e09a:	461a      	mov	r2, r3
 800e09c:	e758      	b.n	800df50 <_dtoa_r+0x6a8>
 800e09e:	2300      	movs	r3, #0
 800e0a0:	e786      	b.n	800dfb0 <_dtoa_r+0x708>
 800e0a2:	9b02      	ldr	r3, [sp, #8]
 800e0a4:	e784      	b.n	800dfb0 <_dtoa_r+0x708>
 800e0a6:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e0a8:	e783      	b.n	800dfb2 <_dtoa_r+0x70a>
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e0ae:	e784      	b.n	800dfba <_dtoa_r+0x712>
 800e0b0:	d09d      	beq.n	800dfee <_dtoa_r+0x746>
 800e0b2:	9b05      	ldr	r3, [sp, #20]
 800e0b4:	321c      	adds	r2, #28
 800e0b6:	4413      	add	r3, r2
 800e0b8:	9305      	str	r3, [sp, #20]
 800e0ba:	9b06      	ldr	r3, [sp, #24]
 800e0bc:	4416      	add	r6, r2
 800e0be:	4413      	add	r3, r2
 800e0c0:	e794      	b.n	800dfec <_dtoa_r+0x744>
 800e0c2:	4602      	mov	r2, r0
 800e0c4:	e7f5      	b.n	800e0b2 <_dtoa_r+0x80a>
 800e0c6:	f1ba 0f00 	cmp.w	sl, #0
 800e0ca:	f8cd 8010 	str.w	r8, [sp, #16]
 800e0ce:	46d3      	mov	fp, sl
 800e0d0:	dc21      	bgt.n	800e116 <_dtoa_r+0x86e>
 800e0d2:	9b07      	ldr	r3, [sp, #28]
 800e0d4:	2b02      	cmp	r3, #2
 800e0d6:	dd1e      	ble.n	800e116 <_dtoa_r+0x86e>
 800e0d8:	f1bb 0f00 	cmp.w	fp, #0
 800e0dc:	f47f aeb7 	bne.w	800de4e <_dtoa_r+0x5a6>
 800e0e0:	4621      	mov	r1, r4
 800e0e2:	465b      	mov	r3, fp
 800e0e4:	2205      	movs	r2, #5
 800e0e6:	4648      	mov	r0, r9
 800e0e8:	f000 fa96 	bl	800e618 <__multadd>
 800e0ec:	4601      	mov	r1, r0
 800e0ee:	4604      	mov	r4, r0
 800e0f0:	9801      	ldr	r0, [sp, #4]
 800e0f2:	f000 fcf3 	bl	800eadc <__mcmp>
 800e0f6:	2800      	cmp	r0, #0
 800e0f8:	f77f aea9 	ble.w	800de4e <_dtoa_r+0x5a6>
 800e0fc:	463e      	mov	r6, r7
 800e0fe:	2331      	movs	r3, #49	@ 0x31
 800e100:	f806 3b01 	strb.w	r3, [r6], #1
 800e104:	9b04      	ldr	r3, [sp, #16]
 800e106:	3301      	adds	r3, #1
 800e108:	9304      	str	r3, [sp, #16]
 800e10a:	e6a4      	b.n	800de56 <_dtoa_r+0x5ae>
 800e10c:	f8cd 8010 	str.w	r8, [sp, #16]
 800e110:	4654      	mov	r4, sl
 800e112:	4625      	mov	r5, r4
 800e114:	e7f2      	b.n	800e0fc <_dtoa_r+0x854>
 800e116:	9b08      	ldr	r3, [sp, #32]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	f000 8103 	beq.w	800e324 <_dtoa_r+0xa7c>
 800e11e:	2e00      	cmp	r6, #0
 800e120:	dd05      	ble.n	800e12e <_dtoa_r+0x886>
 800e122:	4629      	mov	r1, r5
 800e124:	4632      	mov	r2, r6
 800e126:	4648      	mov	r0, r9
 800e128:	f000 fc6c 	bl	800ea04 <__lshift>
 800e12c:	4605      	mov	r5, r0
 800e12e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e130:	2b00      	cmp	r3, #0
 800e132:	d058      	beq.n	800e1e6 <_dtoa_r+0x93e>
 800e134:	6869      	ldr	r1, [r5, #4]
 800e136:	4648      	mov	r0, r9
 800e138:	f000 fa0c 	bl	800e554 <_Balloc>
 800e13c:	4606      	mov	r6, r0
 800e13e:	b928      	cbnz	r0, 800e14c <_dtoa_r+0x8a4>
 800e140:	4b82      	ldr	r3, [pc, #520]	@ (800e34c <_dtoa_r+0xaa4>)
 800e142:	4602      	mov	r2, r0
 800e144:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e148:	f7ff bbc7 	b.w	800d8da <_dtoa_r+0x32>
 800e14c:	692a      	ldr	r2, [r5, #16]
 800e14e:	3202      	adds	r2, #2
 800e150:	0092      	lsls	r2, r2, #2
 800e152:	f105 010c 	add.w	r1, r5, #12
 800e156:	300c      	adds	r0, #12
 800e158:	f7ff faeb 	bl	800d732 <memcpy>
 800e15c:	2201      	movs	r2, #1
 800e15e:	4631      	mov	r1, r6
 800e160:	4648      	mov	r0, r9
 800e162:	f000 fc4f 	bl	800ea04 <__lshift>
 800e166:	1c7b      	adds	r3, r7, #1
 800e168:	9305      	str	r3, [sp, #20]
 800e16a:	eb07 030b 	add.w	r3, r7, fp
 800e16e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e170:	9b02      	ldr	r3, [sp, #8]
 800e172:	f003 0301 	and.w	r3, r3, #1
 800e176:	46a8      	mov	r8, r5
 800e178:	9308      	str	r3, [sp, #32]
 800e17a:	4605      	mov	r5, r0
 800e17c:	9b05      	ldr	r3, [sp, #20]
 800e17e:	9801      	ldr	r0, [sp, #4]
 800e180:	4621      	mov	r1, r4
 800e182:	f103 3bff 	add.w	fp, r3, #4294967295
 800e186:	f7ff fb07 	bl	800d798 <quorem>
 800e18a:	4641      	mov	r1, r8
 800e18c:	9002      	str	r0, [sp, #8]
 800e18e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800e192:	9801      	ldr	r0, [sp, #4]
 800e194:	f000 fca2 	bl	800eadc <__mcmp>
 800e198:	462a      	mov	r2, r5
 800e19a:	9006      	str	r0, [sp, #24]
 800e19c:	4621      	mov	r1, r4
 800e19e:	4648      	mov	r0, r9
 800e1a0:	f000 fcb8 	bl	800eb14 <__mdiff>
 800e1a4:	68c2      	ldr	r2, [r0, #12]
 800e1a6:	4606      	mov	r6, r0
 800e1a8:	b9fa      	cbnz	r2, 800e1ea <_dtoa_r+0x942>
 800e1aa:	4601      	mov	r1, r0
 800e1ac:	9801      	ldr	r0, [sp, #4]
 800e1ae:	f000 fc95 	bl	800eadc <__mcmp>
 800e1b2:	4602      	mov	r2, r0
 800e1b4:	4631      	mov	r1, r6
 800e1b6:	4648      	mov	r0, r9
 800e1b8:	920a      	str	r2, [sp, #40]	@ 0x28
 800e1ba:	f000 fa0b 	bl	800e5d4 <_Bfree>
 800e1be:	9b07      	ldr	r3, [sp, #28]
 800e1c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e1c2:	9e05      	ldr	r6, [sp, #20]
 800e1c4:	ea43 0102 	orr.w	r1, r3, r2
 800e1c8:	9b08      	ldr	r3, [sp, #32]
 800e1ca:	4319      	orrs	r1, r3
 800e1cc:	d10f      	bne.n	800e1ee <_dtoa_r+0x946>
 800e1ce:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800e1d2:	d028      	beq.n	800e226 <_dtoa_r+0x97e>
 800e1d4:	9b06      	ldr	r3, [sp, #24]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	dd02      	ble.n	800e1e0 <_dtoa_r+0x938>
 800e1da:	9b02      	ldr	r3, [sp, #8]
 800e1dc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800e1e0:	f88b a000 	strb.w	sl, [fp]
 800e1e4:	e639      	b.n	800de5a <_dtoa_r+0x5b2>
 800e1e6:	4628      	mov	r0, r5
 800e1e8:	e7bd      	b.n	800e166 <_dtoa_r+0x8be>
 800e1ea:	2201      	movs	r2, #1
 800e1ec:	e7e2      	b.n	800e1b4 <_dtoa_r+0x90c>
 800e1ee:	9b06      	ldr	r3, [sp, #24]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	db04      	blt.n	800e1fe <_dtoa_r+0x956>
 800e1f4:	9907      	ldr	r1, [sp, #28]
 800e1f6:	430b      	orrs	r3, r1
 800e1f8:	9908      	ldr	r1, [sp, #32]
 800e1fa:	430b      	orrs	r3, r1
 800e1fc:	d120      	bne.n	800e240 <_dtoa_r+0x998>
 800e1fe:	2a00      	cmp	r2, #0
 800e200:	ddee      	ble.n	800e1e0 <_dtoa_r+0x938>
 800e202:	9901      	ldr	r1, [sp, #4]
 800e204:	2201      	movs	r2, #1
 800e206:	4648      	mov	r0, r9
 800e208:	f000 fbfc 	bl	800ea04 <__lshift>
 800e20c:	4621      	mov	r1, r4
 800e20e:	9001      	str	r0, [sp, #4]
 800e210:	f000 fc64 	bl	800eadc <__mcmp>
 800e214:	2800      	cmp	r0, #0
 800e216:	dc03      	bgt.n	800e220 <_dtoa_r+0x978>
 800e218:	d1e2      	bne.n	800e1e0 <_dtoa_r+0x938>
 800e21a:	f01a 0f01 	tst.w	sl, #1
 800e21e:	d0df      	beq.n	800e1e0 <_dtoa_r+0x938>
 800e220:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800e224:	d1d9      	bne.n	800e1da <_dtoa_r+0x932>
 800e226:	2339      	movs	r3, #57	@ 0x39
 800e228:	f88b 3000 	strb.w	r3, [fp]
 800e22c:	4633      	mov	r3, r6
 800e22e:	461e      	mov	r6, r3
 800e230:	3b01      	subs	r3, #1
 800e232:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e236:	2a39      	cmp	r2, #57	@ 0x39
 800e238:	d053      	beq.n	800e2e2 <_dtoa_r+0xa3a>
 800e23a:	3201      	adds	r2, #1
 800e23c:	701a      	strb	r2, [r3, #0]
 800e23e:	e60c      	b.n	800de5a <_dtoa_r+0x5b2>
 800e240:	2a00      	cmp	r2, #0
 800e242:	dd07      	ble.n	800e254 <_dtoa_r+0x9ac>
 800e244:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800e248:	d0ed      	beq.n	800e226 <_dtoa_r+0x97e>
 800e24a:	f10a 0301 	add.w	r3, sl, #1
 800e24e:	f88b 3000 	strb.w	r3, [fp]
 800e252:	e602      	b.n	800de5a <_dtoa_r+0x5b2>
 800e254:	9b05      	ldr	r3, [sp, #20]
 800e256:	9a05      	ldr	r2, [sp, #20]
 800e258:	f803 ac01 	strb.w	sl, [r3, #-1]
 800e25c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e25e:	4293      	cmp	r3, r2
 800e260:	d029      	beq.n	800e2b6 <_dtoa_r+0xa0e>
 800e262:	9901      	ldr	r1, [sp, #4]
 800e264:	2300      	movs	r3, #0
 800e266:	220a      	movs	r2, #10
 800e268:	4648      	mov	r0, r9
 800e26a:	f000 f9d5 	bl	800e618 <__multadd>
 800e26e:	45a8      	cmp	r8, r5
 800e270:	9001      	str	r0, [sp, #4]
 800e272:	f04f 0300 	mov.w	r3, #0
 800e276:	f04f 020a 	mov.w	r2, #10
 800e27a:	4641      	mov	r1, r8
 800e27c:	4648      	mov	r0, r9
 800e27e:	d107      	bne.n	800e290 <_dtoa_r+0x9e8>
 800e280:	f000 f9ca 	bl	800e618 <__multadd>
 800e284:	4680      	mov	r8, r0
 800e286:	4605      	mov	r5, r0
 800e288:	9b05      	ldr	r3, [sp, #20]
 800e28a:	3301      	adds	r3, #1
 800e28c:	9305      	str	r3, [sp, #20]
 800e28e:	e775      	b.n	800e17c <_dtoa_r+0x8d4>
 800e290:	f000 f9c2 	bl	800e618 <__multadd>
 800e294:	4629      	mov	r1, r5
 800e296:	4680      	mov	r8, r0
 800e298:	2300      	movs	r3, #0
 800e29a:	220a      	movs	r2, #10
 800e29c:	4648      	mov	r0, r9
 800e29e:	f000 f9bb 	bl	800e618 <__multadd>
 800e2a2:	4605      	mov	r5, r0
 800e2a4:	e7f0      	b.n	800e288 <_dtoa_r+0x9e0>
 800e2a6:	f1bb 0f00 	cmp.w	fp, #0
 800e2aa:	bfcc      	ite	gt
 800e2ac:	465e      	movgt	r6, fp
 800e2ae:	2601      	movle	r6, #1
 800e2b0:	443e      	add	r6, r7
 800e2b2:	f04f 0800 	mov.w	r8, #0
 800e2b6:	9901      	ldr	r1, [sp, #4]
 800e2b8:	2201      	movs	r2, #1
 800e2ba:	4648      	mov	r0, r9
 800e2bc:	f000 fba2 	bl	800ea04 <__lshift>
 800e2c0:	4621      	mov	r1, r4
 800e2c2:	9001      	str	r0, [sp, #4]
 800e2c4:	f000 fc0a 	bl	800eadc <__mcmp>
 800e2c8:	2800      	cmp	r0, #0
 800e2ca:	dcaf      	bgt.n	800e22c <_dtoa_r+0x984>
 800e2cc:	d102      	bne.n	800e2d4 <_dtoa_r+0xa2c>
 800e2ce:	f01a 0f01 	tst.w	sl, #1
 800e2d2:	d1ab      	bne.n	800e22c <_dtoa_r+0x984>
 800e2d4:	4633      	mov	r3, r6
 800e2d6:	461e      	mov	r6, r3
 800e2d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e2dc:	2a30      	cmp	r2, #48	@ 0x30
 800e2de:	d0fa      	beq.n	800e2d6 <_dtoa_r+0xa2e>
 800e2e0:	e5bb      	b.n	800de5a <_dtoa_r+0x5b2>
 800e2e2:	429f      	cmp	r7, r3
 800e2e4:	d1a3      	bne.n	800e22e <_dtoa_r+0x986>
 800e2e6:	9b04      	ldr	r3, [sp, #16]
 800e2e8:	3301      	adds	r3, #1
 800e2ea:	9304      	str	r3, [sp, #16]
 800e2ec:	2331      	movs	r3, #49	@ 0x31
 800e2ee:	703b      	strb	r3, [r7, #0]
 800e2f0:	e5b3      	b.n	800de5a <_dtoa_r+0x5b2>
 800e2f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e2f4:	4f16      	ldr	r7, [pc, #88]	@ (800e350 <_dtoa_r+0xaa8>)
 800e2f6:	b11b      	cbz	r3, 800e300 <_dtoa_r+0xa58>
 800e2f8:	f107 0308 	add.w	r3, r7, #8
 800e2fc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800e2fe:	6013      	str	r3, [r2, #0]
 800e300:	4638      	mov	r0, r7
 800e302:	b011      	add	sp, #68	@ 0x44
 800e304:	ecbd 8b02 	vpop	{d8}
 800e308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e30c:	9b07      	ldr	r3, [sp, #28]
 800e30e:	2b01      	cmp	r3, #1
 800e310:	f77f ae36 	ble.w	800df80 <_dtoa_r+0x6d8>
 800e314:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e316:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e318:	2001      	movs	r0, #1
 800e31a:	e656      	b.n	800dfca <_dtoa_r+0x722>
 800e31c:	f1bb 0f00 	cmp.w	fp, #0
 800e320:	f77f aed7 	ble.w	800e0d2 <_dtoa_r+0x82a>
 800e324:	463e      	mov	r6, r7
 800e326:	9801      	ldr	r0, [sp, #4]
 800e328:	4621      	mov	r1, r4
 800e32a:	f7ff fa35 	bl	800d798 <quorem>
 800e32e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800e332:	f806 ab01 	strb.w	sl, [r6], #1
 800e336:	1bf2      	subs	r2, r6, r7
 800e338:	4593      	cmp	fp, r2
 800e33a:	ddb4      	ble.n	800e2a6 <_dtoa_r+0x9fe>
 800e33c:	9901      	ldr	r1, [sp, #4]
 800e33e:	2300      	movs	r3, #0
 800e340:	220a      	movs	r2, #10
 800e342:	4648      	mov	r0, r9
 800e344:	f000 f968 	bl	800e618 <__multadd>
 800e348:	9001      	str	r0, [sp, #4]
 800e34a:	e7ec      	b.n	800e326 <_dtoa_r+0xa7e>
 800e34c:	08011534 	.word	0x08011534
 800e350:	080114cf 	.word	0x080114cf

0800e354 <_free_r>:
 800e354:	b538      	push	{r3, r4, r5, lr}
 800e356:	4605      	mov	r5, r0
 800e358:	2900      	cmp	r1, #0
 800e35a:	d041      	beq.n	800e3e0 <_free_r+0x8c>
 800e35c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e360:	1f0c      	subs	r4, r1, #4
 800e362:	2b00      	cmp	r3, #0
 800e364:	bfb8      	it	lt
 800e366:	18e4      	addlt	r4, r4, r3
 800e368:	f000 f8e8 	bl	800e53c <__malloc_lock>
 800e36c:	4a1d      	ldr	r2, [pc, #116]	@ (800e3e4 <_free_r+0x90>)
 800e36e:	6813      	ldr	r3, [r2, #0]
 800e370:	b933      	cbnz	r3, 800e380 <_free_r+0x2c>
 800e372:	6063      	str	r3, [r4, #4]
 800e374:	6014      	str	r4, [r2, #0]
 800e376:	4628      	mov	r0, r5
 800e378:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e37c:	f000 b8e4 	b.w	800e548 <__malloc_unlock>
 800e380:	42a3      	cmp	r3, r4
 800e382:	d908      	bls.n	800e396 <_free_r+0x42>
 800e384:	6820      	ldr	r0, [r4, #0]
 800e386:	1821      	adds	r1, r4, r0
 800e388:	428b      	cmp	r3, r1
 800e38a:	bf01      	itttt	eq
 800e38c:	6819      	ldreq	r1, [r3, #0]
 800e38e:	685b      	ldreq	r3, [r3, #4]
 800e390:	1809      	addeq	r1, r1, r0
 800e392:	6021      	streq	r1, [r4, #0]
 800e394:	e7ed      	b.n	800e372 <_free_r+0x1e>
 800e396:	461a      	mov	r2, r3
 800e398:	685b      	ldr	r3, [r3, #4]
 800e39a:	b10b      	cbz	r3, 800e3a0 <_free_r+0x4c>
 800e39c:	42a3      	cmp	r3, r4
 800e39e:	d9fa      	bls.n	800e396 <_free_r+0x42>
 800e3a0:	6811      	ldr	r1, [r2, #0]
 800e3a2:	1850      	adds	r0, r2, r1
 800e3a4:	42a0      	cmp	r0, r4
 800e3a6:	d10b      	bne.n	800e3c0 <_free_r+0x6c>
 800e3a8:	6820      	ldr	r0, [r4, #0]
 800e3aa:	4401      	add	r1, r0
 800e3ac:	1850      	adds	r0, r2, r1
 800e3ae:	4283      	cmp	r3, r0
 800e3b0:	6011      	str	r1, [r2, #0]
 800e3b2:	d1e0      	bne.n	800e376 <_free_r+0x22>
 800e3b4:	6818      	ldr	r0, [r3, #0]
 800e3b6:	685b      	ldr	r3, [r3, #4]
 800e3b8:	6053      	str	r3, [r2, #4]
 800e3ba:	4408      	add	r0, r1
 800e3bc:	6010      	str	r0, [r2, #0]
 800e3be:	e7da      	b.n	800e376 <_free_r+0x22>
 800e3c0:	d902      	bls.n	800e3c8 <_free_r+0x74>
 800e3c2:	230c      	movs	r3, #12
 800e3c4:	602b      	str	r3, [r5, #0]
 800e3c6:	e7d6      	b.n	800e376 <_free_r+0x22>
 800e3c8:	6820      	ldr	r0, [r4, #0]
 800e3ca:	1821      	adds	r1, r4, r0
 800e3cc:	428b      	cmp	r3, r1
 800e3ce:	bf04      	itt	eq
 800e3d0:	6819      	ldreq	r1, [r3, #0]
 800e3d2:	685b      	ldreq	r3, [r3, #4]
 800e3d4:	6063      	str	r3, [r4, #4]
 800e3d6:	bf04      	itt	eq
 800e3d8:	1809      	addeq	r1, r1, r0
 800e3da:	6021      	streq	r1, [r4, #0]
 800e3dc:	6054      	str	r4, [r2, #4]
 800e3de:	e7ca      	b.n	800e376 <_free_r+0x22>
 800e3e0:	bd38      	pop	{r3, r4, r5, pc}
 800e3e2:	bf00      	nop
 800e3e4:	20004bc4 	.word	0x20004bc4

0800e3e8 <malloc>:
 800e3e8:	4b02      	ldr	r3, [pc, #8]	@ (800e3f4 <malloc+0xc>)
 800e3ea:	4601      	mov	r1, r0
 800e3ec:	6818      	ldr	r0, [r3, #0]
 800e3ee:	f000 b825 	b.w	800e43c <_malloc_r>
 800e3f2:	bf00      	nop
 800e3f4:	2000025c 	.word	0x2000025c

0800e3f8 <sbrk_aligned>:
 800e3f8:	b570      	push	{r4, r5, r6, lr}
 800e3fa:	4e0f      	ldr	r6, [pc, #60]	@ (800e438 <sbrk_aligned+0x40>)
 800e3fc:	460c      	mov	r4, r1
 800e3fe:	6831      	ldr	r1, [r6, #0]
 800e400:	4605      	mov	r5, r0
 800e402:	b911      	cbnz	r1, 800e40a <sbrk_aligned+0x12>
 800e404:	f001 ff02 	bl	801020c <_sbrk_r>
 800e408:	6030      	str	r0, [r6, #0]
 800e40a:	4621      	mov	r1, r4
 800e40c:	4628      	mov	r0, r5
 800e40e:	f001 fefd 	bl	801020c <_sbrk_r>
 800e412:	1c43      	adds	r3, r0, #1
 800e414:	d103      	bne.n	800e41e <sbrk_aligned+0x26>
 800e416:	f04f 34ff 	mov.w	r4, #4294967295
 800e41a:	4620      	mov	r0, r4
 800e41c:	bd70      	pop	{r4, r5, r6, pc}
 800e41e:	1cc4      	adds	r4, r0, #3
 800e420:	f024 0403 	bic.w	r4, r4, #3
 800e424:	42a0      	cmp	r0, r4
 800e426:	d0f8      	beq.n	800e41a <sbrk_aligned+0x22>
 800e428:	1a21      	subs	r1, r4, r0
 800e42a:	4628      	mov	r0, r5
 800e42c:	f001 feee 	bl	801020c <_sbrk_r>
 800e430:	3001      	adds	r0, #1
 800e432:	d1f2      	bne.n	800e41a <sbrk_aligned+0x22>
 800e434:	e7ef      	b.n	800e416 <sbrk_aligned+0x1e>
 800e436:	bf00      	nop
 800e438:	20004bc0 	.word	0x20004bc0

0800e43c <_malloc_r>:
 800e43c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e440:	1ccd      	adds	r5, r1, #3
 800e442:	f025 0503 	bic.w	r5, r5, #3
 800e446:	3508      	adds	r5, #8
 800e448:	2d0c      	cmp	r5, #12
 800e44a:	bf38      	it	cc
 800e44c:	250c      	movcc	r5, #12
 800e44e:	2d00      	cmp	r5, #0
 800e450:	4606      	mov	r6, r0
 800e452:	db01      	blt.n	800e458 <_malloc_r+0x1c>
 800e454:	42a9      	cmp	r1, r5
 800e456:	d904      	bls.n	800e462 <_malloc_r+0x26>
 800e458:	230c      	movs	r3, #12
 800e45a:	6033      	str	r3, [r6, #0]
 800e45c:	2000      	movs	r0, #0
 800e45e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e462:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e538 <_malloc_r+0xfc>
 800e466:	f000 f869 	bl	800e53c <__malloc_lock>
 800e46a:	f8d8 3000 	ldr.w	r3, [r8]
 800e46e:	461c      	mov	r4, r3
 800e470:	bb44      	cbnz	r4, 800e4c4 <_malloc_r+0x88>
 800e472:	4629      	mov	r1, r5
 800e474:	4630      	mov	r0, r6
 800e476:	f7ff ffbf 	bl	800e3f8 <sbrk_aligned>
 800e47a:	1c43      	adds	r3, r0, #1
 800e47c:	4604      	mov	r4, r0
 800e47e:	d158      	bne.n	800e532 <_malloc_r+0xf6>
 800e480:	f8d8 4000 	ldr.w	r4, [r8]
 800e484:	4627      	mov	r7, r4
 800e486:	2f00      	cmp	r7, #0
 800e488:	d143      	bne.n	800e512 <_malloc_r+0xd6>
 800e48a:	2c00      	cmp	r4, #0
 800e48c:	d04b      	beq.n	800e526 <_malloc_r+0xea>
 800e48e:	6823      	ldr	r3, [r4, #0]
 800e490:	4639      	mov	r1, r7
 800e492:	4630      	mov	r0, r6
 800e494:	eb04 0903 	add.w	r9, r4, r3
 800e498:	f001 feb8 	bl	801020c <_sbrk_r>
 800e49c:	4581      	cmp	r9, r0
 800e49e:	d142      	bne.n	800e526 <_malloc_r+0xea>
 800e4a0:	6821      	ldr	r1, [r4, #0]
 800e4a2:	1a6d      	subs	r5, r5, r1
 800e4a4:	4629      	mov	r1, r5
 800e4a6:	4630      	mov	r0, r6
 800e4a8:	f7ff ffa6 	bl	800e3f8 <sbrk_aligned>
 800e4ac:	3001      	adds	r0, #1
 800e4ae:	d03a      	beq.n	800e526 <_malloc_r+0xea>
 800e4b0:	6823      	ldr	r3, [r4, #0]
 800e4b2:	442b      	add	r3, r5
 800e4b4:	6023      	str	r3, [r4, #0]
 800e4b6:	f8d8 3000 	ldr.w	r3, [r8]
 800e4ba:	685a      	ldr	r2, [r3, #4]
 800e4bc:	bb62      	cbnz	r2, 800e518 <_malloc_r+0xdc>
 800e4be:	f8c8 7000 	str.w	r7, [r8]
 800e4c2:	e00f      	b.n	800e4e4 <_malloc_r+0xa8>
 800e4c4:	6822      	ldr	r2, [r4, #0]
 800e4c6:	1b52      	subs	r2, r2, r5
 800e4c8:	d420      	bmi.n	800e50c <_malloc_r+0xd0>
 800e4ca:	2a0b      	cmp	r2, #11
 800e4cc:	d917      	bls.n	800e4fe <_malloc_r+0xc2>
 800e4ce:	1961      	adds	r1, r4, r5
 800e4d0:	42a3      	cmp	r3, r4
 800e4d2:	6025      	str	r5, [r4, #0]
 800e4d4:	bf18      	it	ne
 800e4d6:	6059      	strne	r1, [r3, #4]
 800e4d8:	6863      	ldr	r3, [r4, #4]
 800e4da:	bf08      	it	eq
 800e4dc:	f8c8 1000 	streq.w	r1, [r8]
 800e4e0:	5162      	str	r2, [r4, r5]
 800e4e2:	604b      	str	r3, [r1, #4]
 800e4e4:	4630      	mov	r0, r6
 800e4e6:	f000 f82f 	bl	800e548 <__malloc_unlock>
 800e4ea:	f104 000b 	add.w	r0, r4, #11
 800e4ee:	1d23      	adds	r3, r4, #4
 800e4f0:	f020 0007 	bic.w	r0, r0, #7
 800e4f4:	1ac2      	subs	r2, r0, r3
 800e4f6:	bf1c      	itt	ne
 800e4f8:	1a1b      	subne	r3, r3, r0
 800e4fa:	50a3      	strne	r3, [r4, r2]
 800e4fc:	e7af      	b.n	800e45e <_malloc_r+0x22>
 800e4fe:	6862      	ldr	r2, [r4, #4]
 800e500:	42a3      	cmp	r3, r4
 800e502:	bf0c      	ite	eq
 800e504:	f8c8 2000 	streq.w	r2, [r8]
 800e508:	605a      	strne	r2, [r3, #4]
 800e50a:	e7eb      	b.n	800e4e4 <_malloc_r+0xa8>
 800e50c:	4623      	mov	r3, r4
 800e50e:	6864      	ldr	r4, [r4, #4]
 800e510:	e7ae      	b.n	800e470 <_malloc_r+0x34>
 800e512:	463c      	mov	r4, r7
 800e514:	687f      	ldr	r7, [r7, #4]
 800e516:	e7b6      	b.n	800e486 <_malloc_r+0x4a>
 800e518:	461a      	mov	r2, r3
 800e51a:	685b      	ldr	r3, [r3, #4]
 800e51c:	42a3      	cmp	r3, r4
 800e51e:	d1fb      	bne.n	800e518 <_malloc_r+0xdc>
 800e520:	2300      	movs	r3, #0
 800e522:	6053      	str	r3, [r2, #4]
 800e524:	e7de      	b.n	800e4e4 <_malloc_r+0xa8>
 800e526:	230c      	movs	r3, #12
 800e528:	6033      	str	r3, [r6, #0]
 800e52a:	4630      	mov	r0, r6
 800e52c:	f000 f80c 	bl	800e548 <__malloc_unlock>
 800e530:	e794      	b.n	800e45c <_malloc_r+0x20>
 800e532:	6005      	str	r5, [r0, #0]
 800e534:	e7d6      	b.n	800e4e4 <_malloc_r+0xa8>
 800e536:	bf00      	nop
 800e538:	20004bc4 	.word	0x20004bc4

0800e53c <__malloc_lock>:
 800e53c:	4801      	ldr	r0, [pc, #4]	@ (800e544 <__malloc_lock+0x8>)
 800e53e:	f7ff b8f6 	b.w	800d72e <__retarget_lock_acquire_recursive>
 800e542:	bf00      	nop
 800e544:	20004bbc 	.word	0x20004bbc

0800e548 <__malloc_unlock>:
 800e548:	4801      	ldr	r0, [pc, #4]	@ (800e550 <__malloc_unlock+0x8>)
 800e54a:	f7ff b8f1 	b.w	800d730 <__retarget_lock_release_recursive>
 800e54e:	bf00      	nop
 800e550:	20004bbc 	.word	0x20004bbc

0800e554 <_Balloc>:
 800e554:	b570      	push	{r4, r5, r6, lr}
 800e556:	69c6      	ldr	r6, [r0, #28]
 800e558:	4604      	mov	r4, r0
 800e55a:	460d      	mov	r5, r1
 800e55c:	b976      	cbnz	r6, 800e57c <_Balloc+0x28>
 800e55e:	2010      	movs	r0, #16
 800e560:	f7ff ff42 	bl	800e3e8 <malloc>
 800e564:	4602      	mov	r2, r0
 800e566:	61e0      	str	r0, [r4, #28]
 800e568:	b920      	cbnz	r0, 800e574 <_Balloc+0x20>
 800e56a:	4b18      	ldr	r3, [pc, #96]	@ (800e5cc <_Balloc+0x78>)
 800e56c:	4818      	ldr	r0, [pc, #96]	@ (800e5d0 <_Balloc+0x7c>)
 800e56e:	216b      	movs	r1, #107	@ 0x6b
 800e570:	f7ff f8f4 	bl	800d75c <__assert_func>
 800e574:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e578:	6006      	str	r6, [r0, #0]
 800e57a:	60c6      	str	r6, [r0, #12]
 800e57c:	69e6      	ldr	r6, [r4, #28]
 800e57e:	68f3      	ldr	r3, [r6, #12]
 800e580:	b183      	cbz	r3, 800e5a4 <_Balloc+0x50>
 800e582:	69e3      	ldr	r3, [r4, #28]
 800e584:	68db      	ldr	r3, [r3, #12]
 800e586:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e58a:	b9b8      	cbnz	r0, 800e5bc <_Balloc+0x68>
 800e58c:	2101      	movs	r1, #1
 800e58e:	fa01 f605 	lsl.w	r6, r1, r5
 800e592:	1d72      	adds	r2, r6, #5
 800e594:	0092      	lsls	r2, r2, #2
 800e596:	4620      	mov	r0, r4
 800e598:	f001 fe59 	bl	801024e <_calloc_r>
 800e59c:	b160      	cbz	r0, 800e5b8 <_Balloc+0x64>
 800e59e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e5a2:	e00e      	b.n	800e5c2 <_Balloc+0x6e>
 800e5a4:	2221      	movs	r2, #33	@ 0x21
 800e5a6:	2104      	movs	r1, #4
 800e5a8:	4620      	mov	r0, r4
 800e5aa:	f001 fe50 	bl	801024e <_calloc_r>
 800e5ae:	69e3      	ldr	r3, [r4, #28]
 800e5b0:	60f0      	str	r0, [r6, #12]
 800e5b2:	68db      	ldr	r3, [r3, #12]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d1e4      	bne.n	800e582 <_Balloc+0x2e>
 800e5b8:	2000      	movs	r0, #0
 800e5ba:	bd70      	pop	{r4, r5, r6, pc}
 800e5bc:	6802      	ldr	r2, [r0, #0]
 800e5be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e5c8:	e7f7      	b.n	800e5ba <_Balloc+0x66>
 800e5ca:	bf00      	nop
 800e5cc:	08011422 	.word	0x08011422
 800e5d0:	08011545 	.word	0x08011545

0800e5d4 <_Bfree>:
 800e5d4:	b570      	push	{r4, r5, r6, lr}
 800e5d6:	69c6      	ldr	r6, [r0, #28]
 800e5d8:	4605      	mov	r5, r0
 800e5da:	460c      	mov	r4, r1
 800e5dc:	b976      	cbnz	r6, 800e5fc <_Bfree+0x28>
 800e5de:	2010      	movs	r0, #16
 800e5e0:	f7ff ff02 	bl	800e3e8 <malloc>
 800e5e4:	4602      	mov	r2, r0
 800e5e6:	61e8      	str	r0, [r5, #28]
 800e5e8:	b920      	cbnz	r0, 800e5f4 <_Bfree+0x20>
 800e5ea:	4b09      	ldr	r3, [pc, #36]	@ (800e610 <_Bfree+0x3c>)
 800e5ec:	4809      	ldr	r0, [pc, #36]	@ (800e614 <_Bfree+0x40>)
 800e5ee:	218f      	movs	r1, #143	@ 0x8f
 800e5f0:	f7ff f8b4 	bl	800d75c <__assert_func>
 800e5f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e5f8:	6006      	str	r6, [r0, #0]
 800e5fa:	60c6      	str	r6, [r0, #12]
 800e5fc:	b13c      	cbz	r4, 800e60e <_Bfree+0x3a>
 800e5fe:	69eb      	ldr	r3, [r5, #28]
 800e600:	6862      	ldr	r2, [r4, #4]
 800e602:	68db      	ldr	r3, [r3, #12]
 800e604:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e608:	6021      	str	r1, [r4, #0]
 800e60a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e60e:	bd70      	pop	{r4, r5, r6, pc}
 800e610:	08011422 	.word	0x08011422
 800e614:	08011545 	.word	0x08011545

0800e618 <__multadd>:
 800e618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e61c:	690d      	ldr	r5, [r1, #16]
 800e61e:	4607      	mov	r7, r0
 800e620:	460c      	mov	r4, r1
 800e622:	461e      	mov	r6, r3
 800e624:	f101 0c14 	add.w	ip, r1, #20
 800e628:	2000      	movs	r0, #0
 800e62a:	f8dc 3000 	ldr.w	r3, [ip]
 800e62e:	b299      	uxth	r1, r3
 800e630:	fb02 6101 	mla	r1, r2, r1, r6
 800e634:	0c1e      	lsrs	r6, r3, #16
 800e636:	0c0b      	lsrs	r3, r1, #16
 800e638:	fb02 3306 	mla	r3, r2, r6, r3
 800e63c:	b289      	uxth	r1, r1
 800e63e:	3001      	adds	r0, #1
 800e640:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e644:	4285      	cmp	r5, r0
 800e646:	f84c 1b04 	str.w	r1, [ip], #4
 800e64a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e64e:	dcec      	bgt.n	800e62a <__multadd+0x12>
 800e650:	b30e      	cbz	r6, 800e696 <__multadd+0x7e>
 800e652:	68a3      	ldr	r3, [r4, #8]
 800e654:	42ab      	cmp	r3, r5
 800e656:	dc19      	bgt.n	800e68c <__multadd+0x74>
 800e658:	6861      	ldr	r1, [r4, #4]
 800e65a:	4638      	mov	r0, r7
 800e65c:	3101      	adds	r1, #1
 800e65e:	f7ff ff79 	bl	800e554 <_Balloc>
 800e662:	4680      	mov	r8, r0
 800e664:	b928      	cbnz	r0, 800e672 <__multadd+0x5a>
 800e666:	4602      	mov	r2, r0
 800e668:	4b0c      	ldr	r3, [pc, #48]	@ (800e69c <__multadd+0x84>)
 800e66a:	480d      	ldr	r0, [pc, #52]	@ (800e6a0 <__multadd+0x88>)
 800e66c:	21ba      	movs	r1, #186	@ 0xba
 800e66e:	f7ff f875 	bl	800d75c <__assert_func>
 800e672:	6922      	ldr	r2, [r4, #16]
 800e674:	3202      	adds	r2, #2
 800e676:	f104 010c 	add.w	r1, r4, #12
 800e67a:	0092      	lsls	r2, r2, #2
 800e67c:	300c      	adds	r0, #12
 800e67e:	f7ff f858 	bl	800d732 <memcpy>
 800e682:	4621      	mov	r1, r4
 800e684:	4638      	mov	r0, r7
 800e686:	f7ff ffa5 	bl	800e5d4 <_Bfree>
 800e68a:	4644      	mov	r4, r8
 800e68c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e690:	3501      	adds	r5, #1
 800e692:	615e      	str	r6, [r3, #20]
 800e694:	6125      	str	r5, [r4, #16]
 800e696:	4620      	mov	r0, r4
 800e698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e69c:	08011534 	.word	0x08011534
 800e6a0:	08011545 	.word	0x08011545

0800e6a4 <__s2b>:
 800e6a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6a8:	460c      	mov	r4, r1
 800e6aa:	4615      	mov	r5, r2
 800e6ac:	461f      	mov	r7, r3
 800e6ae:	2209      	movs	r2, #9
 800e6b0:	3308      	adds	r3, #8
 800e6b2:	4606      	mov	r6, r0
 800e6b4:	fb93 f3f2 	sdiv	r3, r3, r2
 800e6b8:	2100      	movs	r1, #0
 800e6ba:	2201      	movs	r2, #1
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	db09      	blt.n	800e6d4 <__s2b+0x30>
 800e6c0:	4630      	mov	r0, r6
 800e6c2:	f7ff ff47 	bl	800e554 <_Balloc>
 800e6c6:	b940      	cbnz	r0, 800e6da <__s2b+0x36>
 800e6c8:	4602      	mov	r2, r0
 800e6ca:	4b19      	ldr	r3, [pc, #100]	@ (800e730 <__s2b+0x8c>)
 800e6cc:	4819      	ldr	r0, [pc, #100]	@ (800e734 <__s2b+0x90>)
 800e6ce:	21d3      	movs	r1, #211	@ 0xd3
 800e6d0:	f7ff f844 	bl	800d75c <__assert_func>
 800e6d4:	0052      	lsls	r2, r2, #1
 800e6d6:	3101      	adds	r1, #1
 800e6d8:	e7f0      	b.n	800e6bc <__s2b+0x18>
 800e6da:	9b08      	ldr	r3, [sp, #32]
 800e6dc:	6143      	str	r3, [r0, #20]
 800e6de:	2d09      	cmp	r5, #9
 800e6e0:	f04f 0301 	mov.w	r3, #1
 800e6e4:	6103      	str	r3, [r0, #16]
 800e6e6:	dd16      	ble.n	800e716 <__s2b+0x72>
 800e6e8:	f104 0909 	add.w	r9, r4, #9
 800e6ec:	46c8      	mov	r8, r9
 800e6ee:	442c      	add	r4, r5
 800e6f0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e6f4:	4601      	mov	r1, r0
 800e6f6:	3b30      	subs	r3, #48	@ 0x30
 800e6f8:	220a      	movs	r2, #10
 800e6fa:	4630      	mov	r0, r6
 800e6fc:	f7ff ff8c 	bl	800e618 <__multadd>
 800e700:	45a0      	cmp	r8, r4
 800e702:	d1f5      	bne.n	800e6f0 <__s2b+0x4c>
 800e704:	f1a5 0408 	sub.w	r4, r5, #8
 800e708:	444c      	add	r4, r9
 800e70a:	1b2d      	subs	r5, r5, r4
 800e70c:	1963      	adds	r3, r4, r5
 800e70e:	42bb      	cmp	r3, r7
 800e710:	db04      	blt.n	800e71c <__s2b+0x78>
 800e712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e716:	340a      	adds	r4, #10
 800e718:	2509      	movs	r5, #9
 800e71a:	e7f6      	b.n	800e70a <__s2b+0x66>
 800e71c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e720:	4601      	mov	r1, r0
 800e722:	3b30      	subs	r3, #48	@ 0x30
 800e724:	220a      	movs	r2, #10
 800e726:	4630      	mov	r0, r6
 800e728:	f7ff ff76 	bl	800e618 <__multadd>
 800e72c:	e7ee      	b.n	800e70c <__s2b+0x68>
 800e72e:	bf00      	nop
 800e730:	08011534 	.word	0x08011534
 800e734:	08011545 	.word	0x08011545

0800e738 <__hi0bits>:
 800e738:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e73c:	4603      	mov	r3, r0
 800e73e:	bf36      	itet	cc
 800e740:	0403      	lslcc	r3, r0, #16
 800e742:	2000      	movcs	r0, #0
 800e744:	2010      	movcc	r0, #16
 800e746:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e74a:	bf3c      	itt	cc
 800e74c:	021b      	lslcc	r3, r3, #8
 800e74e:	3008      	addcc	r0, #8
 800e750:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e754:	bf3c      	itt	cc
 800e756:	011b      	lslcc	r3, r3, #4
 800e758:	3004      	addcc	r0, #4
 800e75a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e75e:	bf3c      	itt	cc
 800e760:	009b      	lslcc	r3, r3, #2
 800e762:	3002      	addcc	r0, #2
 800e764:	2b00      	cmp	r3, #0
 800e766:	db05      	blt.n	800e774 <__hi0bits+0x3c>
 800e768:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e76c:	f100 0001 	add.w	r0, r0, #1
 800e770:	bf08      	it	eq
 800e772:	2020      	moveq	r0, #32
 800e774:	4770      	bx	lr

0800e776 <__lo0bits>:
 800e776:	6803      	ldr	r3, [r0, #0]
 800e778:	4602      	mov	r2, r0
 800e77a:	f013 0007 	ands.w	r0, r3, #7
 800e77e:	d00b      	beq.n	800e798 <__lo0bits+0x22>
 800e780:	07d9      	lsls	r1, r3, #31
 800e782:	d421      	bmi.n	800e7c8 <__lo0bits+0x52>
 800e784:	0798      	lsls	r0, r3, #30
 800e786:	bf49      	itett	mi
 800e788:	085b      	lsrmi	r3, r3, #1
 800e78a:	089b      	lsrpl	r3, r3, #2
 800e78c:	2001      	movmi	r0, #1
 800e78e:	6013      	strmi	r3, [r2, #0]
 800e790:	bf5c      	itt	pl
 800e792:	6013      	strpl	r3, [r2, #0]
 800e794:	2002      	movpl	r0, #2
 800e796:	4770      	bx	lr
 800e798:	b299      	uxth	r1, r3
 800e79a:	b909      	cbnz	r1, 800e7a0 <__lo0bits+0x2a>
 800e79c:	0c1b      	lsrs	r3, r3, #16
 800e79e:	2010      	movs	r0, #16
 800e7a0:	b2d9      	uxtb	r1, r3
 800e7a2:	b909      	cbnz	r1, 800e7a8 <__lo0bits+0x32>
 800e7a4:	3008      	adds	r0, #8
 800e7a6:	0a1b      	lsrs	r3, r3, #8
 800e7a8:	0719      	lsls	r1, r3, #28
 800e7aa:	bf04      	itt	eq
 800e7ac:	091b      	lsreq	r3, r3, #4
 800e7ae:	3004      	addeq	r0, #4
 800e7b0:	0799      	lsls	r1, r3, #30
 800e7b2:	bf04      	itt	eq
 800e7b4:	089b      	lsreq	r3, r3, #2
 800e7b6:	3002      	addeq	r0, #2
 800e7b8:	07d9      	lsls	r1, r3, #31
 800e7ba:	d403      	bmi.n	800e7c4 <__lo0bits+0x4e>
 800e7bc:	085b      	lsrs	r3, r3, #1
 800e7be:	f100 0001 	add.w	r0, r0, #1
 800e7c2:	d003      	beq.n	800e7cc <__lo0bits+0x56>
 800e7c4:	6013      	str	r3, [r2, #0]
 800e7c6:	4770      	bx	lr
 800e7c8:	2000      	movs	r0, #0
 800e7ca:	4770      	bx	lr
 800e7cc:	2020      	movs	r0, #32
 800e7ce:	4770      	bx	lr

0800e7d0 <__i2b>:
 800e7d0:	b510      	push	{r4, lr}
 800e7d2:	460c      	mov	r4, r1
 800e7d4:	2101      	movs	r1, #1
 800e7d6:	f7ff febd 	bl	800e554 <_Balloc>
 800e7da:	4602      	mov	r2, r0
 800e7dc:	b928      	cbnz	r0, 800e7ea <__i2b+0x1a>
 800e7de:	4b05      	ldr	r3, [pc, #20]	@ (800e7f4 <__i2b+0x24>)
 800e7e0:	4805      	ldr	r0, [pc, #20]	@ (800e7f8 <__i2b+0x28>)
 800e7e2:	f240 1145 	movw	r1, #325	@ 0x145
 800e7e6:	f7fe ffb9 	bl	800d75c <__assert_func>
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	6144      	str	r4, [r0, #20]
 800e7ee:	6103      	str	r3, [r0, #16]
 800e7f0:	bd10      	pop	{r4, pc}
 800e7f2:	bf00      	nop
 800e7f4:	08011534 	.word	0x08011534
 800e7f8:	08011545 	.word	0x08011545

0800e7fc <__multiply>:
 800e7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e800:	4614      	mov	r4, r2
 800e802:	690a      	ldr	r2, [r1, #16]
 800e804:	6923      	ldr	r3, [r4, #16]
 800e806:	429a      	cmp	r2, r3
 800e808:	bfa8      	it	ge
 800e80a:	4623      	movge	r3, r4
 800e80c:	460f      	mov	r7, r1
 800e80e:	bfa4      	itt	ge
 800e810:	460c      	movge	r4, r1
 800e812:	461f      	movge	r7, r3
 800e814:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e818:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e81c:	68a3      	ldr	r3, [r4, #8]
 800e81e:	6861      	ldr	r1, [r4, #4]
 800e820:	eb0a 0609 	add.w	r6, sl, r9
 800e824:	42b3      	cmp	r3, r6
 800e826:	b085      	sub	sp, #20
 800e828:	bfb8      	it	lt
 800e82a:	3101      	addlt	r1, #1
 800e82c:	f7ff fe92 	bl	800e554 <_Balloc>
 800e830:	b930      	cbnz	r0, 800e840 <__multiply+0x44>
 800e832:	4602      	mov	r2, r0
 800e834:	4b44      	ldr	r3, [pc, #272]	@ (800e948 <__multiply+0x14c>)
 800e836:	4845      	ldr	r0, [pc, #276]	@ (800e94c <__multiply+0x150>)
 800e838:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e83c:	f7fe ff8e 	bl	800d75c <__assert_func>
 800e840:	f100 0514 	add.w	r5, r0, #20
 800e844:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e848:	462b      	mov	r3, r5
 800e84a:	2200      	movs	r2, #0
 800e84c:	4543      	cmp	r3, r8
 800e84e:	d321      	bcc.n	800e894 <__multiply+0x98>
 800e850:	f107 0114 	add.w	r1, r7, #20
 800e854:	f104 0214 	add.w	r2, r4, #20
 800e858:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e85c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e860:	9302      	str	r3, [sp, #8]
 800e862:	1b13      	subs	r3, r2, r4
 800e864:	3b15      	subs	r3, #21
 800e866:	f023 0303 	bic.w	r3, r3, #3
 800e86a:	3304      	adds	r3, #4
 800e86c:	f104 0715 	add.w	r7, r4, #21
 800e870:	42ba      	cmp	r2, r7
 800e872:	bf38      	it	cc
 800e874:	2304      	movcc	r3, #4
 800e876:	9301      	str	r3, [sp, #4]
 800e878:	9b02      	ldr	r3, [sp, #8]
 800e87a:	9103      	str	r1, [sp, #12]
 800e87c:	428b      	cmp	r3, r1
 800e87e:	d80c      	bhi.n	800e89a <__multiply+0x9e>
 800e880:	2e00      	cmp	r6, #0
 800e882:	dd03      	ble.n	800e88c <__multiply+0x90>
 800e884:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d05b      	beq.n	800e944 <__multiply+0x148>
 800e88c:	6106      	str	r6, [r0, #16]
 800e88e:	b005      	add	sp, #20
 800e890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e894:	f843 2b04 	str.w	r2, [r3], #4
 800e898:	e7d8      	b.n	800e84c <__multiply+0x50>
 800e89a:	f8b1 a000 	ldrh.w	sl, [r1]
 800e89e:	f1ba 0f00 	cmp.w	sl, #0
 800e8a2:	d024      	beq.n	800e8ee <__multiply+0xf2>
 800e8a4:	f104 0e14 	add.w	lr, r4, #20
 800e8a8:	46a9      	mov	r9, r5
 800e8aa:	f04f 0c00 	mov.w	ip, #0
 800e8ae:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e8b2:	f8d9 3000 	ldr.w	r3, [r9]
 800e8b6:	fa1f fb87 	uxth.w	fp, r7
 800e8ba:	b29b      	uxth	r3, r3
 800e8bc:	fb0a 330b 	mla	r3, sl, fp, r3
 800e8c0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e8c4:	f8d9 7000 	ldr.w	r7, [r9]
 800e8c8:	4463      	add	r3, ip
 800e8ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e8ce:	fb0a c70b 	mla	r7, sl, fp, ip
 800e8d2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e8d6:	b29b      	uxth	r3, r3
 800e8d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e8dc:	4572      	cmp	r2, lr
 800e8de:	f849 3b04 	str.w	r3, [r9], #4
 800e8e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e8e6:	d8e2      	bhi.n	800e8ae <__multiply+0xb2>
 800e8e8:	9b01      	ldr	r3, [sp, #4]
 800e8ea:	f845 c003 	str.w	ip, [r5, r3]
 800e8ee:	9b03      	ldr	r3, [sp, #12]
 800e8f0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e8f4:	3104      	adds	r1, #4
 800e8f6:	f1b9 0f00 	cmp.w	r9, #0
 800e8fa:	d021      	beq.n	800e940 <__multiply+0x144>
 800e8fc:	682b      	ldr	r3, [r5, #0]
 800e8fe:	f104 0c14 	add.w	ip, r4, #20
 800e902:	46ae      	mov	lr, r5
 800e904:	f04f 0a00 	mov.w	sl, #0
 800e908:	f8bc b000 	ldrh.w	fp, [ip]
 800e90c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e910:	fb09 770b 	mla	r7, r9, fp, r7
 800e914:	4457      	add	r7, sl
 800e916:	b29b      	uxth	r3, r3
 800e918:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e91c:	f84e 3b04 	str.w	r3, [lr], #4
 800e920:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e924:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e928:	f8be 3000 	ldrh.w	r3, [lr]
 800e92c:	fb09 330a 	mla	r3, r9, sl, r3
 800e930:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e934:	4562      	cmp	r2, ip
 800e936:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e93a:	d8e5      	bhi.n	800e908 <__multiply+0x10c>
 800e93c:	9f01      	ldr	r7, [sp, #4]
 800e93e:	51eb      	str	r3, [r5, r7]
 800e940:	3504      	adds	r5, #4
 800e942:	e799      	b.n	800e878 <__multiply+0x7c>
 800e944:	3e01      	subs	r6, #1
 800e946:	e79b      	b.n	800e880 <__multiply+0x84>
 800e948:	08011534 	.word	0x08011534
 800e94c:	08011545 	.word	0x08011545

0800e950 <__pow5mult>:
 800e950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e954:	4615      	mov	r5, r2
 800e956:	f012 0203 	ands.w	r2, r2, #3
 800e95a:	4607      	mov	r7, r0
 800e95c:	460e      	mov	r6, r1
 800e95e:	d007      	beq.n	800e970 <__pow5mult+0x20>
 800e960:	4c25      	ldr	r4, [pc, #148]	@ (800e9f8 <__pow5mult+0xa8>)
 800e962:	3a01      	subs	r2, #1
 800e964:	2300      	movs	r3, #0
 800e966:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e96a:	f7ff fe55 	bl	800e618 <__multadd>
 800e96e:	4606      	mov	r6, r0
 800e970:	10ad      	asrs	r5, r5, #2
 800e972:	d03d      	beq.n	800e9f0 <__pow5mult+0xa0>
 800e974:	69fc      	ldr	r4, [r7, #28]
 800e976:	b97c      	cbnz	r4, 800e998 <__pow5mult+0x48>
 800e978:	2010      	movs	r0, #16
 800e97a:	f7ff fd35 	bl	800e3e8 <malloc>
 800e97e:	4602      	mov	r2, r0
 800e980:	61f8      	str	r0, [r7, #28]
 800e982:	b928      	cbnz	r0, 800e990 <__pow5mult+0x40>
 800e984:	4b1d      	ldr	r3, [pc, #116]	@ (800e9fc <__pow5mult+0xac>)
 800e986:	481e      	ldr	r0, [pc, #120]	@ (800ea00 <__pow5mult+0xb0>)
 800e988:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e98c:	f7fe fee6 	bl	800d75c <__assert_func>
 800e990:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e994:	6004      	str	r4, [r0, #0]
 800e996:	60c4      	str	r4, [r0, #12]
 800e998:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e99c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e9a0:	b94c      	cbnz	r4, 800e9b6 <__pow5mult+0x66>
 800e9a2:	f240 2171 	movw	r1, #625	@ 0x271
 800e9a6:	4638      	mov	r0, r7
 800e9a8:	f7ff ff12 	bl	800e7d0 <__i2b>
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800e9b2:	4604      	mov	r4, r0
 800e9b4:	6003      	str	r3, [r0, #0]
 800e9b6:	f04f 0900 	mov.w	r9, #0
 800e9ba:	07eb      	lsls	r3, r5, #31
 800e9bc:	d50a      	bpl.n	800e9d4 <__pow5mult+0x84>
 800e9be:	4631      	mov	r1, r6
 800e9c0:	4622      	mov	r2, r4
 800e9c2:	4638      	mov	r0, r7
 800e9c4:	f7ff ff1a 	bl	800e7fc <__multiply>
 800e9c8:	4631      	mov	r1, r6
 800e9ca:	4680      	mov	r8, r0
 800e9cc:	4638      	mov	r0, r7
 800e9ce:	f7ff fe01 	bl	800e5d4 <_Bfree>
 800e9d2:	4646      	mov	r6, r8
 800e9d4:	106d      	asrs	r5, r5, #1
 800e9d6:	d00b      	beq.n	800e9f0 <__pow5mult+0xa0>
 800e9d8:	6820      	ldr	r0, [r4, #0]
 800e9da:	b938      	cbnz	r0, 800e9ec <__pow5mult+0x9c>
 800e9dc:	4622      	mov	r2, r4
 800e9de:	4621      	mov	r1, r4
 800e9e0:	4638      	mov	r0, r7
 800e9e2:	f7ff ff0b 	bl	800e7fc <__multiply>
 800e9e6:	6020      	str	r0, [r4, #0]
 800e9e8:	f8c0 9000 	str.w	r9, [r0]
 800e9ec:	4604      	mov	r4, r0
 800e9ee:	e7e4      	b.n	800e9ba <__pow5mult+0x6a>
 800e9f0:	4630      	mov	r0, r6
 800e9f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9f6:	bf00      	nop
 800e9f8:	080115a0 	.word	0x080115a0
 800e9fc:	08011422 	.word	0x08011422
 800ea00:	08011545 	.word	0x08011545

0800ea04 <__lshift>:
 800ea04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea08:	460c      	mov	r4, r1
 800ea0a:	6849      	ldr	r1, [r1, #4]
 800ea0c:	6923      	ldr	r3, [r4, #16]
 800ea0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ea12:	68a3      	ldr	r3, [r4, #8]
 800ea14:	4607      	mov	r7, r0
 800ea16:	4691      	mov	r9, r2
 800ea18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ea1c:	f108 0601 	add.w	r6, r8, #1
 800ea20:	42b3      	cmp	r3, r6
 800ea22:	db0b      	blt.n	800ea3c <__lshift+0x38>
 800ea24:	4638      	mov	r0, r7
 800ea26:	f7ff fd95 	bl	800e554 <_Balloc>
 800ea2a:	4605      	mov	r5, r0
 800ea2c:	b948      	cbnz	r0, 800ea42 <__lshift+0x3e>
 800ea2e:	4602      	mov	r2, r0
 800ea30:	4b28      	ldr	r3, [pc, #160]	@ (800ead4 <__lshift+0xd0>)
 800ea32:	4829      	ldr	r0, [pc, #164]	@ (800ead8 <__lshift+0xd4>)
 800ea34:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ea38:	f7fe fe90 	bl	800d75c <__assert_func>
 800ea3c:	3101      	adds	r1, #1
 800ea3e:	005b      	lsls	r3, r3, #1
 800ea40:	e7ee      	b.n	800ea20 <__lshift+0x1c>
 800ea42:	2300      	movs	r3, #0
 800ea44:	f100 0114 	add.w	r1, r0, #20
 800ea48:	f100 0210 	add.w	r2, r0, #16
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	4553      	cmp	r3, sl
 800ea50:	db33      	blt.n	800eaba <__lshift+0xb6>
 800ea52:	6920      	ldr	r0, [r4, #16]
 800ea54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ea58:	f104 0314 	add.w	r3, r4, #20
 800ea5c:	f019 091f 	ands.w	r9, r9, #31
 800ea60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ea64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ea68:	d02b      	beq.n	800eac2 <__lshift+0xbe>
 800ea6a:	f1c9 0e20 	rsb	lr, r9, #32
 800ea6e:	468a      	mov	sl, r1
 800ea70:	2200      	movs	r2, #0
 800ea72:	6818      	ldr	r0, [r3, #0]
 800ea74:	fa00 f009 	lsl.w	r0, r0, r9
 800ea78:	4310      	orrs	r0, r2
 800ea7a:	f84a 0b04 	str.w	r0, [sl], #4
 800ea7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea82:	459c      	cmp	ip, r3
 800ea84:	fa22 f20e 	lsr.w	r2, r2, lr
 800ea88:	d8f3      	bhi.n	800ea72 <__lshift+0x6e>
 800ea8a:	ebac 0304 	sub.w	r3, ip, r4
 800ea8e:	3b15      	subs	r3, #21
 800ea90:	f023 0303 	bic.w	r3, r3, #3
 800ea94:	3304      	adds	r3, #4
 800ea96:	f104 0015 	add.w	r0, r4, #21
 800ea9a:	4584      	cmp	ip, r0
 800ea9c:	bf38      	it	cc
 800ea9e:	2304      	movcc	r3, #4
 800eaa0:	50ca      	str	r2, [r1, r3]
 800eaa2:	b10a      	cbz	r2, 800eaa8 <__lshift+0xa4>
 800eaa4:	f108 0602 	add.w	r6, r8, #2
 800eaa8:	3e01      	subs	r6, #1
 800eaaa:	4638      	mov	r0, r7
 800eaac:	612e      	str	r6, [r5, #16]
 800eaae:	4621      	mov	r1, r4
 800eab0:	f7ff fd90 	bl	800e5d4 <_Bfree>
 800eab4:	4628      	mov	r0, r5
 800eab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eaba:	f842 0f04 	str.w	r0, [r2, #4]!
 800eabe:	3301      	adds	r3, #1
 800eac0:	e7c5      	b.n	800ea4e <__lshift+0x4a>
 800eac2:	3904      	subs	r1, #4
 800eac4:	f853 2b04 	ldr.w	r2, [r3], #4
 800eac8:	f841 2f04 	str.w	r2, [r1, #4]!
 800eacc:	459c      	cmp	ip, r3
 800eace:	d8f9      	bhi.n	800eac4 <__lshift+0xc0>
 800ead0:	e7ea      	b.n	800eaa8 <__lshift+0xa4>
 800ead2:	bf00      	nop
 800ead4:	08011534 	.word	0x08011534
 800ead8:	08011545 	.word	0x08011545

0800eadc <__mcmp>:
 800eadc:	690a      	ldr	r2, [r1, #16]
 800eade:	4603      	mov	r3, r0
 800eae0:	6900      	ldr	r0, [r0, #16]
 800eae2:	1a80      	subs	r0, r0, r2
 800eae4:	b530      	push	{r4, r5, lr}
 800eae6:	d10e      	bne.n	800eb06 <__mcmp+0x2a>
 800eae8:	3314      	adds	r3, #20
 800eaea:	3114      	adds	r1, #20
 800eaec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800eaf0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800eaf4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800eaf8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800eafc:	4295      	cmp	r5, r2
 800eafe:	d003      	beq.n	800eb08 <__mcmp+0x2c>
 800eb00:	d205      	bcs.n	800eb0e <__mcmp+0x32>
 800eb02:	f04f 30ff 	mov.w	r0, #4294967295
 800eb06:	bd30      	pop	{r4, r5, pc}
 800eb08:	42a3      	cmp	r3, r4
 800eb0a:	d3f3      	bcc.n	800eaf4 <__mcmp+0x18>
 800eb0c:	e7fb      	b.n	800eb06 <__mcmp+0x2a>
 800eb0e:	2001      	movs	r0, #1
 800eb10:	e7f9      	b.n	800eb06 <__mcmp+0x2a>
	...

0800eb14 <__mdiff>:
 800eb14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb18:	4689      	mov	r9, r1
 800eb1a:	4606      	mov	r6, r0
 800eb1c:	4611      	mov	r1, r2
 800eb1e:	4648      	mov	r0, r9
 800eb20:	4614      	mov	r4, r2
 800eb22:	f7ff ffdb 	bl	800eadc <__mcmp>
 800eb26:	1e05      	subs	r5, r0, #0
 800eb28:	d112      	bne.n	800eb50 <__mdiff+0x3c>
 800eb2a:	4629      	mov	r1, r5
 800eb2c:	4630      	mov	r0, r6
 800eb2e:	f7ff fd11 	bl	800e554 <_Balloc>
 800eb32:	4602      	mov	r2, r0
 800eb34:	b928      	cbnz	r0, 800eb42 <__mdiff+0x2e>
 800eb36:	4b3f      	ldr	r3, [pc, #252]	@ (800ec34 <__mdiff+0x120>)
 800eb38:	f240 2137 	movw	r1, #567	@ 0x237
 800eb3c:	483e      	ldr	r0, [pc, #248]	@ (800ec38 <__mdiff+0x124>)
 800eb3e:	f7fe fe0d 	bl	800d75c <__assert_func>
 800eb42:	2301      	movs	r3, #1
 800eb44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eb48:	4610      	mov	r0, r2
 800eb4a:	b003      	add	sp, #12
 800eb4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb50:	bfbc      	itt	lt
 800eb52:	464b      	movlt	r3, r9
 800eb54:	46a1      	movlt	r9, r4
 800eb56:	4630      	mov	r0, r6
 800eb58:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800eb5c:	bfba      	itte	lt
 800eb5e:	461c      	movlt	r4, r3
 800eb60:	2501      	movlt	r5, #1
 800eb62:	2500      	movge	r5, #0
 800eb64:	f7ff fcf6 	bl	800e554 <_Balloc>
 800eb68:	4602      	mov	r2, r0
 800eb6a:	b918      	cbnz	r0, 800eb74 <__mdiff+0x60>
 800eb6c:	4b31      	ldr	r3, [pc, #196]	@ (800ec34 <__mdiff+0x120>)
 800eb6e:	f240 2145 	movw	r1, #581	@ 0x245
 800eb72:	e7e3      	b.n	800eb3c <__mdiff+0x28>
 800eb74:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800eb78:	6926      	ldr	r6, [r4, #16]
 800eb7a:	60c5      	str	r5, [r0, #12]
 800eb7c:	f109 0310 	add.w	r3, r9, #16
 800eb80:	f109 0514 	add.w	r5, r9, #20
 800eb84:	f104 0e14 	add.w	lr, r4, #20
 800eb88:	f100 0b14 	add.w	fp, r0, #20
 800eb8c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800eb90:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800eb94:	9301      	str	r3, [sp, #4]
 800eb96:	46d9      	mov	r9, fp
 800eb98:	f04f 0c00 	mov.w	ip, #0
 800eb9c:	9b01      	ldr	r3, [sp, #4]
 800eb9e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800eba2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800eba6:	9301      	str	r3, [sp, #4]
 800eba8:	fa1f f38a 	uxth.w	r3, sl
 800ebac:	4619      	mov	r1, r3
 800ebae:	b283      	uxth	r3, r0
 800ebb0:	1acb      	subs	r3, r1, r3
 800ebb2:	0c00      	lsrs	r0, r0, #16
 800ebb4:	4463      	add	r3, ip
 800ebb6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ebba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ebbe:	b29b      	uxth	r3, r3
 800ebc0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ebc4:	4576      	cmp	r6, lr
 800ebc6:	f849 3b04 	str.w	r3, [r9], #4
 800ebca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ebce:	d8e5      	bhi.n	800eb9c <__mdiff+0x88>
 800ebd0:	1b33      	subs	r3, r6, r4
 800ebd2:	3b15      	subs	r3, #21
 800ebd4:	f023 0303 	bic.w	r3, r3, #3
 800ebd8:	3415      	adds	r4, #21
 800ebda:	3304      	adds	r3, #4
 800ebdc:	42a6      	cmp	r6, r4
 800ebde:	bf38      	it	cc
 800ebe0:	2304      	movcc	r3, #4
 800ebe2:	441d      	add	r5, r3
 800ebe4:	445b      	add	r3, fp
 800ebe6:	461e      	mov	r6, r3
 800ebe8:	462c      	mov	r4, r5
 800ebea:	4544      	cmp	r4, r8
 800ebec:	d30e      	bcc.n	800ec0c <__mdiff+0xf8>
 800ebee:	f108 0103 	add.w	r1, r8, #3
 800ebf2:	1b49      	subs	r1, r1, r5
 800ebf4:	f021 0103 	bic.w	r1, r1, #3
 800ebf8:	3d03      	subs	r5, #3
 800ebfa:	45a8      	cmp	r8, r5
 800ebfc:	bf38      	it	cc
 800ebfe:	2100      	movcc	r1, #0
 800ec00:	440b      	add	r3, r1
 800ec02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ec06:	b191      	cbz	r1, 800ec2e <__mdiff+0x11a>
 800ec08:	6117      	str	r7, [r2, #16]
 800ec0a:	e79d      	b.n	800eb48 <__mdiff+0x34>
 800ec0c:	f854 1b04 	ldr.w	r1, [r4], #4
 800ec10:	46e6      	mov	lr, ip
 800ec12:	0c08      	lsrs	r0, r1, #16
 800ec14:	fa1c fc81 	uxtah	ip, ip, r1
 800ec18:	4471      	add	r1, lr
 800ec1a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ec1e:	b289      	uxth	r1, r1
 800ec20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ec24:	f846 1b04 	str.w	r1, [r6], #4
 800ec28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ec2c:	e7dd      	b.n	800ebea <__mdiff+0xd6>
 800ec2e:	3f01      	subs	r7, #1
 800ec30:	e7e7      	b.n	800ec02 <__mdiff+0xee>
 800ec32:	bf00      	nop
 800ec34:	08011534 	.word	0x08011534
 800ec38:	08011545 	.word	0x08011545

0800ec3c <__ulp>:
 800ec3c:	b082      	sub	sp, #8
 800ec3e:	ed8d 0b00 	vstr	d0, [sp]
 800ec42:	9a01      	ldr	r2, [sp, #4]
 800ec44:	4b0f      	ldr	r3, [pc, #60]	@ (800ec84 <__ulp+0x48>)
 800ec46:	4013      	ands	r3, r2
 800ec48:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	dc08      	bgt.n	800ec62 <__ulp+0x26>
 800ec50:	425b      	negs	r3, r3
 800ec52:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ec56:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ec5a:	da04      	bge.n	800ec66 <__ulp+0x2a>
 800ec5c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ec60:	4113      	asrs	r3, r2
 800ec62:	2200      	movs	r2, #0
 800ec64:	e008      	b.n	800ec78 <__ulp+0x3c>
 800ec66:	f1a2 0314 	sub.w	r3, r2, #20
 800ec6a:	2b1e      	cmp	r3, #30
 800ec6c:	bfda      	itte	le
 800ec6e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ec72:	40da      	lsrle	r2, r3
 800ec74:	2201      	movgt	r2, #1
 800ec76:	2300      	movs	r3, #0
 800ec78:	4619      	mov	r1, r3
 800ec7a:	4610      	mov	r0, r2
 800ec7c:	ec41 0b10 	vmov	d0, r0, r1
 800ec80:	b002      	add	sp, #8
 800ec82:	4770      	bx	lr
 800ec84:	7ff00000 	.word	0x7ff00000

0800ec88 <__b2d>:
 800ec88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec8c:	6906      	ldr	r6, [r0, #16]
 800ec8e:	f100 0814 	add.w	r8, r0, #20
 800ec92:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ec96:	1f37      	subs	r7, r6, #4
 800ec98:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ec9c:	4610      	mov	r0, r2
 800ec9e:	f7ff fd4b 	bl	800e738 <__hi0bits>
 800eca2:	f1c0 0320 	rsb	r3, r0, #32
 800eca6:	280a      	cmp	r0, #10
 800eca8:	600b      	str	r3, [r1, #0]
 800ecaa:	491b      	ldr	r1, [pc, #108]	@ (800ed18 <__b2d+0x90>)
 800ecac:	dc15      	bgt.n	800ecda <__b2d+0x52>
 800ecae:	f1c0 0c0b 	rsb	ip, r0, #11
 800ecb2:	fa22 f30c 	lsr.w	r3, r2, ip
 800ecb6:	45b8      	cmp	r8, r7
 800ecb8:	ea43 0501 	orr.w	r5, r3, r1
 800ecbc:	bf34      	ite	cc
 800ecbe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ecc2:	2300      	movcs	r3, #0
 800ecc4:	3015      	adds	r0, #21
 800ecc6:	fa02 f000 	lsl.w	r0, r2, r0
 800ecca:	fa23 f30c 	lsr.w	r3, r3, ip
 800ecce:	4303      	orrs	r3, r0
 800ecd0:	461c      	mov	r4, r3
 800ecd2:	ec45 4b10 	vmov	d0, r4, r5
 800ecd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecda:	45b8      	cmp	r8, r7
 800ecdc:	bf3a      	itte	cc
 800ecde:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ece2:	f1a6 0708 	subcc.w	r7, r6, #8
 800ece6:	2300      	movcs	r3, #0
 800ece8:	380b      	subs	r0, #11
 800ecea:	d012      	beq.n	800ed12 <__b2d+0x8a>
 800ecec:	f1c0 0120 	rsb	r1, r0, #32
 800ecf0:	fa23 f401 	lsr.w	r4, r3, r1
 800ecf4:	4082      	lsls	r2, r0
 800ecf6:	4322      	orrs	r2, r4
 800ecf8:	4547      	cmp	r7, r8
 800ecfa:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ecfe:	bf8c      	ite	hi
 800ed00:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ed04:	2200      	movls	r2, #0
 800ed06:	4083      	lsls	r3, r0
 800ed08:	40ca      	lsrs	r2, r1
 800ed0a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ed0e:	4313      	orrs	r3, r2
 800ed10:	e7de      	b.n	800ecd0 <__b2d+0x48>
 800ed12:	ea42 0501 	orr.w	r5, r2, r1
 800ed16:	e7db      	b.n	800ecd0 <__b2d+0x48>
 800ed18:	3ff00000 	.word	0x3ff00000

0800ed1c <__d2b>:
 800ed1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ed20:	460f      	mov	r7, r1
 800ed22:	2101      	movs	r1, #1
 800ed24:	ec59 8b10 	vmov	r8, r9, d0
 800ed28:	4616      	mov	r6, r2
 800ed2a:	f7ff fc13 	bl	800e554 <_Balloc>
 800ed2e:	4604      	mov	r4, r0
 800ed30:	b930      	cbnz	r0, 800ed40 <__d2b+0x24>
 800ed32:	4602      	mov	r2, r0
 800ed34:	4b23      	ldr	r3, [pc, #140]	@ (800edc4 <__d2b+0xa8>)
 800ed36:	4824      	ldr	r0, [pc, #144]	@ (800edc8 <__d2b+0xac>)
 800ed38:	f240 310f 	movw	r1, #783	@ 0x30f
 800ed3c:	f7fe fd0e 	bl	800d75c <__assert_func>
 800ed40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ed44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ed48:	b10d      	cbz	r5, 800ed4e <__d2b+0x32>
 800ed4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ed4e:	9301      	str	r3, [sp, #4]
 800ed50:	f1b8 0300 	subs.w	r3, r8, #0
 800ed54:	d023      	beq.n	800ed9e <__d2b+0x82>
 800ed56:	4668      	mov	r0, sp
 800ed58:	9300      	str	r3, [sp, #0]
 800ed5a:	f7ff fd0c 	bl	800e776 <__lo0bits>
 800ed5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ed62:	b1d0      	cbz	r0, 800ed9a <__d2b+0x7e>
 800ed64:	f1c0 0320 	rsb	r3, r0, #32
 800ed68:	fa02 f303 	lsl.w	r3, r2, r3
 800ed6c:	430b      	orrs	r3, r1
 800ed6e:	40c2      	lsrs	r2, r0
 800ed70:	6163      	str	r3, [r4, #20]
 800ed72:	9201      	str	r2, [sp, #4]
 800ed74:	9b01      	ldr	r3, [sp, #4]
 800ed76:	61a3      	str	r3, [r4, #24]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	bf0c      	ite	eq
 800ed7c:	2201      	moveq	r2, #1
 800ed7e:	2202      	movne	r2, #2
 800ed80:	6122      	str	r2, [r4, #16]
 800ed82:	b1a5      	cbz	r5, 800edae <__d2b+0x92>
 800ed84:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ed88:	4405      	add	r5, r0
 800ed8a:	603d      	str	r5, [r7, #0]
 800ed8c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ed90:	6030      	str	r0, [r6, #0]
 800ed92:	4620      	mov	r0, r4
 800ed94:	b003      	add	sp, #12
 800ed96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed9a:	6161      	str	r1, [r4, #20]
 800ed9c:	e7ea      	b.n	800ed74 <__d2b+0x58>
 800ed9e:	a801      	add	r0, sp, #4
 800eda0:	f7ff fce9 	bl	800e776 <__lo0bits>
 800eda4:	9b01      	ldr	r3, [sp, #4]
 800eda6:	6163      	str	r3, [r4, #20]
 800eda8:	3020      	adds	r0, #32
 800edaa:	2201      	movs	r2, #1
 800edac:	e7e8      	b.n	800ed80 <__d2b+0x64>
 800edae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800edb2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800edb6:	6038      	str	r0, [r7, #0]
 800edb8:	6918      	ldr	r0, [r3, #16]
 800edba:	f7ff fcbd 	bl	800e738 <__hi0bits>
 800edbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800edc2:	e7e5      	b.n	800ed90 <__d2b+0x74>
 800edc4:	08011534 	.word	0x08011534
 800edc8:	08011545 	.word	0x08011545

0800edcc <__ratio>:
 800edcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edd0:	4688      	mov	r8, r1
 800edd2:	4669      	mov	r1, sp
 800edd4:	4681      	mov	r9, r0
 800edd6:	f7ff ff57 	bl	800ec88 <__b2d>
 800edda:	a901      	add	r1, sp, #4
 800eddc:	4640      	mov	r0, r8
 800edde:	ec55 4b10 	vmov	r4, r5, d0
 800ede2:	f7ff ff51 	bl	800ec88 <__b2d>
 800ede6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800edea:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800edee:	1ad2      	subs	r2, r2, r3
 800edf0:	e9dd 3100 	ldrd	r3, r1, [sp]
 800edf4:	1a5b      	subs	r3, r3, r1
 800edf6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800edfa:	ec57 6b10 	vmov	r6, r7, d0
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	bfd6      	itet	le
 800ee02:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ee06:	462a      	movgt	r2, r5
 800ee08:	463a      	movle	r2, r7
 800ee0a:	46ab      	mov	fp, r5
 800ee0c:	46a2      	mov	sl, r4
 800ee0e:	bfce      	itee	gt
 800ee10:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800ee14:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800ee18:	ee00 3a90 	vmovle	s1, r3
 800ee1c:	ec4b ab17 	vmov	d7, sl, fp
 800ee20:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800ee24:	b003      	add	sp, #12
 800ee26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ee2a <__copybits>:
 800ee2a:	3901      	subs	r1, #1
 800ee2c:	b570      	push	{r4, r5, r6, lr}
 800ee2e:	1149      	asrs	r1, r1, #5
 800ee30:	6914      	ldr	r4, [r2, #16]
 800ee32:	3101      	adds	r1, #1
 800ee34:	f102 0314 	add.w	r3, r2, #20
 800ee38:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ee3c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ee40:	1f05      	subs	r5, r0, #4
 800ee42:	42a3      	cmp	r3, r4
 800ee44:	d30c      	bcc.n	800ee60 <__copybits+0x36>
 800ee46:	1aa3      	subs	r3, r4, r2
 800ee48:	3b11      	subs	r3, #17
 800ee4a:	f023 0303 	bic.w	r3, r3, #3
 800ee4e:	3211      	adds	r2, #17
 800ee50:	42a2      	cmp	r2, r4
 800ee52:	bf88      	it	hi
 800ee54:	2300      	movhi	r3, #0
 800ee56:	4418      	add	r0, r3
 800ee58:	2300      	movs	r3, #0
 800ee5a:	4288      	cmp	r0, r1
 800ee5c:	d305      	bcc.n	800ee6a <__copybits+0x40>
 800ee5e:	bd70      	pop	{r4, r5, r6, pc}
 800ee60:	f853 6b04 	ldr.w	r6, [r3], #4
 800ee64:	f845 6f04 	str.w	r6, [r5, #4]!
 800ee68:	e7eb      	b.n	800ee42 <__copybits+0x18>
 800ee6a:	f840 3b04 	str.w	r3, [r0], #4
 800ee6e:	e7f4      	b.n	800ee5a <__copybits+0x30>

0800ee70 <__any_on>:
 800ee70:	f100 0214 	add.w	r2, r0, #20
 800ee74:	6900      	ldr	r0, [r0, #16]
 800ee76:	114b      	asrs	r3, r1, #5
 800ee78:	4298      	cmp	r0, r3
 800ee7a:	b510      	push	{r4, lr}
 800ee7c:	db11      	blt.n	800eea2 <__any_on+0x32>
 800ee7e:	dd0a      	ble.n	800ee96 <__any_on+0x26>
 800ee80:	f011 011f 	ands.w	r1, r1, #31
 800ee84:	d007      	beq.n	800ee96 <__any_on+0x26>
 800ee86:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ee8a:	fa24 f001 	lsr.w	r0, r4, r1
 800ee8e:	fa00 f101 	lsl.w	r1, r0, r1
 800ee92:	428c      	cmp	r4, r1
 800ee94:	d10b      	bne.n	800eeae <__any_on+0x3e>
 800ee96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ee9a:	4293      	cmp	r3, r2
 800ee9c:	d803      	bhi.n	800eea6 <__any_on+0x36>
 800ee9e:	2000      	movs	r0, #0
 800eea0:	bd10      	pop	{r4, pc}
 800eea2:	4603      	mov	r3, r0
 800eea4:	e7f7      	b.n	800ee96 <__any_on+0x26>
 800eea6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eeaa:	2900      	cmp	r1, #0
 800eeac:	d0f5      	beq.n	800ee9a <__any_on+0x2a>
 800eeae:	2001      	movs	r0, #1
 800eeb0:	e7f6      	b.n	800eea0 <__any_on+0x30>

0800eeb2 <sulp>:
 800eeb2:	b570      	push	{r4, r5, r6, lr}
 800eeb4:	4604      	mov	r4, r0
 800eeb6:	460d      	mov	r5, r1
 800eeb8:	4616      	mov	r6, r2
 800eeba:	ec45 4b10 	vmov	d0, r4, r5
 800eebe:	f7ff febd 	bl	800ec3c <__ulp>
 800eec2:	b17e      	cbz	r6, 800eee4 <sulp+0x32>
 800eec4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800eec8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800eecc:	2b00      	cmp	r3, #0
 800eece:	dd09      	ble.n	800eee4 <sulp+0x32>
 800eed0:	051b      	lsls	r3, r3, #20
 800eed2:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800eed6:	2000      	movs	r0, #0
 800eed8:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800eedc:	ec41 0b17 	vmov	d7, r0, r1
 800eee0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800eee4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800eee8 <_strtod_l>:
 800eee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eeec:	ed2d 8b0a 	vpush	{d8-d12}
 800eef0:	b097      	sub	sp, #92	@ 0x5c
 800eef2:	4688      	mov	r8, r1
 800eef4:	920e      	str	r2, [sp, #56]	@ 0x38
 800eef6:	2200      	movs	r2, #0
 800eef8:	9212      	str	r2, [sp, #72]	@ 0x48
 800eefa:	9005      	str	r0, [sp, #20]
 800eefc:	f04f 0a00 	mov.w	sl, #0
 800ef00:	f04f 0b00 	mov.w	fp, #0
 800ef04:	460a      	mov	r2, r1
 800ef06:	9211      	str	r2, [sp, #68]	@ 0x44
 800ef08:	7811      	ldrb	r1, [r2, #0]
 800ef0a:	292b      	cmp	r1, #43	@ 0x2b
 800ef0c:	d04c      	beq.n	800efa8 <_strtod_l+0xc0>
 800ef0e:	d839      	bhi.n	800ef84 <_strtod_l+0x9c>
 800ef10:	290d      	cmp	r1, #13
 800ef12:	d833      	bhi.n	800ef7c <_strtod_l+0x94>
 800ef14:	2908      	cmp	r1, #8
 800ef16:	d833      	bhi.n	800ef80 <_strtod_l+0x98>
 800ef18:	2900      	cmp	r1, #0
 800ef1a:	d03c      	beq.n	800ef96 <_strtod_l+0xae>
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	9208      	str	r2, [sp, #32]
 800ef20:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800ef22:	782a      	ldrb	r2, [r5, #0]
 800ef24:	2a30      	cmp	r2, #48	@ 0x30
 800ef26:	f040 80b5 	bne.w	800f094 <_strtod_l+0x1ac>
 800ef2a:	786a      	ldrb	r2, [r5, #1]
 800ef2c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ef30:	2a58      	cmp	r2, #88	@ 0x58
 800ef32:	d170      	bne.n	800f016 <_strtod_l+0x12e>
 800ef34:	9302      	str	r3, [sp, #8]
 800ef36:	9b08      	ldr	r3, [sp, #32]
 800ef38:	9301      	str	r3, [sp, #4]
 800ef3a:	ab12      	add	r3, sp, #72	@ 0x48
 800ef3c:	9300      	str	r3, [sp, #0]
 800ef3e:	4a8b      	ldr	r2, [pc, #556]	@ (800f16c <_strtod_l+0x284>)
 800ef40:	9805      	ldr	r0, [sp, #20]
 800ef42:	ab13      	add	r3, sp, #76	@ 0x4c
 800ef44:	a911      	add	r1, sp, #68	@ 0x44
 800ef46:	f001 f9fd 	bl	8010344 <__gethex>
 800ef4a:	f010 060f 	ands.w	r6, r0, #15
 800ef4e:	4604      	mov	r4, r0
 800ef50:	d005      	beq.n	800ef5e <_strtod_l+0x76>
 800ef52:	2e06      	cmp	r6, #6
 800ef54:	d12a      	bne.n	800efac <_strtod_l+0xc4>
 800ef56:	3501      	adds	r5, #1
 800ef58:	2300      	movs	r3, #0
 800ef5a:	9511      	str	r5, [sp, #68]	@ 0x44
 800ef5c:	9308      	str	r3, [sp, #32]
 800ef5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	f040 852f 	bne.w	800f9c4 <_strtod_l+0xadc>
 800ef66:	9b08      	ldr	r3, [sp, #32]
 800ef68:	ec4b ab10 	vmov	d0, sl, fp
 800ef6c:	b1cb      	cbz	r3, 800efa2 <_strtod_l+0xba>
 800ef6e:	eeb1 0b40 	vneg.f64	d0, d0
 800ef72:	b017      	add	sp, #92	@ 0x5c
 800ef74:	ecbd 8b0a 	vpop	{d8-d12}
 800ef78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef7c:	2920      	cmp	r1, #32
 800ef7e:	d1cd      	bne.n	800ef1c <_strtod_l+0x34>
 800ef80:	3201      	adds	r2, #1
 800ef82:	e7c0      	b.n	800ef06 <_strtod_l+0x1e>
 800ef84:	292d      	cmp	r1, #45	@ 0x2d
 800ef86:	d1c9      	bne.n	800ef1c <_strtod_l+0x34>
 800ef88:	2101      	movs	r1, #1
 800ef8a:	9108      	str	r1, [sp, #32]
 800ef8c:	1c51      	adds	r1, r2, #1
 800ef8e:	9111      	str	r1, [sp, #68]	@ 0x44
 800ef90:	7852      	ldrb	r2, [r2, #1]
 800ef92:	2a00      	cmp	r2, #0
 800ef94:	d1c4      	bne.n	800ef20 <_strtod_l+0x38>
 800ef96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ef98:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	f040 850f 	bne.w	800f9c0 <_strtod_l+0xad8>
 800efa2:	ec4b ab10 	vmov	d0, sl, fp
 800efa6:	e7e4      	b.n	800ef72 <_strtod_l+0x8a>
 800efa8:	2100      	movs	r1, #0
 800efaa:	e7ee      	b.n	800ef8a <_strtod_l+0xa2>
 800efac:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800efae:	b13a      	cbz	r2, 800efc0 <_strtod_l+0xd8>
 800efb0:	2135      	movs	r1, #53	@ 0x35
 800efb2:	a814      	add	r0, sp, #80	@ 0x50
 800efb4:	f7ff ff39 	bl	800ee2a <__copybits>
 800efb8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800efba:	9805      	ldr	r0, [sp, #20]
 800efbc:	f7ff fb0a 	bl	800e5d4 <_Bfree>
 800efc0:	1e73      	subs	r3, r6, #1
 800efc2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800efc4:	2b04      	cmp	r3, #4
 800efc6:	d806      	bhi.n	800efd6 <_strtod_l+0xee>
 800efc8:	e8df f003 	tbb	[pc, r3]
 800efcc:	201d0314 	.word	0x201d0314
 800efd0:	14          	.byte	0x14
 800efd1:	00          	.byte	0x00
 800efd2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800efd6:	05e3      	lsls	r3, r4, #23
 800efd8:	bf48      	it	mi
 800efda:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800efde:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800efe2:	0d1b      	lsrs	r3, r3, #20
 800efe4:	051b      	lsls	r3, r3, #20
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d1b9      	bne.n	800ef5e <_strtod_l+0x76>
 800efea:	f7fe fb75 	bl	800d6d8 <__errno>
 800efee:	2322      	movs	r3, #34	@ 0x22
 800eff0:	6003      	str	r3, [r0, #0]
 800eff2:	e7b4      	b.n	800ef5e <_strtod_l+0x76>
 800eff4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800eff8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800effc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800f000:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f004:	e7e7      	b.n	800efd6 <_strtod_l+0xee>
 800f006:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800f174 <_strtod_l+0x28c>
 800f00a:	e7e4      	b.n	800efd6 <_strtod_l+0xee>
 800f00c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800f010:	f04f 3aff 	mov.w	sl, #4294967295
 800f014:	e7df      	b.n	800efd6 <_strtod_l+0xee>
 800f016:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f018:	1c5a      	adds	r2, r3, #1
 800f01a:	9211      	str	r2, [sp, #68]	@ 0x44
 800f01c:	785b      	ldrb	r3, [r3, #1]
 800f01e:	2b30      	cmp	r3, #48	@ 0x30
 800f020:	d0f9      	beq.n	800f016 <_strtod_l+0x12e>
 800f022:	2b00      	cmp	r3, #0
 800f024:	d09b      	beq.n	800ef5e <_strtod_l+0x76>
 800f026:	2301      	movs	r3, #1
 800f028:	2600      	movs	r6, #0
 800f02a:	9307      	str	r3, [sp, #28]
 800f02c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f02e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f030:	46b1      	mov	r9, r6
 800f032:	4635      	mov	r5, r6
 800f034:	220a      	movs	r2, #10
 800f036:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800f038:	7804      	ldrb	r4, [r0, #0]
 800f03a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800f03e:	b2d9      	uxtb	r1, r3
 800f040:	2909      	cmp	r1, #9
 800f042:	d929      	bls.n	800f098 <_strtod_l+0x1b0>
 800f044:	494a      	ldr	r1, [pc, #296]	@ (800f170 <_strtod_l+0x288>)
 800f046:	2201      	movs	r2, #1
 800f048:	f7fe fa24 	bl	800d494 <strncmp>
 800f04c:	b378      	cbz	r0, 800f0ae <_strtod_l+0x1c6>
 800f04e:	2000      	movs	r0, #0
 800f050:	4622      	mov	r2, r4
 800f052:	462b      	mov	r3, r5
 800f054:	4607      	mov	r7, r0
 800f056:	9006      	str	r0, [sp, #24]
 800f058:	2a65      	cmp	r2, #101	@ 0x65
 800f05a:	d001      	beq.n	800f060 <_strtod_l+0x178>
 800f05c:	2a45      	cmp	r2, #69	@ 0x45
 800f05e:	d117      	bne.n	800f090 <_strtod_l+0x1a8>
 800f060:	b91b      	cbnz	r3, 800f06a <_strtod_l+0x182>
 800f062:	9b07      	ldr	r3, [sp, #28]
 800f064:	4303      	orrs	r3, r0
 800f066:	d096      	beq.n	800ef96 <_strtod_l+0xae>
 800f068:	2300      	movs	r3, #0
 800f06a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800f06e:	f108 0201 	add.w	r2, r8, #1
 800f072:	9211      	str	r2, [sp, #68]	@ 0x44
 800f074:	f898 2001 	ldrb.w	r2, [r8, #1]
 800f078:	2a2b      	cmp	r2, #43	@ 0x2b
 800f07a:	d06b      	beq.n	800f154 <_strtod_l+0x26c>
 800f07c:	2a2d      	cmp	r2, #45	@ 0x2d
 800f07e:	d071      	beq.n	800f164 <_strtod_l+0x27c>
 800f080:	f04f 0e00 	mov.w	lr, #0
 800f084:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800f088:	2c09      	cmp	r4, #9
 800f08a:	d979      	bls.n	800f180 <_strtod_l+0x298>
 800f08c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800f090:	2400      	movs	r4, #0
 800f092:	e094      	b.n	800f1be <_strtod_l+0x2d6>
 800f094:	2300      	movs	r3, #0
 800f096:	e7c7      	b.n	800f028 <_strtod_l+0x140>
 800f098:	2d08      	cmp	r5, #8
 800f09a:	f100 0001 	add.w	r0, r0, #1
 800f09e:	bfd4      	ite	le
 800f0a0:	fb02 3909 	mlale	r9, r2, r9, r3
 800f0a4:	fb02 3606 	mlagt	r6, r2, r6, r3
 800f0a8:	3501      	adds	r5, #1
 800f0aa:	9011      	str	r0, [sp, #68]	@ 0x44
 800f0ac:	e7c3      	b.n	800f036 <_strtod_l+0x14e>
 800f0ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f0b0:	1c5a      	adds	r2, r3, #1
 800f0b2:	9211      	str	r2, [sp, #68]	@ 0x44
 800f0b4:	785a      	ldrb	r2, [r3, #1]
 800f0b6:	b375      	cbz	r5, 800f116 <_strtod_l+0x22e>
 800f0b8:	4607      	mov	r7, r0
 800f0ba:	462b      	mov	r3, r5
 800f0bc:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800f0c0:	2909      	cmp	r1, #9
 800f0c2:	d913      	bls.n	800f0ec <_strtod_l+0x204>
 800f0c4:	2101      	movs	r1, #1
 800f0c6:	9106      	str	r1, [sp, #24]
 800f0c8:	e7c6      	b.n	800f058 <_strtod_l+0x170>
 800f0ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f0cc:	1c5a      	adds	r2, r3, #1
 800f0ce:	9211      	str	r2, [sp, #68]	@ 0x44
 800f0d0:	785a      	ldrb	r2, [r3, #1]
 800f0d2:	3001      	adds	r0, #1
 800f0d4:	2a30      	cmp	r2, #48	@ 0x30
 800f0d6:	d0f8      	beq.n	800f0ca <_strtod_l+0x1e2>
 800f0d8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800f0dc:	2b08      	cmp	r3, #8
 800f0de:	f200 8476 	bhi.w	800f9ce <_strtod_l+0xae6>
 800f0e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f0e4:	930a      	str	r3, [sp, #40]	@ 0x28
 800f0e6:	4607      	mov	r7, r0
 800f0e8:	2000      	movs	r0, #0
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	3a30      	subs	r2, #48	@ 0x30
 800f0ee:	f100 0101 	add.w	r1, r0, #1
 800f0f2:	d023      	beq.n	800f13c <_strtod_l+0x254>
 800f0f4:	440f      	add	r7, r1
 800f0f6:	eb00 0c03 	add.w	ip, r0, r3
 800f0fa:	4619      	mov	r1, r3
 800f0fc:	240a      	movs	r4, #10
 800f0fe:	4561      	cmp	r1, ip
 800f100:	d10b      	bne.n	800f11a <_strtod_l+0x232>
 800f102:	1c5c      	adds	r4, r3, #1
 800f104:	4403      	add	r3, r0
 800f106:	2b08      	cmp	r3, #8
 800f108:	4404      	add	r4, r0
 800f10a:	dc11      	bgt.n	800f130 <_strtod_l+0x248>
 800f10c:	230a      	movs	r3, #10
 800f10e:	fb03 2909 	mla	r9, r3, r9, r2
 800f112:	2100      	movs	r1, #0
 800f114:	e013      	b.n	800f13e <_strtod_l+0x256>
 800f116:	4628      	mov	r0, r5
 800f118:	e7dc      	b.n	800f0d4 <_strtod_l+0x1ec>
 800f11a:	2908      	cmp	r1, #8
 800f11c:	f101 0101 	add.w	r1, r1, #1
 800f120:	dc02      	bgt.n	800f128 <_strtod_l+0x240>
 800f122:	fb04 f909 	mul.w	r9, r4, r9
 800f126:	e7ea      	b.n	800f0fe <_strtod_l+0x216>
 800f128:	2910      	cmp	r1, #16
 800f12a:	bfd8      	it	le
 800f12c:	4366      	mulle	r6, r4
 800f12e:	e7e6      	b.n	800f0fe <_strtod_l+0x216>
 800f130:	2b0f      	cmp	r3, #15
 800f132:	dcee      	bgt.n	800f112 <_strtod_l+0x22a>
 800f134:	230a      	movs	r3, #10
 800f136:	fb03 2606 	mla	r6, r3, r6, r2
 800f13a:	e7ea      	b.n	800f112 <_strtod_l+0x22a>
 800f13c:	461c      	mov	r4, r3
 800f13e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f140:	1c5a      	adds	r2, r3, #1
 800f142:	9211      	str	r2, [sp, #68]	@ 0x44
 800f144:	785a      	ldrb	r2, [r3, #1]
 800f146:	4608      	mov	r0, r1
 800f148:	4623      	mov	r3, r4
 800f14a:	e7b7      	b.n	800f0bc <_strtod_l+0x1d4>
 800f14c:	2301      	movs	r3, #1
 800f14e:	2700      	movs	r7, #0
 800f150:	9306      	str	r3, [sp, #24]
 800f152:	e786      	b.n	800f062 <_strtod_l+0x17a>
 800f154:	f04f 0e00 	mov.w	lr, #0
 800f158:	f108 0202 	add.w	r2, r8, #2
 800f15c:	9211      	str	r2, [sp, #68]	@ 0x44
 800f15e:	f898 2002 	ldrb.w	r2, [r8, #2]
 800f162:	e78f      	b.n	800f084 <_strtod_l+0x19c>
 800f164:	f04f 0e01 	mov.w	lr, #1
 800f168:	e7f6      	b.n	800f158 <_strtod_l+0x270>
 800f16a:	bf00      	nop
 800f16c:	080116b8 	.word	0x080116b8
 800f170:	080116a0 	.word	0x080116a0
 800f174:	7ff00000 	.word	0x7ff00000
 800f178:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f17a:	1c54      	adds	r4, r2, #1
 800f17c:	9411      	str	r4, [sp, #68]	@ 0x44
 800f17e:	7852      	ldrb	r2, [r2, #1]
 800f180:	2a30      	cmp	r2, #48	@ 0x30
 800f182:	d0f9      	beq.n	800f178 <_strtod_l+0x290>
 800f184:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800f188:	2c08      	cmp	r4, #8
 800f18a:	d881      	bhi.n	800f090 <_strtod_l+0x1a8>
 800f18c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800f190:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f192:	9209      	str	r2, [sp, #36]	@ 0x24
 800f194:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f196:	1c51      	adds	r1, r2, #1
 800f198:	9111      	str	r1, [sp, #68]	@ 0x44
 800f19a:	7852      	ldrb	r2, [r2, #1]
 800f19c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800f1a0:	2c09      	cmp	r4, #9
 800f1a2:	d938      	bls.n	800f216 <_strtod_l+0x32e>
 800f1a4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800f1a6:	1b0c      	subs	r4, r1, r4
 800f1a8:	2c08      	cmp	r4, #8
 800f1aa:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800f1ae:	dc02      	bgt.n	800f1b6 <_strtod_l+0x2ce>
 800f1b0:	4564      	cmp	r4, ip
 800f1b2:	bfa8      	it	ge
 800f1b4:	4664      	movge	r4, ip
 800f1b6:	f1be 0f00 	cmp.w	lr, #0
 800f1ba:	d000      	beq.n	800f1be <_strtod_l+0x2d6>
 800f1bc:	4264      	negs	r4, r4
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d14e      	bne.n	800f260 <_strtod_l+0x378>
 800f1c2:	9b07      	ldr	r3, [sp, #28]
 800f1c4:	4318      	orrs	r0, r3
 800f1c6:	f47f aeca 	bne.w	800ef5e <_strtod_l+0x76>
 800f1ca:	9b06      	ldr	r3, [sp, #24]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	f47f aee2 	bne.w	800ef96 <_strtod_l+0xae>
 800f1d2:	2a69      	cmp	r2, #105	@ 0x69
 800f1d4:	d027      	beq.n	800f226 <_strtod_l+0x33e>
 800f1d6:	dc24      	bgt.n	800f222 <_strtod_l+0x33a>
 800f1d8:	2a49      	cmp	r2, #73	@ 0x49
 800f1da:	d024      	beq.n	800f226 <_strtod_l+0x33e>
 800f1dc:	2a4e      	cmp	r2, #78	@ 0x4e
 800f1de:	f47f aeda 	bne.w	800ef96 <_strtod_l+0xae>
 800f1e2:	4997      	ldr	r1, [pc, #604]	@ (800f440 <_strtod_l+0x558>)
 800f1e4:	a811      	add	r0, sp, #68	@ 0x44
 800f1e6:	f001 facf 	bl	8010788 <__match>
 800f1ea:	2800      	cmp	r0, #0
 800f1ec:	f43f aed3 	beq.w	800ef96 <_strtod_l+0xae>
 800f1f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f1f2:	781b      	ldrb	r3, [r3, #0]
 800f1f4:	2b28      	cmp	r3, #40	@ 0x28
 800f1f6:	d12d      	bne.n	800f254 <_strtod_l+0x36c>
 800f1f8:	4992      	ldr	r1, [pc, #584]	@ (800f444 <_strtod_l+0x55c>)
 800f1fa:	aa14      	add	r2, sp, #80	@ 0x50
 800f1fc:	a811      	add	r0, sp, #68	@ 0x44
 800f1fe:	f001 fad7 	bl	80107b0 <__hexnan>
 800f202:	2805      	cmp	r0, #5
 800f204:	d126      	bne.n	800f254 <_strtod_l+0x36c>
 800f206:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f208:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800f20c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800f210:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f214:	e6a3      	b.n	800ef5e <_strtod_l+0x76>
 800f216:	240a      	movs	r4, #10
 800f218:	fb04 2c0c 	mla	ip, r4, ip, r2
 800f21c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800f220:	e7b8      	b.n	800f194 <_strtod_l+0x2ac>
 800f222:	2a6e      	cmp	r2, #110	@ 0x6e
 800f224:	e7db      	b.n	800f1de <_strtod_l+0x2f6>
 800f226:	4988      	ldr	r1, [pc, #544]	@ (800f448 <_strtod_l+0x560>)
 800f228:	a811      	add	r0, sp, #68	@ 0x44
 800f22a:	f001 faad 	bl	8010788 <__match>
 800f22e:	2800      	cmp	r0, #0
 800f230:	f43f aeb1 	beq.w	800ef96 <_strtod_l+0xae>
 800f234:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f236:	4985      	ldr	r1, [pc, #532]	@ (800f44c <_strtod_l+0x564>)
 800f238:	3b01      	subs	r3, #1
 800f23a:	a811      	add	r0, sp, #68	@ 0x44
 800f23c:	9311      	str	r3, [sp, #68]	@ 0x44
 800f23e:	f001 faa3 	bl	8010788 <__match>
 800f242:	b910      	cbnz	r0, 800f24a <_strtod_l+0x362>
 800f244:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f246:	3301      	adds	r3, #1
 800f248:	9311      	str	r3, [sp, #68]	@ 0x44
 800f24a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800f460 <_strtod_l+0x578>
 800f24e:	f04f 0a00 	mov.w	sl, #0
 800f252:	e684      	b.n	800ef5e <_strtod_l+0x76>
 800f254:	487e      	ldr	r0, [pc, #504]	@ (800f450 <_strtod_l+0x568>)
 800f256:	f000 ffeb 	bl	8010230 <nan>
 800f25a:	ec5b ab10 	vmov	sl, fp, d0
 800f25e:	e67e      	b.n	800ef5e <_strtod_l+0x76>
 800f260:	ee07 9a90 	vmov	s15, r9
 800f264:	1be2      	subs	r2, r4, r7
 800f266:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f26a:	2d00      	cmp	r5, #0
 800f26c:	bf08      	it	eq
 800f26e:	461d      	moveq	r5, r3
 800f270:	2b10      	cmp	r3, #16
 800f272:	9209      	str	r2, [sp, #36]	@ 0x24
 800f274:	461a      	mov	r2, r3
 800f276:	bfa8      	it	ge
 800f278:	2210      	movge	r2, #16
 800f27a:	2b09      	cmp	r3, #9
 800f27c:	ec5b ab17 	vmov	sl, fp, d7
 800f280:	dc15      	bgt.n	800f2ae <_strtod_l+0x3c6>
 800f282:	1be1      	subs	r1, r4, r7
 800f284:	2900      	cmp	r1, #0
 800f286:	f43f ae6a 	beq.w	800ef5e <_strtod_l+0x76>
 800f28a:	eba4 0107 	sub.w	r1, r4, r7
 800f28e:	dd72      	ble.n	800f376 <_strtod_l+0x48e>
 800f290:	2916      	cmp	r1, #22
 800f292:	dc59      	bgt.n	800f348 <_strtod_l+0x460>
 800f294:	4b6f      	ldr	r3, [pc, #444]	@ (800f454 <_strtod_l+0x56c>)
 800f296:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f298:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f29c:	ed93 7b00 	vldr	d7, [r3]
 800f2a0:	ec4b ab16 	vmov	d6, sl, fp
 800f2a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f2a8:	ec5b ab17 	vmov	sl, fp, d7
 800f2ac:	e657      	b.n	800ef5e <_strtod_l+0x76>
 800f2ae:	4969      	ldr	r1, [pc, #420]	@ (800f454 <_strtod_l+0x56c>)
 800f2b0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800f2b4:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800f2b8:	ee06 6a90 	vmov	s13, r6
 800f2bc:	2b0f      	cmp	r3, #15
 800f2be:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800f2c2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f2c6:	ec5b ab16 	vmov	sl, fp, d6
 800f2ca:	ddda      	ble.n	800f282 <_strtod_l+0x39a>
 800f2cc:	1a9a      	subs	r2, r3, r2
 800f2ce:	1be1      	subs	r1, r4, r7
 800f2d0:	440a      	add	r2, r1
 800f2d2:	2a00      	cmp	r2, #0
 800f2d4:	f340 8094 	ble.w	800f400 <_strtod_l+0x518>
 800f2d8:	f012 000f 	ands.w	r0, r2, #15
 800f2dc:	d00a      	beq.n	800f2f4 <_strtod_l+0x40c>
 800f2de:	495d      	ldr	r1, [pc, #372]	@ (800f454 <_strtod_l+0x56c>)
 800f2e0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f2e4:	ed91 7b00 	vldr	d7, [r1]
 800f2e8:	ec4b ab16 	vmov	d6, sl, fp
 800f2ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f2f0:	ec5b ab17 	vmov	sl, fp, d7
 800f2f4:	f032 020f 	bics.w	r2, r2, #15
 800f2f8:	d073      	beq.n	800f3e2 <_strtod_l+0x4fa>
 800f2fa:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800f2fe:	dd47      	ble.n	800f390 <_strtod_l+0x4a8>
 800f300:	2400      	movs	r4, #0
 800f302:	4625      	mov	r5, r4
 800f304:	9407      	str	r4, [sp, #28]
 800f306:	4626      	mov	r6, r4
 800f308:	9a05      	ldr	r2, [sp, #20]
 800f30a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800f460 <_strtod_l+0x578>
 800f30e:	2322      	movs	r3, #34	@ 0x22
 800f310:	6013      	str	r3, [r2, #0]
 800f312:	f04f 0a00 	mov.w	sl, #0
 800f316:	9b07      	ldr	r3, [sp, #28]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	f43f ae20 	beq.w	800ef5e <_strtod_l+0x76>
 800f31e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f320:	9805      	ldr	r0, [sp, #20]
 800f322:	f7ff f957 	bl	800e5d4 <_Bfree>
 800f326:	9805      	ldr	r0, [sp, #20]
 800f328:	4631      	mov	r1, r6
 800f32a:	f7ff f953 	bl	800e5d4 <_Bfree>
 800f32e:	9805      	ldr	r0, [sp, #20]
 800f330:	4629      	mov	r1, r5
 800f332:	f7ff f94f 	bl	800e5d4 <_Bfree>
 800f336:	9907      	ldr	r1, [sp, #28]
 800f338:	9805      	ldr	r0, [sp, #20]
 800f33a:	f7ff f94b 	bl	800e5d4 <_Bfree>
 800f33e:	9805      	ldr	r0, [sp, #20]
 800f340:	4621      	mov	r1, r4
 800f342:	f7ff f947 	bl	800e5d4 <_Bfree>
 800f346:	e60a      	b.n	800ef5e <_strtod_l+0x76>
 800f348:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800f34c:	1be0      	subs	r0, r4, r7
 800f34e:	4281      	cmp	r1, r0
 800f350:	dbbc      	blt.n	800f2cc <_strtod_l+0x3e4>
 800f352:	4a40      	ldr	r2, [pc, #256]	@ (800f454 <_strtod_l+0x56c>)
 800f354:	f1c3 030f 	rsb	r3, r3, #15
 800f358:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800f35c:	ed91 7b00 	vldr	d7, [r1]
 800f360:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f362:	ec4b ab16 	vmov	d6, sl, fp
 800f366:	1acb      	subs	r3, r1, r3
 800f368:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f36c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f370:	ed92 6b00 	vldr	d6, [r2]
 800f374:	e796      	b.n	800f2a4 <_strtod_l+0x3bc>
 800f376:	3116      	adds	r1, #22
 800f378:	dba8      	blt.n	800f2cc <_strtod_l+0x3e4>
 800f37a:	4b36      	ldr	r3, [pc, #216]	@ (800f454 <_strtod_l+0x56c>)
 800f37c:	1b3c      	subs	r4, r7, r4
 800f37e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800f382:	ed94 7b00 	vldr	d7, [r4]
 800f386:	ec4b ab16 	vmov	d6, sl, fp
 800f38a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f38e:	e78b      	b.n	800f2a8 <_strtod_l+0x3c0>
 800f390:	2000      	movs	r0, #0
 800f392:	ec4b ab17 	vmov	d7, sl, fp
 800f396:	4e30      	ldr	r6, [pc, #192]	@ (800f458 <_strtod_l+0x570>)
 800f398:	1112      	asrs	r2, r2, #4
 800f39a:	4601      	mov	r1, r0
 800f39c:	2a01      	cmp	r2, #1
 800f39e:	dc23      	bgt.n	800f3e8 <_strtod_l+0x500>
 800f3a0:	b108      	cbz	r0, 800f3a6 <_strtod_l+0x4be>
 800f3a2:	ec5b ab17 	vmov	sl, fp, d7
 800f3a6:	4a2c      	ldr	r2, [pc, #176]	@ (800f458 <_strtod_l+0x570>)
 800f3a8:	482c      	ldr	r0, [pc, #176]	@ (800f45c <_strtod_l+0x574>)
 800f3aa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f3ae:	ed92 7b00 	vldr	d7, [r2]
 800f3b2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f3b6:	ec4b ab16 	vmov	d6, sl, fp
 800f3ba:	4a29      	ldr	r2, [pc, #164]	@ (800f460 <_strtod_l+0x578>)
 800f3bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f3c0:	ee17 1a90 	vmov	r1, s15
 800f3c4:	400a      	ands	r2, r1
 800f3c6:	4282      	cmp	r2, r0
 800f3c8:	ec5b ab17 	vmov	sl, fp, d7
 800f3cc:	d898      	bhi.n	800f300 <_strtod_l+0x418>
 800f3ce:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800f3d2:	4282      	cmp	r2, r0
 800f3d4:	bf86      	itte	hi
 800f3d6:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800f464 <_strtod_l+0x57c>
 800f3da:	f04f 3aff 	movhi.w	sl, #4294967295
 800f3de:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	9206      	str	r2, [sp, #24]
 800f3e6:	e076      	b.n	800f4d6 <_strtod_l+0x5ee>
 800f3e8:	f012 0f01 	tst.w	r2, #1
 800f3ec:	d004      	beq.n	800f3f8 <_strtod_l+0x510>
 800f3ee:	ed96 6b00 	vldr	d6, [r6]
 800f3f2:	2001      	movs	r0, #1
 800f3f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f3f8:	3101      	adds	r1, #1
 800f3fa:	1052      	asrs	r2, r2, #1
 800f3fc:	3608      	adds	r6, #8
 800f3fe:	e7cd      	b.n	800f39c <_strtod_l+0x4b4>
 800f400:	d0ef      	beq.n	800f3e2 <_strtod_l+0x4fa>
 800f402:	4252      	negs	r2, r2
 800f404:	f012 000f 	ands.w	r0, r2, #15
 800f408:	d00a      	beq.n	800f420 <_strtod_l+0x538>
 800f40a:	4912      	ldr	r1, [pc, #72]	@ (800f454 <_strtod_l+0x56c>)
 800f40c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f410:	ed91 7b00 	vldr	d7, [r1]
 800f414:	ec4b ab16 	vmov	d6, sl, fp
 800f418:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f41c:	ec5b ab17 	vmov	sl, fp, d7
 800f420:	1112      	asrs	r2, r2, #4
 800f422:	d0de      	beq.n	800f3e2 <_strtod_l+0x4fa>
 800f424:	2a1f      	cmp	r2, #31
 800f426:	dd1f      	ble.n	800f468 <_strtod_l+0x580>
 800f428:	2400      	movs	r4, #0
 800f42a:	4625      	mov	r5, r4
 800f42c:	9407      	str	r4, [sp, #28]
 800f42e:	4626      	mov	r6, r4
 800f430:	9a05      	ldr	r2, [sp, #20]
 800f432:	2322      	movs	r3, #34	@ 0x22
 800f434:	f04f 0a00 	mov.w	sl, #0
 800f438:	f04f 0b00 	mov.w	fp, #0
 800f43c:	6013      	str	r3, [r2, #0]
 800f43e:	e76a      	b.n	800f316 <_strtod_l+0x42e>
 800f440:	080113f6 	.word	0x080113f6
 800f444:	080116a4 	.word	0x080116a4
 800f448:	080113ee 	.word	0x080113ee
 800f44c:	080114d2 	.word	0x080114d2
 800f450:	080114ce 	.word	0x080114ce
 800f454:	080115d8 	.word	0x080115d8
 800f458:	080115b0 	.word	0x080115b0
 800f45c:	7ca00000 	.word	0x7ca00000
 800f460:	7ff00000 	.word	0x7ff00000
 800f464:	7fefffff 	.word	0x7fefffff
 800f468:	f012 0110 	ands.w	r1, r2, #16
 800f46c:	bf18      	it	ne
 800f46e:	216a      	movne	r1, #106	@ 0x6a
 800f470:	9106      	str	r1, [sp, #24]
 800f472:	ec4b ab17 	vmov	d7, sl, fp
 800f476:	49b0      	ldr	r1, [pc, #704]	@ (800f738 <_strtod_l+0x850>)
 800f478:	2000      	movs	r0, #0
 800f47a:	07d6      	lsls	r6, r2, #31
 800f47c:	d504      	bpl.n	800f488 <_strtod_l+0x5a0>
 800f47e:	ed91 6b00 	vldr	d6, [r1]
 800f482:	2001      	movs	r0, #1
 800f484:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f488:	1052      	asrs	r2, r2, #1
 800f48a:	f101 0108 	add.w	r1, r1, #8
 800f48e:	d1f4      	bne.n	800f47a <_strtod_l+0x592>
 800f490:	b108      	cbz	r0, 800f496 <_strtod_l+0x5ae>
 800f492:	ec5b ab17 	vmov	sl, fp, d7
 800f496:	9a06      	ldr	r2, [sp, #24]
 800f498:	b1b2      	cbz	r2, 800f4c8 <_strtod_l+0x5e0>
 800f49a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800f49e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800f4a2:	2a00      	cmp	r2, #0
 800f4a4:	4658      	mov	r0, fp
 800f4a6:	dd0f      	ble.n	800f4c8 <_strtod_l+0x5e0>
 800f4a8:	2a1f      	cmp	r2, #31
 800f4aa:	dd55      	ble.n	800f558 <_strtod_l+0x670>
 800f4ac:	2a34      	cmp	r2, #52	@ 0x34
 800f4ae:	bfde      	ittt	le
 800f4b0:	f04f 32ff 	movle.w	r2, #4294967295
 800f4b4:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800f4b8:	408a      	lslle	r2, r1
 800f4ba:	f04f 0a00 	mov.w	sl, #0
 800f4be:	bfcc      	ite	gt
 800f4c0:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f4c4:	ea02 0b00 	andle.w	fp, r2, r0
 800f4c8:	ec4b ab17 	vmov	d7, sl, fp
 800f4cc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f4d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4d4:	d0a8      	beq.n	800f428 <_strtod_l+0x540>
 800f4d6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f4d8:	9805      	ldr	r0, [sp, #20]
 800f4da:	f8cd 9000 	str.w	r9, [sp]
 800f4de:	462a      	mov	r2, r5
 800f4e0:	f7ff f8e0 	bl	800e6a4 <__s2b>
 800f4e4:	9007      	str	r0, [sp, #28]
 800f4e6:	2800      	cmp	r0, #0
 800f4e8:	f43f af0a 	beq.w	800f300 <_strtod_l+0x418>
 800f4ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4ee:	1b3f      	subs	r7, r7, r4
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	bfb4      	ite	lt
 800f4f4:	463b      	movlt	r3, r7
 800f4f6:	2300      	movge	r3, #0
 800f4f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800f4fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4fc:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800f728 <_strtod_l+0x840>
 800f500:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f504:	2400      	movs	r4, #0
 800f506:	930d      	str	r3, [sp, #52]	@ 0x34
 800f508:	4625      	mov	r5, r4
 800f50a:	9b07      	ldr	r3, [sp, #28]
 800f50c:	9805      	ldr	r0, [sp, #20]
 800f50e:	6859      	ldr	r1, [r3, #4]
 800f510:	f7ff f820 	bl	800e554 <_Balloc>
 800f514:	4606      	mov	r6, r0
 800f516:	2800      	cmp	r0, #0
 800f518:	f43f aef6 	beq.w	800f308 <_strtod_l+0x420>
 800f51c:	9b07      	ldr	r3, [sp, #28]
 800f51e:	691a      	ldr	r2, [r3, #16]
 800f520:	ec4b ab19 	vmov	d9, sl, fp
 800f524:	3202      	adds	r2, #2
 800f526:	f103 010c 	add.w	r1, r3, #12
 800f52a:	0092      	lsls	r2, r2, #2
 800f52c:	300c      	adds	r0, #12
 800f52e:	f7fe f900 	bl	800d732 <memcpy>
 800f532:	eeb0 0b49 	vmov.f64	d0, d9
 800f536:	9805      	ldr	r0, [sp, #20]
 800f538:	aa14      	add	r2, sp, #80	@ 0x50
 800f53a:	a913      	add	r1, sp, #76	@ 0x4c
 800f53c:	f7ff fbee 	bl	800ed1c <__d2b>
 800f540:	9012      	str	r0, [sp, #72]	@ 0x48
 800f542:	2800      	cmp	r0, #0
 800f544:	f43f aee0 	beq.w	800f308 <_strtod_l+0x420>
 800f548:	9805      	ldr	r0, [sp, #20]
 800f54a:	2101      	movs	r1, #1
 800f54c:	f7ff f940 	bl	800e7d0 <__i2b>
 800f550:	4605      	mov	r5, r0
 800f552:	b940      	cbnz	r0, 800f566 <_strtod_l+0x67e>
 800f554:	2500      	movs	r5, #0
 800f556:	e6d7      	b.n	800f308 <_strtod_l+0x420>
 800f558:	f04f 31ff 	mov.w	r1, #4294967295
 800f55c:	fa01 f202 	lsl.w	r2, r1, r2
 800f560:	ea02 0a0a 	and.w	sl, r2, sl
 800f564:	e7b0      	b.n	800f4c8 <_strtod_l+0x5e0>
 800f566:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800f568:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f56a:	2f00      	cmp	r7, #0
 800f56c:	bfab      	itete	ge
 800f56e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800f570:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800f572:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800f576:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800f57a:	bfac      	ite	ge
 800f57c:	eb07 0903 	addge.w	r9, r7, r3
 800f580:	eba3 0807 	sublt.w	r8, r3, r7
 800f584:	9b06      	ldr	r3, [sp, #24]
 800f586:	1aff      	subs	r7, r7, r3
 800f588:	4417      	add	r7, r2
 800f58a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800f58e:	4a6b      	ldr	r2, [pc, #428]	@ (800f73c <_strtod_l+0x854>)
 800f590:	3f01      	subs	r7, #1
 800f592:	4297      	cmp	r7, r2
 800f594:	da51      	bge.n	800f63a <_strtod_l+0x752>
 800f596:	1bd1      	subs	r1, r2, r7
 800f598:	291f      	cmp	r1, #31
 800f59a:	eba3 0301 	sub.w	r3, r3, r1
 800f59e:	f04f 0201 	mov.w	r2, #1
 800f5a2:	dc3e      	bgt.n	800f622 <_strtod_l+0x73a>
 800f5a4:	408a      	lsls	r2, r1
 800f5a6:	920c      	str	r2, [sp, #48]	@ 0x30
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f5ac:	eb09 0703 	add.w	r7, r9, r3
 800f5b0:	4498      	add	r8, r3
 800f5b2:	9b06      	ldr	r3, [sp, #24]
 800f5b4:	45b9      	cmp	r9, r7
 800f5b6:	4498      	add	r8, r3
 800f5b8:	464b      	mov	r3, r9
 800f5ba:	bfa8      	it	ge
 800f5bc:	463b      	movge	r3, r7
 800f5be:	4543      	cmp	r3, r8
 800f5c0:	bfa8      	it	ge
 800f5c2:	4643      	movge	r3, r8
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	bfc2      	ittt	gt
 800f5c8:	1aff      	subgt	r7, r7, r3
 800f5ca:	eba8 0803 	subgt.w	r8, r8, r3
 800f5ce:	eba9 0903 	subgt.w	r9, r9, r3
 800f5d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	dd16      	ble.n	800f606 <_strtod_l+0x71e>
 800f5d8:	4629      	mov	r1, r5
 800f5da:	9805      	ldr	r0, [sp, #20]
 800f5dc:	461a      	mov	r2, r3
 800f5de:	f7ff f9b7 	bl	800e950 <__pow5mult>
 800f5e2:	4605      	mov	r5, r0
 800f5e4:	2800      	cmp	r0, #0
 800f5e6:	d0b5      	beq.n	800f554 <_strtod_l+0x66c>
 800f5e8:	4601      	mov	r1, r0
 800f5ea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f5ec:	9805      	ldr	r0, [sp, #20]
 800f5ee:	f7ff f905 	bl	800e7fc <__multiply>
 800f5f2:	900f      	str	r0, [sp, #60]	@ 0x3c
 800f5f4:	2800      	cmp	r0, #0
 800f5f6:	f43f ae87 	beq.w	800f308 <_strtod_l+0x420>
 800f5fa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f5fc:	9805      	ldr	r0, [sp, #20]
 800f5fe:	f7fe ffe9 	bl	800e5d4 <_Bfree>
 800f602:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f604:	9312      	str	r3, [sp, #72]	@ 0x48
 800f606:	2f00      	cmp	r7, #0
 800f608:	dc1b      	bgt.n	800f642 <_strtod_l+0x75a>
 800f60a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	dd21      	ble.n	800f654 <_strtod_l+0x76c>
 800f610:	4631      	mov	r1, r6
 800f612:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f614:	9805      	ldr	r0, [sp, #20]
 800f616:	f7ff f99b 	bl	800e950 <__pow5mult>
 800f61a:	4606      	mov	r6, r0
 800f61c:	b9d0      	cbnz	r0, 800f654 <_strtod_l+0x76c>
 800f61e:	2600      	movs	r6, #0
 800f620:	e672      	b.n	800f308 <_strtod_l+0x420>
 800f622:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800f626:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800f62a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800f62e:	37e2      	adds	r7, #226	@ 0xe2
 800f630:	fa02 f107 	lsl.w	r1, r2, r7
 800f634:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f636:	920c      	str	r2, [sp, #48]	@ 0x30
 800f638:	e7b8      	b.n	800f5ac <_strtod_l+0x6c4>
 800f63a:	2200      	movs	r2, #0
 800f63c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f63e:	2201      	movs	r2, #1
 800f640:	e7f9      	b.n	800f636 <_strtod_l+0x74e>
 800f642:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f644:	9805      	ldr	r0, [sp, #20]
 800f646:	463a      	mov	r2, r7
 800f648:	f7ff f9dc 	bl	800ea04 <__lshift>
 800f64c:	9012      	str	r0, [sp, #72]	@ 0x48
 800f64e:	2800      	cmp	r0, #0
 800f650:	d1db      	bne.n	800f60a <_strtod_l+0x722>
 800f652:	e659      	b.n	800f308 <_strtod_l+0x420>
 800f654:	f1b8 0f00 	cmp.w	r8, #0
 800f658:	dd07      	ble.n	800f66a <_strtod_l+0x782>
 800f65a:	4631      	mov	r1, r6
 800f65c:	9805      	ldr	r0, [sp, #20]
 800f65e:	4642      	mov	r2, r8
 800f660:	f7ff f9d0 	bl	800ea04 <__lshift>
 800f664:	4606      	mov	r6, r0
 800f666:	2800      	cmp	r0, #0
 800f668:	d0d9      	beq.n	800f61e <_strtod_l+0x736>
 800f66a:	f1b9 0f00 	cmp.w	r9, #0
 800f66e:	dd08      	ble.n	800f682 <_strtod_l+0x79a>
 800f670:	4629      	mov	r1, r5
 800f672:	9805      	ldr	r0, [sp, #20]
 800f674:	464a      	mov	r2, r9
 800f676:	f7ff f9c5 	bl	800ea04 <__lshift>
 800f67a:	4605      	mov	r5, r0
 800f67c:	2800      	cmp	r0, #0
 800f67e:	f43f ae43 	beq.w	800f308 <_strtod_l+0x420>
 800f682:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f684:	9805      	ldr	r0, [sp, #20]
 800f686:	4632      	mov	r2, r6
 800f688:	f7ff fa44 	bl	800eb14 <__mdiff>
 800f68c:	4604      	mov	r4, r0
 800f68e:	2800      	cmp	r0, #0
 800f690:	f43f ae3a 	beq.w	800f308 <_strtod_l+0x420>
 800f694:	2300      	movs	r3, #0
 800f696:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800f69a:	60c3      	str	r3, [r0, #12]
 800f69c:	4629      	mov	r1, r5
 800f69e:	f7ff fa1d 	bl	800eadc <__mcmp>
 800f6a2:	2800      	cmp	r0, #0
 800f6a4:	da4e      	bge.n	800f744 <_strtod_l+0x85c>
 800f6a6:	ea58 080a 	orrs.w	r8, r8, sl
 800f6aa:	d174      	bne.n	800f796 <_strtod_l+0x8ae>
 800f6ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d170      	bne.n	800f796 <_strtod_l+0x8ae>
 800f6b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f6b8:	0d1b      	lsrs	r3, r3, #20
 800f6ba:	051b      	lsls	r3, r3, #20
 800f6bc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f6c0:	d969      	bls.n	800f796 <_strtod_l+0x8ae>
 800f6c2:	6963      	ldr	r3, [r4, #20]
 800f6c4:	b913      	cbnz	r3, 800f6cc <_strtod_l+0x7e4>
 800f6c6:	6923      	ldr	r3, [r4, #16]
 800f6c8:	2b01      	cmp	r3, #1
 800f6ca:	dd64      	ble.n	800f796 <_strtod_l+0x8ae>
 800f6cc:	4621      	mov	r1, r4
 800f6ce:	2201      	movs	r2, #1
 800f6d0:	9805      	ldr	r0, [sp, #20]
 800f6d2:	f7ff f997 	bl	800ea04 <__lshift>
 800f6d6:	4629      	mov	r1, r5
 800f6d8:	4604      	mov	r4, r0
 800f6da:	f7ff f9ff 	bl	800eadc <__mcmp>
 800f6de:	2800      	cmp	r0, #0
 800f6e0:	dd59      	ble.n	800f796 <_strtod_l+0x8ae>
 800f6e2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f6e6:	9a06      	ldr	r2, [sp, #24]
 800f6e8:	0d1b      	lsrs	r3, r3, #20
 800f6ea:	051b      	lsls	r3, r3, #20
 800f6ec:	2a00      	cmp	r2, #0
 800f6ee:	d070      	beq.n	800f7d2 <_strtod_l+0x8ea>
 800f6f0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f6f4:	d86d      	bhi.n	800f7d2 <_strtod_l+0x8ea>
 800f6f6:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f6fa:	f67f ae99 	bls.w	800f430 <_strtod_l+0x548>
 800f6fe:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800f730 <_strtod_l+0x848>
 800f702:	ec4b ab16 	vmov	d6, sl, fp
 800f706:	4b0e      	ldr	r3, [pc, #56]	@ (800f740 <_strtod_l+0x858>)
 800f708:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f70c:	ee17 2a90 	vmov	r2, s15
 800f710:	4013      	ands	r3, r2
 800f712:	ec5b ab17 	vmov	sl, fp, d7
 800f716:	2b00      	cmp	r3, #0
 800f718:	f47f ae01 	bne.w	800f31e <_strtod_l+0x436>
 800f71c:	9a05      	ldr	r2, [sp, #20]
 800f71e:	2322      	movs	r3, #34	@ 0x22
 800f720:	6013      	str	r3, [r2, #0]
 800f722:	e5fc      	b.n	800f31e <_strtod_l+0x436>
 800f724:	f3af 8000 	nop.w
 800f728:	ffc00000 	.word	0xffc00000
 800f72c:	41dfffff 	.word	0x41dfffff
 800f730:	00000000 	.word	0x00000000
 800f734:	39500000 	.word	0x39500000
 800f738:	080116d0 	.word	0x080116d0
 800f73c:	fffffc02 	.word	0xfffffc02
 800f740:	7ff00000 	.word	0x7ff00000
 800f744:	46d9      	mov	r9, fp
 800f746:	d15d      	bne.n	800f804 <_strtod_l+0x91c>
 800f748:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f74c:	f1b8 0f00 	cmp.w	r8, #0
 800f750:	d02a      	beq.n	800f7a8 <_strtod_l+0x8c0>
 800f752:	4aab      	ldr	r2, [pc, #684]	@ (800fa00 <_strtod_l+0xb18>)
 800f754:	4293      	cmp	r3, r2
 800f756:	d12a      	bne.n	800f7ae <_strtod_l+0x8c6>
 800f758:	9b06      	ldr	r3, [sp, #24]
 800f75a:	4652      	mov	r2, sl
 800f75c:	b1fb      	cbz	r3, 800f79e <_strtod_l+0x8b6>
 800f75e:	4ba9      	ldr	r3, [pc, #676]	@ (800fa04 <_strtod_l+0xb1c>)
 800f760:	ea0b 0303 	and.w	r3, fp, r3
 800f764:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f768:	f04f 31ff 	mov.w	r1, #4294967295
 800f76c:	d81a      	bhi.n	800f7a4 <_strtod_l+0x8bc>
 800f76e:	0d1b      	lsrs	r3, r3, #20
 800f770:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f774:	fa01 f303 	lsl.w	r3, r1, r3
 800f778:	429a      	cmp	r2, r3
 800f77a:	d118      	bne.n	800f7ae <_strtod_l+0x8c6>
 800f77c:	4ba2      	ldr	r3, [pc, #648]	@ (800fa08 <_strtod_l+0xb20>)
 800f77e:	4599      	cmp	r9, r3
 800f780:	d102      	bne.n	800f788 <_strtod_l+0x8a0>
 800f782:	3201      	adds	r2, #1
 800f784:	f43f adc0 	beq.w	800f308 <_strtod_l+0x420>
 800f788:	4b9e      	ldr	r3, [pc, #632]	@ (800fa04 <_strtod_l+0xb1c>)
 800f78a:	ea09 0303 	and.w	r3, r9, r3
 800f78e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800f792:	f04f 0a00 	mov.w	sl, #0
 800f796:	9b06      	ldr	r3, [sp, #24]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d1b0      	bne.n	800f6fe <_strtod_l+0x816>
 800f79c:	e5bf      	b.n	800f31e <_strtod_l+0x436>
 800f79e:	f04f 33ff 	mov.w	r3, #4294967295
 800f7a2:	e7e9      	b.n	800f778 <_strtod_l+0x890>
 800f7a4:	460b      	mov	r3, r1
 800f7a6:	e7e7      	b.n	800f778 <_strtod_l+0x890>
 800f7a8:	ea53 030a 	orrs.w	r3, r3, sl
 800f7ac:	d099      	beq.n	800f6e2 <_strtod_l+0x7fa>
 800f7ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f7b0:	b1c3      	cbz	r3, 800f7e4 <_strtod_l+0x8fc>
 800f7b2:	ea13 0f09 	tst.w	r3, r9
 800f7b6:	d0ee      	beq.n	800f796 <_strtod_l+0x8ae>
 800f7b8:	9a06      	ldr	r2, [sp, #24]
 800f7ba:	4650      	mov	r0, sl
 800f7bc:	4659      	mov	r1, fp
 800f7be:	f1b8 0f00 	cmp.w	r8, #0
 800f7c2:	d013      	beq.n	800f7ec <_strtod_l+0x904>
 800f7c4:	f7ff fb75 	bl	800eeb2 <sulp>
 800f7c8:	ee39 7b00 	vadd.f64	d7, d9, d0
 800f7cc:	ec5b ab17 	vmov	sl, fp, d7
 800f7d0:	e7e1      	b.n	800f796 <_strtod_l+0x8ae>
 800f7d2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f7d6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f7da:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f7de:	f04f 3aff 	mov.w	sl, #4294967295
 800f7e2:	e7d8      	b.n	800f796 <_strtod_l+0x8ae>
 800f7e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f7e6:	ea13 0f0a 	tst.w	r3, sl
 800f7ea:	e7e4      	b.n	800f7b6 <_strtod_l+0x8ce>
 800f7ec:	f7ff fb61 	bl	800eeb2 <sulp>
 800f7f0:	ee39 0b40 	vsub.f64	d0, d9, d0
 800f7f4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800f7f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7fc:	ec5b ab10 	vmov	sl, fp, d0
 800f800:	d1c9      	bne.n	800f796 <_strtod_l+0x8ae>
 800f802:	e615      	b.n	800f430 <_strtod_l+0x548>
 800f804:	4629      	mov	r1, r5
 800f806:	4620      	mov	r0, r4
 800f808:	f7ff fae0 	bl	800edcc <__ratio>
 800f80c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800f810:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800f814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f818:	d85d      	bhi.n	800f8d6 <_strtod_l+0x9ee>
 800f81a:	f1b8 0f00 	cmp.w	r8, #0
 800f81e:	d164      	bne.n	800f8ea <_strtod_l+0xa02>
 800f820:	f1ba 0f00 	cmp.w	sl, #0
 800f824:	d14b      	bne.n	800f8be <_strtod_l+0x9d6>
 800f826:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f82a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d160      	bne.n	800f8f4 <_strtod_l+0xa0c>
 800f832:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800f836:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800f83a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f83e:	d401      	bmi.n	800f844 <_strtod_l+0x95c>
 800f840:	ee20 8b08 	vmul.f64	d8, d0, d8
 800f844:	eeb1 ab48 	vneg.f64	d10, d8
 800f848:	486e      	ldr	r0, [pc, #440]	@ (800fa04 <_strtod_l+0xb1c>)
 800f84a:	4970      	ldr	r1, [pc, #448]	@ (800fa0c <_strtod_l+0xb24>)
 800f84c:	ea09 0700 	and.w	r7, r9, r0
 800f850:	428f      	cmp	r7, r1
 800f852:	ec53 2b1a 	vmov	r2, r3, d10
 800f856:	d17d      	bne.n	800f954 <_strtod_l+0xa6c>
 800f858:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800f85c:	ec4b ab1c 	vmov	d12, sl, fp
 800f860:	eeb0 0b4c 	vmov.f64	d0, d12
 800f864:	f7ff f9ea 	bl	800ec3c <__ulp>
 800f868:	4866      	ldr	r0, [pc, #408]	@ (800fa04 <_strtod_l+0xb1c>)
 800f86a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800f86e:	ee1c 3a90 	vmov	r3, s25
 800f872:	4a67      	ldr	r2, [pc, #412]	@ (800fa10 <_strtod_l+0xb28>)
 800f874:	ea03 0100 	and.w	r1, r3, r0
 800f878:	4291      	cmp	r1, r2
 800f87a:	ec5b ab1c 	vmov	sl, fp, d12
 800f87e:	d93c      	bls.n	800f8fa <_strtod_l+0xa12>
 800f880:	ee19 2a90 	vmov	r2, s19
 800f884:	4b60      	ldr	r3, [pc, #384]	@ (800fa08 <_strtod_l+0xb20>)
 800f886:	429a      	cmp	r2, r3
 800f888:	d104      	bne.n	800f894 <_strtod_l+0x9ac>
 800f88a:	ee19 3a10 	vmov	r3, s18
 800f88e:	3301      	adds	r3, #1
 800f890:	f43f ad3a 	beq.w	800f308 <_strtod_l+0x420>
 800f894:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800fa08 <_strtod_l+0xb20>
 800f898:	f04f 3aff 	mov.w	sl, #4294967295
 800f89c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f89e:	9805      	ldr	r0, [sp, #20]
 800f8a0:	f7fe fe98 	bl	800e5d4 <_Bfree>
 800f8a4:	9805      	ldr	r0, [sp, #20]
 800f8a6:	4631      	mov	r1, r6
 800f8a8:	f7fe fe94 	bl	800e5d4 <_Bfree>
 800f8ac:	9805      	ldr	r0, [sp, #20]
 800f8ae:	4629      	mov	r1, r5
 800f8b0:	f7fe fe90 	bl	800e5d4 <_Bfree>
 800f8b4:	9805      	ldr	r0, [sp, #20]
 800f8b6:	4621      	mov	r1, r4
 800f8b8:	f7fe fe8c 	bl	800e5d4 <_Bfree>
 800f8bc:	e625      	b.n	800f50a <_strtod_l+0x622>
 800f8be:	f1ba 0f01 	cmp.w	sl, #1
 800f8c2:	d103      	bne.n	800f8cc <_strtod_l+0x9e4>
 800f8c4:	f1bb 0f00 	cmp.w	fp, #0
 800f8c8:	f43f adb2 	beq.w	800f430 <_strtod_l+0x548>
 800f8cc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800f8d0:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800f8d4:	e7b8      	b.n	800f848 <_strtod_l+0x960>
 800f8d6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800f8da:	ee20 8b08 	vmul.f64	d8, d0, d8
 800f8de:	f1b8 0f00 	cmp.w	r8, #0
 800f8e2:	d0af      	beq.n	800f844 <_strtod_l+0x95c>
 800f8e4:	eeb0 ab48 	vmov.f64	d10, d8
 800f8e8:	e7ae      	b.n	800f848 <_strtod_l+0x960>
 800f8ea:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800f8ee:	eeb0 8b4a 	vmov.f64	d8, d10
 800f8f2:	e7a9      	b.n	800f848 <_strtod_l+0x960>
 800f8f4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800f8f8:	e7a6      	b.n	800f848 <_strtod_l+0x960>
 800f8fa:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f8fe:	9b06      	ldr	r3, [sp, #24]
 800f900:	46d9      	mov	r9, fp
 800f902:	2b00      	cmp	r3, #0
 800f904:	d1ca      	bne.n	800f89c <_strtod_l+0x9b4>
 800f906:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f90a:	0d1b      	lsrs	r3, r3, #20
 800f90c:	051b      	lsls	r3, r3, #20
 800f90e:	429f      	cmp	r7, r3
 800f910:	d1c4      	bne.n	800f89c <_strtod_l+0x9b4>
 800f912:	ec51 0b18 	vmov	r0, r1, d8
 800f916:	f7f0 ff1f 	bl	8000758 <__aeabi_d2lz>
 800f91a:	f7f0 fe87 	bl	800062c <__aeabi_l2d>
 800f91e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800f922:	ec41 0b17 	vmov	d7, r0, r1
 800f926:	ea49 090a 	orr.w	r9, r9, sl
 800f92a:	ea59 0908 	orrs.w	r9, r9, r8
 800f92e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800f932:	d03c      	beq.n	800f9ae <_strtod_l+0xac6>
 800f934:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800f9e8 <_strtod_l+0xb00>
 800f938:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f93c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f940:	f53f aced 	bmi.w	800f31e <_strtod_l+0x436>
 800f944:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800f9f0 <_strtod_l+0xb08>
 800f948:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f94c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f950:	dda4      	ble.n	800f89c <_strtod_l+0x9b4>
 800f952:	e4e4      	b.n	800f31e <_strtod_l+0x436>
 800f954:	9906      	ldr	r1, [sp, #24]
 800f956:	b1e1      	cbz	r1, 800f992 <_strtod_l+0xaaa>
 800f958:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800f95c:	d819      	bhi.n	800f992 <_strtod_l+0xaaa>
 800f95e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800f962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f966:	d811      	bhi.n	800f98c <_strtod_l+0xaa4>
 800f968:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800f96c:	ee18 3a10 	vmov	r3, s16
 800f970:	2b01      	cmp	r3, #1
 800f972:	bf38      	it	cc
 800f974:	2301      	movcc	r3, #1
 800f976:	ee08 3a10 	vmov	s16, r3
 800f97a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800f97e:	f1b8 0f00 	cmp.w	r8, #0
 800f982:	d111      	bne.n	800f9a8 <_strtod_l+0xac0>
 800f984:	eeb1 7b48 	vneg.f64	d7, d8
 800f988:	ec53 2b17 	vmov	r2, r3, d7
 800f98c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800f990:	1bcb      	subs	r3, r1, r7
 800f992:	eeb0 0b49 	vmov.f64	d0, d9
 800f996:	ec43 2b1a 	vmov	d10, r2, r3
 800f99a:	f7ff f94f 	bl	800ec3c <__ulp>
 800f99e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800f9a2:	ec5b ab19 	vmov	sl, fp, d9
 800f9a6:	e7aa      	b.n	800f8fe <_strtod_l+0xa16>
 800f9a8:	eeb0 7b48 	vmov.f64	d7, d8
 800f9ac:	e7ec      	b.n	800f988 <_strtod_l+0xaa0>
 800f9ae:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800f9f8 <_strtod_l+0xb10>
 800f9b2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9ba:	f57f af6f 	bpl.w	800f89c <_strtod_l+0x9b4>
 800f9be:	e4ae      	b.n	800f31e <_strtod_l+0x436>
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	9308      	str	r3, [sp, #32]
 800f9c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f9c6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f9c8:	6013      	str	r3, [r2, #0]
 800f9ca:	f7ff bacc 	b.w	800ef66 <_strtod_l+0x7e>
 800f9ce:	2a65      	cmp	r2, #101	@ 0x65
 800f9d0:	f43f abbc 	beq.w	800f14c <_strtod_l+0x264>
 800f9d4:	2a45      	cmp	r2, #69	@ 0x45
 800f9d6:	f43f abb9 	beq.w	800f14c <_strtod_l+0x264>
 800f9da:	2301      	movs	r3, #1
 800f9dc:	9306      	str	r3, [sp, #24]
 800f9de:	f7ff bbf0 	b.w	800f1c2 <_strtod_l+0x2da>
 800f9e2:	bf00      	nop
 800f9e4:	f3af 8000 	nop.w
 800f9e8:	94a03595 	.word	0x94a03595
 800f9ec:	3fdfffff 	.word	0x3fdfffff
 800f9f0:	35afe535 	.word	0x35afe535
 800f9f4:	3fe00000 	.word	0x3fe00000
 800f9f8:	94a03595 	.word	0x94a03595
 800f9fc:	3fcfffff 	.word	0x3fcfffff
 800fa00:	000fffff 	.word	0x000fffff
 800fa04:	7ff00000 	.word	0x7ff00000
 800fa08:	7fefffff 	.word	0x7fefffff
 800fa0c:	7fe00000 	.word	0x7fe00000
 800fa10:	7c9fffff 	.word	0x7c9fffff

0800fa14 <_strtod_r>:
 800fa14:	4b01      	ldr	r3, [pc, #4]	@ (800fa1c <_strtod_r+0x8>)
 800fa16:	f7ff ba67 	b.w	800eee8 <_strtod_l>
 800fa1a:	bf00      	nop
 800fa1c:	200002ac 	.word	0x200002ac

0800fa20 <__ssputs_r>:
 800fa20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa24:	688e      	ldr	r6, [r1, #8]
 800fa26:	461f      	mov	r7, r3
 800fa28:	42be      	cmp	r6, r7
 800fa2a:	680b      	ldr	r3, [r1, #0]
 800fa2c:	4682      	mov	sl, r0
 800fa2e:	460c      	mov	r4, r1
 800fa30:	4690      	mov	r8, r2
 800fa32:	d82d      	bhi.n	800fa90 <__ssputs_r+0x70>
 800fa34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fa38:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fa3c:	d026      	beq.n	800fa8c <__ssputs_r+0x6c>
 800fa3e:	6965      	ldr	r5, [r4, #20]
 800fa40:	6909      	ldr	r1, [r1, #16]
 800fa42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fa46:	eba3 0901 	sub.w	r9, r3, r1
 800fa4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fa4e:	1c7b      	adds	r3, r7, #1
 800fa50:	444b      	add	r3, r9
 800fa52:	106d      	asrs	r5, r5, #1
 800fa54:	429d      	cmp	r5, r3
 800fa56:	bf38      	it	cc
 800fa58:	461d      	movcc	r5, r3
 800fa5a:	0553      	lsls	r3, r2, #21
 800fa5c:	d527      	bpl.n	800faae <__ssputs_r+0x8e>
 800fa5e:	4629      	mov	r1, r5
 800fa60:	f7fe fcec 	bl	800e43c <_malloc_r>
 800fa64:	4606      	mov	r6, r0
 800fa66:	b360      	cbz	r0, 800fac2 <__ssputs_r+0xa2>
 800fa68:	6921      	ldr	r1, [r4, #16]
 800fa6a:	464a      	mov	r2, r9
 800fa6c:	f7fd fe61 	bl	800d732 <memcpy>
 800fa70:	89a3      	ldrh	r3, [r4, #12]
 800fa72:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fa76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fa7a:	81a3      	strh	r3, [r4, #12]
 800fa7c:	6126      	str	r6, [r4, #16]
 800fa7e:	6165      	str	r5, [r4, #20]
 800fa80:	444e      	add	r6, r9
 800fa82:	eba5 0509 	sub.w	r5, r5, r9
 800fa86:	6026      	str	r6, [r4, #0]
 800fa88:	60a5      	str	r5, [r4, #8]
 800fa8a:	463e      	mov	r6, r7
 800fa8c:	42be      	cmp	r6, r7
 800fa8e:	d900      	bls.n	800fa92 <__ssputs_r+0x72>
 800fa90:	463e      	mov	r6, r7
 800fa92:	6820      	ldr	r0, [r4, #0]
 800fa94:	4632      	mov	r2, r6
 800fa96:	4641      	mov	r1, r8
 800fa98:	f000 fb7c 	bl	8010194 <memmove>
 800fa9c:	68a3      	ldr	r3, [r4, #8]
 800fa9e:	1b9b      	subs	r3, r3, r6
 800faa0:	60a3      	str	r3, [r4, #8]
 800faa2:	6823      	ldr	r3, [r4, #0]
 800faa4:	4433      	add	r3, r6
 800faa6:	6023      	str	r3, [r4, #0]
 800faa8:	2000      	movs	r0, #0
 800faaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800faae:	462a      	mov	r2, r5
 800fab0:	f000 ff2b 	bl	801090a <_realloc_r>
 800fab4:	4606      	mov	r6, r0
 800fab6:	2800      	cmp	r0, #0
 800fab8:	d1e0      	bne.n	800fa7c <__ssputs_r+0x5c>
 800faba:	6921      	ldr	r1, [r4, #16]
 800fabc:	4650      	mov	r0, sl
 800fabe:	f7fe fc49 	bl	800e354 <_free_r>
 800fac2:	230c      	movs	r3, #12
 800fac4:	f8ca 3000 	str.w	r3, [sl]
 800fac8:	89a3      	ldrh	r3, [r4, #12]
 800faca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800face:	81a3      	strh	r3, [r4, #12]
 800fad0:	f04f 30ff 	mov.w	r0, #4294967295
 800fad4:	e7e9      	b.n	800faaa <__ssputs_r+0x8a>
	...

0800fad8 <_svfiprintf_r>:
 800fad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fadc:	4698      	mov	r8, r3
 800fade:	898b      	ldrh	r3, [r1, #12]
 800fae0:	061b      	lsls	r3, r3, #24
 800fae2:	b09d      	sub	sp, #116	@ 0x74
 800fae4:	4607      	mov	r7, r0
 800fae6:	460d      	mov	r5, r1
 800fae8:	4614      	mov	r4, r2
 800faea:	d510      	bpl.n	800fb0e <_svfiprintf_r+0x36>
 800faec:	690b      	ldr	r3, [r1, #16]
 800faee:	b973      	cbnz	r3, 800fb0e <_svfiprintf_r+0x36>
 800faf0:	2140      	movs	r1, #64	@ 0x40
 800faf2:	f7fe fca3 	bl	800e43c <_malloc_r>
 800faf6:	6028      	str	r0, [r5, #0]
 800faf8:	6128      	str	r0, [r5, #16]
 800fafa:	b930      	cbnz	r0, 800fb0a <_svfiprintf_r+0x32>
 800fafc:	230c      	movs	r3, #12
 800fafe:	603b      	str	r3, [r7, #0]
 800fb00:	f04f 30ff 	mov.w	r0, #4294967295
 800fb04:	b01d      	add	sp, #116	@ 0x74
 800fb06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb0a:	2340      	movs	r3, #64	@ 0x40
 800fb0c:	616b      	str	r3, [r5, #20]
 800fb0e:	2300      	movs	r3, #0
 800fb10:	9309      	str	r3, [sp, #36]	@ 0x24
 800fb12:	2320      	movs	r3, #32
 800fb14:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fb18:	f8cd 800c 	str.w	r8, [sp, #12]
 800fb1c:	2330      	movs	r3, #48	@ 0x30
 800fb1e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fcbc <_svfiprintf_r+0x1e4>
 800fb22:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fb26:	f04f 0901 	mov.w	r9, #1
 800fb2a:	4623      	mov	r3, r4
 800fb2c:	469a      	mov	sl, r3
 800fb2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb32:	b10a      	cbz	r2, 800fb38 <_svfiprintf_r+0x60>
 800fb34:	2a25      	cmp	r2, #37	@ 0x25
 800fb36:	d1f9      	bne.n	800fb2c <_svfiprintf_r+0x54>
 800fb38:	ebba 0b04 	subs.w	fp, sl, r4
 800fb3c:	d00b      	beq.n	800fb56 <_svfiprintf_r+0x7e>
 800fb3e:	465b      	mov	r3, fp
 800fb40:	4622      	mov	r2, r4
 800fb42:	4629      	mov	r1, r5
 800fb44:	4638      	mov	r0, r7
 800fb46:	f7ff ff6b 	bl	800fa20 <__ssputs_r>
 800fb4a:	3001      	adds	r0, #1
 800fb4c:	f000 80a7 	beq.w	800fc9e <_svfiprintf_r+0x1c6>
 800fb50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fb52:	445a      	add	r2, fp
 800fb54:	9209      	str	r2, [sp, #36]	@ 0x24
 800fb56:	f89a 3000 	ldrb.w	r3, [sl]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	f000 809f 	beq.w	800fc9e <_svfiprintf_r+0x1c6>
 800fb60:	2300      	movs	r3, #0
 800fb62:	f04f 32ff 	mov.w	r2, #4294967295
 800fb66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb6a:	f10a 0a01 	add.w	sl, sl, #1
 800fb6e:	9304      	str	r3, [sp, #16]
 800fb70:	9307      	str	r3, [sp, #28]
 800fb72:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fb76:	931a      	str	r3, [sp, #104]	@ 0x68
 800fb78:	4654      	mov	r4, sl
 800fb7a:	2205      	movs	r2, #5
 800fb7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb80:	484e      	ldr	r0, [pc, #312]	@ (800fcbc <_svfiprintf_r+0x1e4>)
 800fb82:	f7f0 fb6d 	bl	8000260 <memchr>
 800fb86:	9a04      	ldr	r2, [sp, #16]
 800fb88:	b9d8      	cbnz	r0, 800fbc2 <_svfiprintf_r+0xea>
 800fb8a:	06d0      	lsls	r0, r2, #27
 800fb8c:	bf44      	itt	mi
 800fb8e:	2320      	movmi	r3, #32
 800fb90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fb94:	0711      	lsls	r1, r2, #28
 800fb96:	bf44      	itt	mi
 800fb98:	232b      	movmi	r3, #43	@ 0x2b
 800fb9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fb9e:	f89a 3000 	ldrb.w	r3, [sl]
 800fba2:	2b2a      	cmp	r3, #42	@ 0x2a
 800fba4:	d015      	beq.n	800fbd2 <_svfiprintf_r+0xfa>
 800fba6:	9a07      	ldr	r2, [sp, #28]
 800fba8:	4654      	mov	r4, sl
 800fbaa:	2000      	movs	r0, #0
 800fbac:	f04f 0c0a 	mov.w	ip, #10
 800fbb0:	4621      	mov	r1, r4
 800fbb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fbb6:	3b30      	subs	r3, #48	@ 0x30
 800fbb8:	2b09      	cmp	r3, #9
 800fbba:	d94b      	bls.n	800fc54 <_svfiprintf_r+0x17c>
 800fbbc:	b1b0      	cbz	r0, 800fbec <_svfiprintf_r+0x114>
 800fbbe:	9207      	str	r2, [sp, #28]
 800fbc0:	e014      	b.n	800fbec <_svfiprintf_r+0x114>
 800fbc2:	eba0 0308 	sub.w	r3, r0, r8
 800fbc6:	fa09 f303 	lsl.w	r3, r9, r3
 800fbca:	4313      	orrs	r3, r2
 800fbcc:	9304      	str	r3, [sp, #16]
 800fbce:	46a2      	mov	sl, r4
 800fbd0:	e7d2      	b.n	800fb78 <_svfiprintf_r+0xa0>
 800fbd2:	9b03      	ldr	r3, [sp, #12]
 800fbd4:	1d19      	adds	r1, r3, #4
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	9103      	str	r1, [sp, #12]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	bfbb      	ittet	lt
 800fbde:	425b      	neglt	r3, r3
 800fbe0:	f042 0202 	orrlt.w	r2, r2, #2
 800fbe4:	9307      	strge	r3, [sp, #28]
 800fbe6:	9307      	strlt	r3, [sp, #28]
 800fbe8:	bfb8      	it	lt
 800fbea:	9204      	strlt	r2, [sp, #16]
 800fbec:	7823      	ldrb	r3, [r4, #0]
 800fbee:	2b2e      	cmp	r3, #46	@ 0x2e
 800fbf0:	d10a      	bne.n	800fc08 <_svfiprintf_r+0x130>
 800fbf2:	7863      	ldrb	r3, [r4, #1]
 800fbf4:	2b2a      	cmp	r3, #42	@ 0x2a
 800fbf6:	d132      	bne.n	800fc5e <_svfiprintf_r+0x186>
 800fbf8:	9b03      	ldr	r3, [sp, #12]
 800fbfa:	1d1a      	adds	r2, r3, #4
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	9203      	str	r2, [sp, #12]
 800fc00:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fc04:	3402      	adds	r4, #2
 800fc06:	9305      	str	r3, [sp, #20]
 800fc08:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fccc <_svfiprintf_r+0x1f4>
 800fc0c:	7821      	ldrb	r1, [r4, #0]
 800fc0e:	2203      	movs	r2, #3
 800fc10:	4650      	mov	r0, sl
 800fc12:	f7f0 fb25 	bl	8000260 <memchr>
 800fc16:	b138      	cbz	r0, 800fc28 <_svfiprintf_r+0x150>
 800fc18:	9b04      	ldr	r3, [sp, #16]
 800fc1a:	eba0 000a 	sub.w	r0, r0, sl
 800fc1e:	2240      	movs	r2, #64	@ 0x40
 800fc20:	4082      	lsls	r2, r0
 800fc22:	4313      	orrs	r3, r2
 800fc24:	3401      	adds	r4, #1
 800fc26:	9304      	str	r3, [sp, #16]
 800fc28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc2c:	4824      	ldr	r0, [pc, #144]	@ (800fcc0 <_svfiprintf_r+0x1e8>)
 800fc2e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fc32:	2206      	movs	r2, #6
 800fc34:	f7f0 fb14 	bl	8000260 <memchr>
 800fc38:	2800      	cmp	r0, #0
 800fc3a:	d036      	beq.n	800fcaa <_svfiprintf_r+0x1d2>
 800fc3c:	4b21      	ldr	r3, [pc, #132]	@ (800fcc4 <_svfiprintf_r+0x1ec>)
 800fc3e:	bb1b      	cbnz	r3, 800fc88 <_svfiprintf_r+0x1b0>
 800fc40:	9b03      	ldr	r3, [sp, #12]
 800fc42:	3307      	adds	r3, #7
 800fc44:	f023 0307 	bic.w	r3, r3, #7
 800fc48:	3308      	adds	r3, #8
 800fc4a:	9303      	str	r3, [sp, #12]
 800fc4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc4e:	4433      	add	r3, r6
 800fc50:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc52:	e76a      	b.n	800fb2a <_svfiprintf_r+0x52>
 800fc54:	fb0c 3202 	mla	r2, ip, r2, r3
 800fc58:	460c      	mov	r4, r1
 800fc5a:	2001      	movs	r0, #1
 800fc5c:	e7a8      	b.n	800fbb0 <_svfiprintf_r+0xd8>
 800fc5e:	2300      	movs	r3, #0
 800fc60:	3401      	adds	r4, #1
 800fc62:	9305      	str	r3, [sp, #20]
 800fc64:	4619      	mov	r1, r3
 800fc66:	f04f 0c0a 	mov.w	ip, #10
 800fc6a:	4620      	mov	r0, r4
 800fc6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc70:	3a30      	subs	r2, #48	@ 0x30
 800fc72:	2a09      	cmp	r2, #9
 800fc74:	d903      	bls.n	800fc7e <_svfiprintf_r+0x1a6>
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d0c6      	beq.n	800fc08 <_svfiprintf_r+0x130>
 800fc7a:	9105      	str	r1, [sp, #20]
 800fc7c:	e7c4      	b.n	800fc08 <_svfiprintf_r+0x130>
 800fc7e:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc82:	4604      	mov	r4, r0
 800fc84:	2301      	movs	r3, #1
 800fc86:	e7f0      	b.n	800fc6a <_svfiprintf_r+0x192>
 800fc88:	ab03      	add	r3, sp, #12
 800fc8a:	9300      	str	r3, [sp, #0]
 800fc8c:	462a      	mov	r2, r5
 800fc8e:	4b0e      	ldr	r3, [pc, #56]	@ (800fcc8 <_svfiprintf_r+0x1f0>)
 800fc90:	a904      	add	r1, sp, #16
 800fc92:	4638      	mov	r0, r7
 800fc94:	f7fc fbe4 	bl	800c460 <_printf_float>
 800fc98:	1c42      	adds	r2, r0, #1
 800fc9a:	4606      	mov	r6, r0
 800fc9c:	d1d6      	bne.n	800fc4c <_svfiprintf_r+0x174>
 800fc9e:	89ab      	ldrh	r3, [r5, #12]
 800fca0:	065b      	lsls	r3, r3, #25
 800fca2:	f53f af2d 	bmi.w	800fb00 <_svfiprintf_r+0x28>
 800fca6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fca8:	e72c      	b.n	800fb04 <_svfiprintf_r+0x2c>
 800fcaa:	ab03      	add	r3, sp, #12
 800fcac:	9300      	str	r3, [sp, #0]
 800fcae:	462a      	mov	r2, r5
 800fcb0:	4b05      	ldr	r3, [pc, #20]	@ (800fcc8 <_svfiprintf_r+0x1f0>)
 800fcb2:	a904      	add	r1, sp, #16
 800fcb4:	4638      	mov	r0, r7
 800fcb6:	f7fc fe5b 	bl	800c970 <_printf_i>
 800fcba:	e7ed      	b.n	800fc98 <_svfiprintf_r+0x1c0>
 800fcbc:	080116f8 	.word	0x080116f8
 800fcc0:	08011702 	.word	0x08011702
 800fcc4:	0800c461 	.word	0x0800c461
 800fcc8:	0800fa21 	.word	0x0800fa21
 800fccc:	080116fe 	.word	0x080116fe

0800fcd0 <__sfputc_r>:
 800fcd0:	6893      	ldr	r3, [r2, #8]
 800fcd2:	3b01      	subs	r3, #1
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	b410      	push	{r4}
 800fcd8:	6093      	str	r3, [r2, #8]
 800fcda:	da08      	bge.n	800fcee <__sfputc_r+0x1e>
 800fcdc:	6994      	ldr	r4, [r2, #24]
 800fcde:	42a3      	cmp	r3, r4
 800fce0:	db01      	blt.n	800fce6 <__sfputc_r+0x16>
 800fce2:	290a      	cmp	r1, #10
 800fce4:	d103      	bne.n	800fcee <__sfputc_r+0x1e>
 800fce6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fcea:	f7fd bb36 	b.w	800d35a <__swbuf_r>
 800fcee:	6813      	ldr	r3, [r2, #0]
 800fcf0:	1c58      	adds	r0, r3, #1
 800fcf2:	6010      	str	r0, [r2, #0]
 800fcf4:	7019      	strb	r1, [r3, #0]
 800fcf6:	4608      	mov	r0, r1
 800fcf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fcfc:	4770      	bx	lr

0800fcfe <__sfputs_r>:
 800fcfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd00:	4606      	mov	r6, r0
 800fd02:	460f      	mov	r7, r1
 800fd04:	4614      	mov	r4, r2
 800fd06:	18d5      	adds	r5, r2, r3
 800fd08:	42ac      	cmp	r4, r5
 800fd0a:	d101      	bne.n	800fd10 <__sfputs_r+0x12>
 800fd0c:	2000      	movs	r0, #0
 800fd0e:	e007      	b.n	800fd20 <__sfputs_r+0x22>
 800fd10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd14:	463a      	mov	r2, r7
 800fd16:	4630      	mov	r0, r6
 800fd18:	f7ff ffda 	bl	800fcd0 <__sfputc_r>
 800fd1c:	1c43      	adds	r3, r0, #1
 800fd1e:	d1f3      	bne.n	800fd08 <__sfputs_r+0xa>
 800fd20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fd24 <_vfiprintf_r>:
 800fd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd28:	460d      	mov	r5, r1
 800fd2a:	b09d      	sub	sp, #116	@ 0x74
 800fd2c:	4614      	mov	r4, r2
 800fd2e:	4698      	mov	r8, r3
 800fd30:	4606      	mov	r6, r0
 800fd32:	b118      	cbz	r0, 800fd3c <_vfiprintf_r+0x18>
 800fd34:	6a03      	ldr	r3, [r0, #32]
 800fd36:	b90b      	cbnz	r3, 800fd3c <_vfiprintf_r+0x18>
 800fd38:	f7fd f9d2 	bl	800d0e0 <__sinit>
 800fd3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fd3e:	07d9      	lsls	r1, r3, #31
 800fd40:	d405      	bmi.n	800fd4e <_vfiprintf_r+0x2a>
 800fd42:	89ab      	ldrh	r3, [r5, #12]
 800fd44:	059a      	lsls	r2, r3, #22
 800fd46:	d402      	bmi.n	800fd4e <_vfiprintf_r+0x2a>
 800fd48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fd4a:	f7fd fcf0 	bl	800d72e <__retarget_lock_acquire_recursive>
 800fd4e:	89ab      	ldrh	r3, [r5, #12]
 800fd50:	071b      	lsls	r3, r3, #28
 800fd52:	d501      	bpl.n	800fd58 <_vfiprintf_r+0x34>
 800fd54:	692b      	ldr	r3, [r5, #16]
 800fd56:	b99b      	cbnz	r3, 800fd80 <_vfiprintf_r+0x5c>
 800fd58:	4629      	mov	r1, r5
 800fd5a:	4630      	mov	r0, r6
 800fd5c:	f7fd fb3c 	bl	800d3d8 <__swsetup_r>
 800fd60:	b170      	cbz	r0, 800fd80 <_vfiprintf_r+0x5c>
 800fd62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fd64:	07dc      	lsls	r4, r3, #31
 800fd66:	d504      	bpl.n	800fd72 <_vfiprintf_r+0x4e>
 800fd68:	f04f 30ff 	mov.w	r0, #4294967295
 800fd6c:	b01d      	add	sp, #116	@ 0x74
 800fd6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd72:	89ab      	ldrh	r3, [r5, #12]
 800fd74:	0598      	lsls	r0, r3, #22
 800fd76:	d4f7      	bmi.n	800fd68 <_vfiprintf_r+0x44>
 800fd78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fd7a:	f7fd fcd9 	bl	800d730 <__retarget_lock_release_recursive>
 800fd7e:	e7f3      	b.n	800fd68 <_vfiprintf_r+0x44>
 800fd80:	2300      	movs	r3, #0
 800fd82:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd84:	2320      	movs	r3, #32
 800fd86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fd8a:	f8cd 800c 	str.w	r8, [sp, #12]
 800fd8e:	2330      	movs	r3, #48	@ 0x30
 800fd90:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ff40 <_vfiprintf_r+0x21c>
 800fd94:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fd98:	f04f 0901 	mov.w	r9, #1
 800fd9c:	4623      	mov	r3, r4
 800fd9e:	469a      	mov	sl, r3
 800fda0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fda4:	b10a      	cbz	r2, 800fdaa <_vfiprintf_r+0x86>
 800fda6:	2a25      	cmp	r2, #37	@ 0x25
 800fda8:	d1f9      	bne.n	800fd9e <_vfiprintf_r+0x7a>
 800fdaa:	ebba 0b04 	subs.w	fp, sl, r4
 800fdae:	d00b      	beq.n	800fdc8 <_vfiprintf_r+0xa4>
 800fdb0:	465b      	mov	r3, fp
 800fdb2:	4622      	mov	r2, r4
 800fdb4:	4629      	mov	r1, r5
 800fdb6:	4630      	mov	r0, r6
 800fdb8:	f7ff ffa1 	bl	800fcfe <__sfputs_r>
 800fdbc:	3001      	adds	r0, #1
 800fdbe:	f000 80a7 	beq.w	800ff10 <_vfiprintf_r+0x1ec>
 800fdc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fdc4:	445a      	add	r2, fp
 800fdc6:	9209      	str	r2, [sp, #36]	@ 0x24
 800fdc8:	f89a 3000 	ldrb.w	r3, [sl]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	f000 809f 	beq.w	800ff10 <_vfiprintf_r+0x1ec>
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	f04f 32ff 	mov.w	r2, #4294967295
 800fdd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fddc:	f10a 0a01 	add.w	sl, sl, #1
 800fde0:	9304      	str	r3, [sp, #16]
 800fde2:	9307      	str	r3, [sp, #28]
 800fde4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fde8:	931a      	str	r3, [sp, #104]	@ 0x68
 800fdea:	4654      	mov	r4, sl
 800fdec:	2205      	movs	r2, #5
 800fdee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdf2:	4853      	ldr	r0, [pc, #332]	@ (800ff40 <_vfiprintf_r+0x21c>)
 800fdf4:	f7f0 fa34 	bl	8000260 <memchr>
 800fdf8:	9a04      	ldr	r2, [sp, #16]
 800fdfa:	b9d8      	cbnz	r0, 800fe34 <_vfiprintf_r+0x110>
 800fdfc:	06d1      	lsls	r1, r2, #27
 800fdfe:	bf44      	itt	mi
 800fe00:	2320      	movmi	r3, #32
 800fe02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fe06:	0713      	lsls	r3, r2, #28
 800fe08:	bf44      	itt	mi
 800fe0a:	232b      	movmi	r3, #43	@ 0x2b
 800fe0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fe10:	f89a 3000 	ldrb.w	r3, [sl]
 800fe14:	2b2a      	cmp	r3, #42	@ 0x2a
 800fe16:	d015      	beq.n	800fe44 <_vfiprintf_r+0x120>
 800fe18:	9a07      	ldr	r2, [sp, #28]
 800fe1a:	4654      	mov	r4, sl
 800fe1c:	2000      	movs	r0, #0
 800fe1e:	f04f 0c0a 	mov.w	ip, #10
 800fe22:	4621      	mov	r1, r4
 800fe24:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fe28:	3b30      	subs	r3, #48	@ 0x30
 800fe2a:	2b09      	cmp	r3, #9
 800fe2c:	d94b      	bls.n	800fec6 <_vfiprintf_r+0x1a2>
 800fe2e:	b1b0      	cbz	r0, 800fe5e <_vfiprintf_r+0x13a>
 800fe30:	9207      	str	r2, [sp, #28]
 800fe32:	e014      	b.n	800fe5e <_vfiprintf_r+0x13a>
 800fe34:	eba0 0308 	sub.w	r3, r0, r8
 800fe38:	fa09 f303 	lsl.w	r3, r9, r3
 800fe3c:	4313      	orrs	r3, r2
 800fe3e:	9304      	str	r3, [sp, #16]
 800fe40:	46a2      	mov	sl, r4
 800fe42:	e7d2      	b.n	800fdea <_vfiprintf_r+0xc6>
 800fe44:	9b03      	ldr	r3, [sp, #12]
 800fe46:	1d19      	adds	r1, r3, #4
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	9103      	str	r1, [sp, #12]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	bfbb      	ittet	lt
 800fe50:	425b      	neglt	r3, r3
 800fe52:	f042 0202 	orrlt.w	r2, r2, #2
 800fe56:	9307      	strge	r3, [sp, #28]
 800fe58:	9307      	strlt	r3, [sp, #28]
 800fe5a:	bfb8      	it	lt
 800fe5c:	9204      	strlt	r2, [sp, #16]
 800fe5e:	7823      	ldrb	r3, [r4, #0]
 800fe60:	2b2e      	cmp	r3, #46	@ 0x2e
 800fe62:	d10a      	bne.n	800fe7a <_vfiprintf_r+0x156>
 800fe64:	7863      	ldrb	r3, [r4, #1]
 800fe66:	2b2a      	cmp	r3, #42	@ 0x2a
 800fe68:	d132      	bne.n	800fed0 <_vfiprintf_r+0x1ac>
 800fe6a:	9b03      	ldr	r3, [sp, #12]
 800fe6c:	1d1a      	adds	r2, r3, #4
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	9203      	str	r2, [sp, #12]
 800fe72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fe76:	3402      	adds	r4, #2
 800fe78:	9305      	str	r3, [sp, #20]
 800fe7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ff50 <_vfiprintf_r+0x22c>
 800fe7e:	7821      	ldrb	r1, [r4, #0]
 800fe80:	2203      	movs	r2, #3
 800fe82:	4650      	mov	r0, sl
 800fe84:	f7f0 f9ec 	bl	8000260 <memchr>
 800fe88:	b138      	cbz	r0, 800fe9a <_vfiprintf_r+0x176>
 800fe8a:	9b04      	ldr	r3, [sp, #16]
 800fe8c:	eba0 000a 	sub.w	r0, r0, sl
 800fe90:	2240      	movs	r2, #64	@ 0x40
 800fe92:	4082      	lsls	r2, r0
 800fe94:	4313      	orrs	r3, r2
 800fe96:	3401      	adds	r4, #1
 800fe98:	9304      	str	r3, [sp, #16]
 800fe9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe9e:	4829      	ldr	r0, [pc, #164]	@ (800ff44 <_vfiprintf_r+0x220>)
 800fea0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fea4:	2206      	movs	r2, #6
 800fea6:	f7f0 f9db 	bl	8000260 <memchr>
 800feaa:	2800      	cmp	r0, #0
 800feac:	d03f      	beq.n	800ff2e <_vfiprintf_r+0x20a>
 800feae:	4b26      	ldr	r3, [pc, #152]	@ (800ff48 <_vfiprintf_r+0x224>)
 800feb0:	bb1b      	cbnz	r3, 800fefa <_vfiprintf_r+0x1d6>
 800feb2:	9b03      	ldr	r3, [sp, #12]
 800feb4:	3307      	adds	r3, #7
 800feb6:	f023 0307 	bic.w	r3, r3, #7
 800feba:	3308      	adds	r3, #8
 800febc:	9303      	str	r3, [sp, #12]
 800febe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fec0:	443b      	add	r3, r7
 800fec2:	9309      	str	r3, [sp, #36]	@ 0x24
 800fec4:	e76a      	b.n	800fd9c <_vfiprintf_r+0x78>
 800fec6:	fb0c 3202 	mla	r2, ip, r2, r3
 800feca:	460c      	mov	r4, r1
 800fecc:	2001      	movs	r0, #1
 800fece:	e7a8      	b.n	800fe22 <_vfiprintf_r+0xfe>
 800fed0:	2300      	movs	r3, #0
 800fed2:	3401      	adds	r4, #1
 800fed4:	9305      	str	r3, [sp, #20]
 800fed6:	4619      	mov	r1, r3
 800fed8:	f04f 0c0a 	mov.w	ip, #10
 800fedc:	4620      	mov	r0, r4
 800fede:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fee2:	3a30      	subs	r2, #48	@ 0x30
 800fee4:	2a09      	cmp	r2, #9
 800fee6:	d903      	bls.n	800fef0 <_vfiprintf_r+0x1cc>
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d0c6      	beq.n	800fe7a <_vfiprintf_r+0x156>
 800feec:	9105      	str	r1, [sp, #20]
 800feee:	e7c4      	b.n	800fe7a <_vfiprintf_r+0x156>
 800fef0:	fb0c 2101 	mla	r1, ip, r1, r2
 800fef4:	4604      	mov	r4, r0
 800fef6:	2301      	movs	r3, #1
 800fef8:	e7f0      	b.n	800fedc <_vfiprintf_r+0x1b8>
 800fefa:	ab03      	add	r3, sp, #12
 800fefc:	9300      	str	r3, [sp, #0]
 800fefe:	462a      	mov	r2, r5
 800ff00:	4b12      	ldr	r3, [pc, #72]	@ (800ff4c <_vfiprintf_r+0x228>)
 800ff02:	a904      	add	r1, sp, #16
 800ff04:	4630      	mov	r0, r6
 800ff06:	f7fc faab 	bl	800c460 <_printf_float>
 800ff0a:	4607      	mov	r7, r0
 800ff0c:	1c78      	adds	r0, r7, #1
 800ff0e:	d1d6      	bne.n	800febe <_vfiprintf_r+0x19a>
 800ff10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ff12:	07d9      	lsls	r1, r3, #31
 800ff14:	d405      	bmi.n	800ff22 <_vfiprintf_r+0x1fe>
 800ff16:	89ab      	ldrh	r3, [r5, #12]
 800ff18:	059a      	lsls	r2, r3, #22
 800ff1a:	d402      	bmi.n	800ff22 <_vfiprintf_r+0x1fe>
 800ff1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ff1e:	f7fd fc07 	bl	800d730 <__retarget_lock_release_recursive>
 800ff22:	89ab      	ldrh	r3, [r5, #12]
 800ff24:	065b      	lsls	r3, r3, #25
 800ff26:	f53f af1f 	bmi.w	800fd68 <_vfiprintf_r+0x44>
 800ff2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ff2c:	e71e      	b.n	800fd6c <_vfiprintf_r+0x48>
 800ff2e:	ab03      	add	r3, sp, #12
 800ff30:	9300      	str	r3, [sp, #0]
 800ff32:	462a      	mov	r2, r5
 800ff34:	4b05      	ldr	r3, [pc, #20]	@ (800ff4c <_vfiprintf_r+0x228>)
 800ff36:	a904      	add	r1, sp, #16
 800ff38:	4630      	mov	r0, r6
 800ff3a:	f7fc fd19 	bl	800c970 <_printf_i>
 800ff3e:	e7e4      	b.n	800ff0a <_vfiprintf_r+0x1e6>
 800ff40:	080116f8 	.word	0x080116f8
 800ff44:	08011702 	.word	0x08011702
 800ff48:	0800c461 	.word	0x0800c461
 800ff4c:	0800fcff 	.word	0x0800fcff
 800ff50:	080116fe 	.word	0x080116fe

0800ff54 <__sflush_r>:
 800ff54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ff58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff5c:	0716      	lsls	r6, r2, #28
 800ff5e:	4605      	mov	r5, r0
 800ff60:	460c      	mov	r4, r1
 800ff62:	d454      	bmi.n	801000e <__sflush_r+0xba>
 800ff64:	684b      	ldr	r3, [r1, #4]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	dc02      	bgt.n	800ff70 <__sflush_r+0x1c>
 800ff6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	dd48      	ble.n	8010002 <__sflush_r+0xae>
 800ff70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ff72:	2e00      	cmp	r6, #0
 800ff74:	d045      	beq.n	8010002 <__sflush_r+0xae>
 800ff76:	2300      	movs	r3, #0
 800ff78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ff7c:	682f      	ldr	r7, [r5, #0]
 800ff7e:	6a21      	ldr	r1, [r4, #32]
 800ff80:	602b      	str	r3, [r5, #0]
 800ff82:	d030      	beq.n	800ffe6 <__sflush_r+0x92>
 800ff84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ff86:	89a3      	ldrh	r3, [r4, #12]
 800ff88:	0759      	lsls	r1, r3, #29
 800ff8a:	d505      	bpl.n	800ff98 <__sflush_r+0x44>
 800ff8c:	6863      	ldr	r3, [r4, #4]
 800ff8e:	1ad2      	subs	r2, r2, r3
 800ff90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ff92:	b10b      	cbz	r3, 800ff98 <__sflush_r+0x44>
 800ff94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ff96:	1ad2      	subs	r2, r2, r3
 800ff98:	2300      	movs	r3, #0
 800ff9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ff9c:	6a21      	ldr	r1, [r4, #32]
 800ff9e:	4628      	mov	r0, r5
 800ffa0:	47b0      	blx	r6
 800ffa2:	1c43      	adds	r3, r0, #1
 800ffa4:	89a3      	ldrh	r3, [r4, #12]
 800ffa6:	d106      	bne.n	800ffb6 <__sflush_r+0x62>
 800ffa8:	6829      	ldr	r1, [r5, #0]
 800ffaa:	291d      	cmp	r1, #29
 800ffac:	d82b      	bhi.n	8010006 <__sflush_r+0xb2>
 800ffae:	4a2a      	ldr	r2, [pc, #168]	@ (8010058 <__sflush_r+0x104>)
 800ffb0:	410a      	asrs	r2, r1
 800ffb2:	07d6      	lsls	r6, r2, #31
 800ffb4:	d427      	bmi.n	8010006 <__sflush_r+0xb2>
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	6062      	str	r2, [r4, #4]
 800ffba:	04d9      	lsls	r1, r3, #19
 800ffbc:	6922      	ldr	r2, [r4, #16]
 800ffbe:	6022      	str	r2, [r4, #0]
 800ffc0:	d504      	bpl.n	800ffcc <__sflush_r+0x78>
 800ffc2:	1c42      	adds	r2, r0, #1
 800ffc4:	d101      	bne.n	800ffca <__sflush_r+0x76>
 800ffc6:	682b      	ldr	r3, [r5, #0]
 800ffc8:	b903      	cbnz	r3, 800ffcc <__sflush_r+0x78>
 800ffca:	6560      	str	r0, [r4, #84]	@ 0x54
 800ffcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ffce:	602f      	str	r7, [r5, #0]
 800ffd0:	b1b9      	cbz	r1, 8010002 <__sflush_r+0xae>
 800ffd2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ffd6:	4299      	cmp	r1, r3
 800ffd8:	d002      	beq.n	800ffe0 <__sflush_r+0x8c>
 800ffda:	4628      	mov	r0, r5
 800ffdc:	f7fe f9ba 	bl	800e354 <_free_r>
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	6363      	str	r3, [r4, #52]	@ 0x34
 800ffe4:	e00d      	b.n	8010002 <__sflush_r+0xae>
 800ffe6:	2301      	movs	r3, #1
 800ffe8:	4628      	mov	r0, r5
 800ffea:	47b0      	blx	r6
 800ffec:	4602      	mov	r2, r0
 800ffee:	1c50      	adds	r0, r2, #1
 800fff0:	d1c9      	bne.n	800ff86 <__sflush_r+0x32>
 800fff2:	682b      	ldr	r3, [r5, #0]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d0c6      	beq.n	800ff86 <__sflush_r+0x32>
 800fff8:	2b1d      	cmp	r3, #29
 800fffa:	d001      	beq.n	8010000 <__sflush_r+0xac>
 800fffc:	2b16      	cmp	r3, #22
 800fffe:	d11e      	bne.n	801003e <__sflush_r+0xea>
 8010000:	602f      	str	r7, [r5, #0]
 8010002:	2000      	movs	r0, #0
 8010004:	e022      	b.n	801004c <__sflush_r+0xf8>
 8010006:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801000a:	b21b      	sxth	r3, r3
 801000c:	e01b      	b.n	8010046 <__sflush_r+0xf2>
 801000e:	690f      	ldr	r7, [r1, #16]
 8010010:	2f00      	cmp	r7, #0
 8010012:	d0f6      	beq.n	8010002 <__sflush_r+0xae>
 8010014:	0793      	lsls	r3, r2, #30
 8010016:	680e      	ldr	r6, [r1, #0]
 8010018:	bf08      	it	eq
 801001a:	694b      	ldreq	r3, [r1, #20]
 801001c:	600f      	str	r7, [r1, #0]
 801001e:	bf18      	it	ne
 8010020:	2300      	movne	r3, #0
 8010022:	eba6 0807 	sub.w	r8, r6, r7
 8010026:	608b      	str	r3, [r1, #8]
 8010028:	f1b8 0f00 	cmp.w	r8, #0
 801002c:	dde9      	ble.n	8010002 <__sflush_r+0xae>
 801002e:	6a21      	ldr	r1, [r4, #32]
 8010030:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010032:	4643      	mov	r3, r8
 8010034:	463a      	mov	r2, r7
 8010036:	4628      	mov	r0, r5
 8010038:	47b0      	blx	r6
 801003a:	2800      	cmp	r0, #0
 801003c:	dc08      	bgt.n	8010050 <__sflush_r+0xfc>
 801003e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010042:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010046:	81a3      	strh	r3, [r4, #12]
 8010048:	f04f 30ff 	mov.w	r0, #4294967295
 801004c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010050:	4407      	add	r7, r0
 8010052:	eba8 0800 	sub.w	r8, r8, r0
 8010056:	e7e7      	b.n	8010028 <__sflush_r+0xd4>
 8010058:	dfbffffe 	.word	0xdfbffffe

0801005c <_fflush_r>:
 801005c:	b538      	push	{r3, r4, r5, lr}
 801005e:	690b      	ldr	r3, [r1, #16]
 8010060:	4605      	mov	r5, r0
 8010062:	460c      	mov	r4, r1
 8010064:	b913      	cbnz	r3, 801006c <_fflush_r+0x10>
 8010066:	2500      	movs	r5, #0
 8010068:	4628      	mov	r0, r5
 801006a:	bd38      	pop	{r3, r4, r5, pc}
 801006c:	b118      	cbz	r0, 8010076 <_fflush_r+0x1a>
 801006e:	6a03      	ldr	r3, [r0, #32]
 8010070:	b90b      	cbnz	r3, 8010076 <_fflush_r+0x1a>
 8010072:	f7fd f835 	bl	800d0e0 <__sinit>
 8010076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d0f3      	beq.n	8010066 <_fflush_r+0xa>
 801007e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010080:	07d0      	lsls	r0, r2, #31
 8010082:	d404      	bmi.n	801008e <_fflush_r+0x32>
 8010084:	0599      	lsls	r1, r3, #22
 8010086:	d402      	bmi.n	801008e <_fflush_r+0x32>
 8010088:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801008a:	f7fd fb50 	bl	800d72e <__retarget_lock_acquire_recursive>
 801008e:	4628      	mov	r0, r5
 8010090:	4621      	mov	r1, r4
 8010092:	f7ff ff5f 	bl	800ff54 <__sflush_r>
 8010096:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010098:	07da      	lsls	r2, r3, #31
 801009a:	4605      	mov	r5, r0
 801009c:	d4e4      	bmi.n	8010068 <_fflush_r+0xc>
 801009e:	89a3      	ldrh	r3, [r4, #12]
 80100a0:	059b      	lsls	r3, r3, #22
 80100a2:	d4e1      	bmi.n	8010068 <_fflush_r+0xc>
 80100a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80100a6:	f7fd fb43 	bl	800d730 <__retarget_lock_release_recursive>
 80100aa:	e7dd      	b.n	8010068 <_fflush_r+0xc>

080100ac <fiprintf>:
 80100ac:	b40e      	push	{r1, r2, r3}
 80100ae:	b503      	push	{r0, r1, lr}
 80100b0:	4601      	mov	r1, r0
 80100b2:	ab03      	add	r3, sp, #12
 80100b4:	4805      	ldr	r0, [pc, #20]	@ (80100cc <fiprintf+0x20>)
 80100b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80100ba:	6800      	ldr	r0, [r0, #0]
 80100bc:	9301      	str	r3, [sp, #4]
 80100be:	f7ff fe31 	bl	800fd24 <_vfiprintf_r>
 80100c2:	b002      	add	sp, #8
 80100c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80100c8:	b003      	add	sp, #12
 80100ca:	4770      	bx	lr
 80100cc:	2000025c 	.word	0x2000025c

080100d0 <__swhatbuf_r>:
 80100d0:	b570      	push	{r4, r5, r6, lr}
 80100d2:	460c      	mov	r4, r1
 80100d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100d8:	2900      	cmp	r1, #0
 80100da:	b096      	sub	sp, #88	@ 0x58
 80100dc:	4615      	mov	r5, r2
 80100de:	461e      	mov	r6, r3
 80100e0:	da0d      	bge.n	80100fe <__swhatbuf_r+0x2e>
 80100e2:	89a3      	ldrh	r3, [r4, #12]
 80100e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80100e8:	f04f 0100 	mov.w	r1, #0
 80100ec:	bf14      	ite	ne
 80100ee:	2340      	movne	r3, #64	@ 0x40
 80100f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80100f4:	2000      	movs	r0, #0
 80100f6:	6031      	str	r1, [r6, #0]
 80100f8:	602b      	str	r3, [r5, #0]
 80100fa:	b016      	add	sp, #88	@ 0x58
 80100fc:	bd70      	pop	{r4, r5, r6, pc}
 80100fe:	466a      	mov	r2, sp
 8010100:	f000 f862 	bl	80101c8 <_fstat_r>
 8010104:	2800      	cmp	r0, #0
 8010106:	dbec      	blt.n	80100e2 <__swhatbuf_r+0x12>
 8010108:	9901      	ldr	r1, [sp, #4]
 801010a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801010e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010112:	4259      	negs	r1, r3
 8010114:	4159      	adcs	r1, r3
 8010116:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801011a:	e7eb      	b.n	80100f4 <__swhatbuf_r+0x24>

0801011c <__smakebuf_r>:
 801011c:	898b      	ldrh	r3, [r1, #12]
 801011e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010120:	079d      	lsls	r5, r3, #30
 8010122:	4606      	mov	r6, r0
 8010124:	460c      	mov	r4, r1
 8010126:	d507      	bpl.n	8010138 <__smakebuf_r+0x1c>
 8010128:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801012c:	6023      	str	r3, [r4, #0]
 801012e:	6123      	str	r3, [r4, #16]
 8010130:	2301      	movs	r3, #1
 8010132:	6163      	str	r3, [r4, #20]
 8010134:	b003      	add	sp, #12
 8010136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010138:	ab01      	add	r3, sp, #4
 801013a:	466a      	mov	r2, sp
 801013c:	f7ff ffc8 	bl	80100d0 <__swhatbuf_r>
 8010140:	9f00      	ldr	r7, [sp, #0]
 8010142:	4605      	mov	r5, r0
 8010144:	4639      	mov	r1, r7
 8010146:	4630      	mov	r0, r6
 8010148:	f7fe f978 	bl	800e43c <_malloc_r>
 801014c:	b948      	cbnz	r0, 8010162 <__smakebuf_r+0x46>
 801014e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010152:	059a      	lsls	r2, r3, #22
 8010154:	d4ee      	bmi.n	8010134 <__smakebuf_r+0x18>
 8010156:	f023 0303 	bic.w	r3, r3, #3
 801015a:	f043 0302 	orr.w	r3, r3, #2
 801015e:	81a3      	strh	r3, [r4, #12]
 8010160:	e7e2      	b.n	8010128 <__smakebuf_r+0xc>
 8010162:	89a3      	ldrh	r3, [r4, #12]
 8010164:	6020      	str	r0, [r4, #0]
 8010166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801016a:	81a3      	strh	r3, [r4, #12]
 801016c:	9b01      	ldr	r3, [sp, #4]
 801016e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010172:	b15b      	cbz	r3, 801018c <__smakebuf_r+0x70>
 8010174:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010178:	4630      	mov	r0, r6
 801017a:	f000 f837 	bl	80101ec <_isatty_r>
 801017e:	b128      	cbz	r0, 801018c <__smakebuf_r+0x70>
 8010180:	89a3      	ldrh	r3, [r4, #12]
 8010182:	f023 0303 	bic.w	r3, r3, #3
 8010186:	f043 0301 	orr.w	r3, r3, #1
 801018a:	81a3      	strh	r3, [r4, #12]
 801018c:	89a3      	ldrh	r3, [r4, #12]
 801018e:	431d      	orrs	r5, r3
 8010190:	81a5      	strh	r5, [r4, #12]
 8010192:	e7cf      	b.n	8010134 <__smakebuf_r+0x18>

08010194 <memmove>:
 8010194:	4288      	cmp	r0, r1
 8010196:	b510      	push	{r4, lr}
 8010198:	eb01 0402 	add.w	r4, r1, r2
 801019c:	d902      	bls.n	80101a4 <memmove+0x10>
 801019e:	4284      	cmp	r4, r0
 80101a0:	4623      	mov	r3, r4
 80101a2:	d807      	bhi.n	80101b4 <memmove+0x20>
 80101a4:	1e43      	subs	r3, r0, #1
 80101a6:	42a1      	cmp	r1, r4
 80101a8:	d008      	beq.n	80101bc <memmove+0x28>
 80101aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80101ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80101b2:	e7f8      	b.n	80101a6 <memmove+0x12>
 80101b4:	4402      	add	r2, r0
 80101b6:	4601      	mov	r1, r0
 80101b8:	428a      	cmp	r2, r1
 80101ba:	d100      	bne.n	80101be <memmove+0x2a>
 80101bc:	bd10      	pop	{r4, pc}
 80101be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80101c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80101c6:	e7f7      	b.n	80101b8 <memmove+0x24>

080101c8 <_fstat_r>:
 80101c8:	b538      	push	{r3, r4, r5, lr}
 80101ca:	4d07      	ldr	r5, [pc, #28]	@ (80101e8 <_fstat_r+0x20>)
 80101cc:	2300      	movs	r3, #0
 80101ce:	4604      	mov	r4, r0
 80101d0:	4608      	mov	r0, r1
 80101d2:	4611      	mov	r1, r2
 80101d4:	602b      	str	r3, [r5, #0]
 80101d6:	f7f3 fb05 	bl	80037e4 <_fstat>
 80101da:	1c43      	adds	r3, r0, #1
 80101dc:	d102      	bne.n	80101e4 <_fstat_r+0x1c>
 80101de:	682b      	ldr	r3, [r5, #0]
 80101e0:	b103      	cbz	r3, 80101e4 <_fstat_r+0x1c>
 80101e2:	6023      	str	r3, [r4, #0]
 80101e4:	bd38      	pop	{r3, r4, r5, pc}
 80101e6:	bf00      	nop
 80101e8:	20004bb8 	.word	0x20004bb8

080101ec <_isatty_r>:
 80101ec:	b538      	push	{r3, r4, r5, lr}
 80101ee:	4d06      	ldr	r5, [pc, #24]	@ (8010208 <_isatty_r+0x1c>)
 80101f0:	2300      	movs	r3, #0
 80101f2:	4604      	mov	r4, r0
 80101f4:	4608      	mov	r0, r1
 80101f6:	602b      	str	r3, [r5, #0]
 80101f8:	f7f3 fb04 	bl	8003804 <_isatty>
 80101fc:	1c43      	adds	r3, r0, #1
 80101fe:	d102      	bne.n	8010206 <_isatty_r+0x1a>
 8010200:	682b      	ldr	r3, [r5, #0]
 8010202:	b103      	cbz	r3, 8010206 <_isatty_r+0x1a>
 8010204:	6023      	str	r3, [r4, #0]
 8010206:	bd38      	pop	{r3, r4, r5, pc}
 8010208:	20004bb8 	.word	0x20004bb8

0801020c <_sbrk_r>:
 801020c:	b538      	push	{r3, r4, r5, lr}
 801020e:	4d06      	ldr	r5, [pc, #24]	@ (8010228 <_sbrk_r+0x1c>)
 8010210:	2300      	movs	r3, #0
 8010212:	4604      	mov	r4, r0
 8010214:	4608      	mov	r0, r1
 8010216:	602b      	str	r3, [r5, #0]
 8010218:	f7f3 fb0c 	bl	8003834 <_sbrk>
 801021c:	1c43      	adds	r3, r0, #1
 801021e:	d102      	bne.n	8010226 <_sbrk_r+0x1a>
 8010220:	682b      	ldr	r3, [r5, #0]
 8010222:	b103      	cbz	r3, 8010226 <_sbrk_r+0x1a>
 8010224:	6023      	str	r3, [r4, #0]
 8010226:	bd38      	pop	{r3, r4, r5, pc}
 8010228:	20004bb8 	.word	0x20004bb8
 801022c:	00000000 	.word	0x00000000

08010230 <nan>:
 8010230:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010238 <nan+0x8>
 8010234:	4770      	bx	lr
 8010236:	bf00      	nop
 8010238:	00000000 	.word	0x00000000
 801023c:	7ff80000 	.word	0x7ff80000

08010240 <abort>:
 8010240:	b508      	push	{r3, lr}
 8010242:	2006      	movs	r0, #6
 8010244:	f000 fbc4 	bl	80109d0 <raise>
 8010248:	2001      	movs	r0, #1
 801024a:	f7f3 fa97 	bl	800377c <_exit>

0801024e <_calloc_r>:
 801024e:	b570      	push	{r4, r5, r6, lr}
 8010250:	fba1 5402 	umull	r5, r4, r1, r2
 8010254:	b93c      	cbnz	r4, 8010266 <_calloc_r+0x18>
 8010256:	4629      	mov	r1, r5
 8010258:	f7fe f8f0 	bl	800e43c <_malloc_r>
 801025c:	4606      	mov	r6, r0
 801025e:	b928      	cbnz	r0, 801026c <_calloc_r+0x1e>
 8010260:	2600      	movs	r6, #0
 8010262:	4630      	mov	r0, r6
 8010264:	bd70      	pop	{r4, r5, r6, pc}
 8010266:	220c      	movs	r2, #12
 8010268:	6002      	str	r2, [r0, #0]
 801026a:	e7f9      	b.n	8010260 <_calloc_r+0x12>
 801026c:	462a      	mov	r2, r5
 801026e:	4621      	mov	r1, r4
 8010270:	f7fd f908 	bl	800d484 <memset>
 8010274:	e7f5      	b.n	8010262 <_calloc_r+0x14>

08010276 <rshift>:
 8010276:	6903      	ldr	r3, [r0, #16]
 8010278:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801027c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010280:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010284:	f100 0414 	add.w	r4, r0, #20
 8010288:	dd45      	ble.n	8010316 <rshift+0xa0>
 801028a:	f011 011f 	ands.w	r1, r1, #31
 801028e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010292:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010296:	d10c      	bne.n	80102b2 <rshift+0x3c>
 8010298:	f100 0710 	add.w	r7, r0, #16
 801029c:	4629      	mov	r1, r5
 801029e:	42b1      	cmp	r1, r6
 80102a0:	d334      	bcc.n	801030c <rshift+0x96>
 80102a2:	1a9b      	subs	r3, r3, r2
 80102a4:	009b      	lsls	r3, r3, #2
 80102a6:	1eea      	subs	r2, r5, #3
 80102a8:	4296      	cmp	r6, r2
 80102aa:	bf38      	it	cc
 80102ac:	2300      	movcc	r3, #0
 80102ae:	4423      	add	r3, r4
 80102b0:	e015      	b.n	80102de <rshift+0x68>
 80102b2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80102b6:	f1c1 0820 	rsb	r8, r1, #32
 80102ba:	40cf      	lsrs	r7, r1
 80102bc:	f105 0e04 	add.w	lr, r5, #4
 80102c0:	46a1      	mov	r9, r4
 80102c2:	4576      	cmp	r6, lr
 80102c4:	46f4      	mov	ip, lr
 80102c6:	d815      	bhi.n	80102f4 <rshift+0x7e>
 80102c8:	1a9a      	subs	r2, r3, r2
 80102ca:	0092      	lsls	r2, r2, #2
 80102cc:	3a04      	subs	r2, #4
 80102ce:	3501      	adds	r5, #1
 80102d0:	42ae      	cmp	r6, r5
 80102d2:	bf38      	it	cc
 80102d4:	2200      	movcc	r2, #0
 80102d6:	18a3      	adds	r3, r4, r2
 80102d8:	50a7      	str	r7, [r4, r2]
 80102da:	b107      	cbz	r7, 80102de <rshift+0x68>
 80102dc:	3304      	adds	r3, #4
 80102de:	1b1a      	subs	r2, r3, r4
 80102e0:	42a3      	cmp	r3, r4
 80102e2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80102e6:	bf08      	it	eq
 80102e8:	2300      	moveq	r3, #0
 80102ea:	6102      	str	r2, [r0, #16]
 80102ec:	bf08      	it	eq
 80102ee:	6143      	streq	r3, [r0, #20]
 80102f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102f4:	f8dc c000 	ldr.w	ip, [ip]
 80102f8:	fa0c fc08 	lsl.w	ip, ip, r8
 80102fc:	ea4c 0707 	orr.w	r7, ip, r7
 8010300:	f849 7b04 	str.w	r7, [r9], #4
 8010304:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010308:	40cf      	lsrs	r7, r1
 801030a:	e7da      	b.n	80102c2 <rshift+0x4c>
 801030c:	f851 cb04 	ldr.w	ip, [r1], #4
 8010310:	f847 cf04 	str.w	ip, [r7, #4]!
 8010314:	e7c3      	b.n	801029e <rshift+0x28>
 8010316:	4623      	mov	r3, r4
 8010318:	e7e1      	b.n	80102de <rshift+0x68>

0801031a <__hexdig_fun>:
 801031a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801031e:	2b09      	cmp	r3, #9
 8010320:	d802      	bhi.n	8010328 <__hexdig_fun+0xe>
 8010322:	3820      	subs	r0, #32
 8010324:	b2c0      	uxtb	r0, r0
 8010326:	4770      	bx	lr
 8010328:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801032c:	2b05      	cmp	r3, #5
 801032e:	d801      	bhi.n	8010334 <__hexdig_fun+0x1a>
 8010330:	3847      	subs	r0, #71	@ 0x47
 8010332:	e7f7      	b.n	8010324 <__hexdig_fun+0xa>
 8010334:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010338:	2b05      	cmp	r3, #5
 801033a:	d801      	bhi.n	8010340 <__hexdig_fun+0x26>
 801033c:	3827      	subs	r0, #39	@ 0x27
 801033e:	e7f1      	b.n	8010324 <__hexdig_fun+0xa>
 8010340:	2000      	movs	r0, #0
 8010342:	4770      	bx	lr

08010344 <__gethex>:
 8010344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010348:	b085      	sub	sp, #20
 801034a:	468a      	mov	sl, r1
 801034c:	9302      	str	r3, [sp, #8]
 801034e:	680b      	ldr	r3, [r1, #0]
 8010350:	9001      	str	r0, [sp, #4]
 8010352:	4690      	mov	r8, r2
 8010354:	1c9c      	adds	r4, r3, #2
 8010356:	46a1      	mov	r9, r4
 8010358:	f814 0b01 	ldrb.w	r0, [r4], #1
 801035c:	2830      	cmp	r0, #48	@ 0x30
 801035e:	d0fa      	beq.n	8010356 <__gethex+0x12>
 8010360:	eba9 0303 	sub.w	r3, r9, r3
 8010364:	f1a3 0b02 	sub.w	fp, r3, #2
 8010368:	f7ff ffd7 	bl	801031a <__hexdig_fun>
 801036c:	4605      	mov	r5, r0
 801036e:	2800      	cmp	r0, #0
 8010370:	d168      	bne.n	8010444 <__gethex+0x100>
 8010372:	49a0      	ldr	r1, [pc, #640]	@ (80105f4 <__gethex+0x2b0>)
 8010374:	2201      	movs	r2, #1
 8010376:	4648      	mov	r0, r9
 8010378:	f7fd f88c 	bl	800d494 <strncmp>
 801037c:	4607      	mov	r7, r0
 801037e:	2800      	cmp	r0, #0
 8010380:	d167      	bne.n	8010452 <__gethex+0x10e>
 8010382:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010386:	4626      	mov	r6, r4
 8010388:	f7ff ffc7 	bl	801031a <__hexdig_fun>
 801038c:	2800      	cmp	r0, #0
 801038e:	d062      	beq.n	8010456 <__gethex+0x112>
 8010390:	4623      	mov	r3, r4
 8010392:	7818      	ldrb	r0, [r3, #0]
 8010394:	2830      	cmp	r0, #48	@ 0x30
 8010396:	4699      	mov	r9, r3
 8010398:	f103 0301 	add.w	r3, r3, #1
 801039c:	d0f9      	beq.n	8010392 <__gethex+0x4e>
 801039e:	f7ff ffbc 	bl	801031a <__hexdig_fun>
 80103a2:	fab0 f580 	clz	r5, r0
 80103a6:	096d      	lsrs	r5, r5, #5
 80103a8:	f04f 0b01 	mov.w	fp, #1
 80103ac:	464a      	mov	r2, r9
 80103ae:	4616      	mov	r6, r2
 80103b0:	3201      	adds	r2, #1
 80103b2:	7830      	ldrb	r0, [r6, #0]
 80103b4:	f7ff ffb1 	bl	801031a <__hexdig_fun>
 80103b8:	2800      	cmp	r0, #0
 80103ba:	d1f8      	bne.n	80103ae <__gethex+0x6a>
 80103bc:	498d      	ldr	r1, [pc, #564]	@ (80105f4 <__gethex+0x2b0>)
 80103be:	2201      	movs	r2, #1
 80103c0:	4630      	mov	r0, r6
 80103c2:	f7fd f867 	bl	800d494 <strncmp>
 80103c6:	2800      	cmp	r0, #0
 80103c8:	d13f      	bne.n	801044a <__gethex+0x106>
 80103ca:	b944      	cbnz	r4, 80103de <__gethex+0x9a>
 80103cc:	1c74      	adds	r4, r6, #1
 80103ce:	4622      	mov	r2, r4
 80103d0:	4616      	mov	r6, r2
 80103d2:	3201      	adds	r2, #1
 80103d4:	7830      	ldrb	r0, [r6, #0]
 80103d6:	f7ff ffa0 	bl	801031a <__hexdig_fun>
 80103da:	2800      	cmp	r0, #0
 80103dc:	d1f8      	bne.n	80103d0 <__gethex+0x8c>
 80103de:	1ba4      	subs	r4, r4, r6
 80103e0:	00a7      	lsls	r7, r4, #2
 80103e2:	7833      	ldrb	r3, [r6, #0]
 80103e4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80103e8:	2b50      	cmp	r3, #80	@ 0x50
 80103ea:	d13e      	bne.n	801046a <__gethex+0x126>
 80103ec:	7873      	ldrb	r3, [r6, #1]
 80103ee:	2b2b      	cmp	r3, #43	@ 0x2b
 80103f0:	d033      	beq.n	801045a <__gethex+0x116>
 80103f2:	2b2d      	cmp	r3, #45	@ 0x2d
 80103f4:	d034      	beq.n	8010460 <__gethex+0x11c>
 80103f6:	1c71      	adds	r1, r6, #1
 80103f8:	2400      	movs	r4, #0
 80103fa:	7808      	ldrb	r0, [r1, #0]
 80103fc:	f7ff ff8d 	bl	801031a <__hexdig_fun>
 8010400:	1e43      	subs	r3, r0, #1
 8010402:	b2db      	uxtb	r3, r3
 8010404:	2b18      	cmp	r3, #24
 8010406:	d830      	bhi.n	801046a <__gethex+0x126>
 8010408:	f1a0 0210 	sub.w	r2, r0, #16
 801040c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010410:	f7ff ff83 	bl	801031a <__hexdig_fun>
 8010414:	f100 3cff 	add.w	ip, r0, #4294967295
 8010418:	fa5f fc8c 	uxtb.w	ip, ip
 801041c:	f1bc 0f18 	cmp.w	ip, #24
 8010420:	f04f 030a 	mov.w	r3, #10
 8010424:	d91e      	bls.n	8010464 <__gethex+0x120>
 8010426:	b104      	cbz	r4, 801042a <__gethex+0xe6>
 8010428:	4252      	negs	r2, r2
 801042a:	4417      	add	r7, r2
 801042c:	f8ca 1000 	str.w	r1, [sl]
 8010430:	b1ed      	cbz	r5, 801046e <__gethex+0x12a>
 8010432:	f1bb 0f00 	cmp.w	fp, #0
 8010436:	bf0c      	ite	eq
 8010438:	2506      	moveq	r5, #6
 801043a:	2500      	movne	r5, #0
 801043c:	4628      	mov	r0, r5
 801043e:	b005      	add	sp, #20
 8010440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010444:	2500      	movs	r5, #0
 8010446:	462c      	mov	r4, r5
 8010448:	e7b0      	b.n	80103ac <__gethex+0x68>
 801044a:	2c00      	cmp	r4, #0
 801044c:	d1c7      	bne.n	80103de <__gethex+0x9a>
 801044e:	4627      	mov	r7, r4
 8010450:	e7c7      	b.n	80103e2 <__gethex+0x9e>
 8010452:	464e      	mov	r6, r9
 8010454:	462f      	mov	r7, r5
 8010456:	2501      	movs	r5, #1
 8010458:	e7c3      	b.n	80103e2 <__gethex+0x9e>
 801045a:	2400      	movs	r4, #0
 801045c:	1cb1      	adds	r1, r6, #2
 801045e:	e7cc      	b.n	80103fa <__gethex+0xb6>
 8010460:	2401      	movs	r4, #1
 8010462:	e7fb      	b.n	801045c <__gethex+0x118>
 8010464:	fb03 0002 	mla	r0, r3, r2, r0
 8010468:	e7ce      	b.n	8010408 <__gethex+0xc4>
 801046a:	4631      	mov	r1, r6
 801046c:	e7de      	b.n	801042c <__gethex+0xe8>
 801046e:	eba6 0309 	sub.w	r3, r6, r9
 8010472:	3b01      	subs	r3, #1
 8010474:	4629      	mov	r1, r5
 8010476:	2b07      	cmp	r3, #7
 8010478:	dc0a      	bgt.n	8010490 <__gethex+0x14c>
 801047a:	9801      	ldr	r0, [sp, #4]
 801047c:	f7fe f86a 	bl	800e554 <_Balloc>
 8010480:	4604      	mov	r4, r0
 8010482:	b940      	cbnz	r0, 8010496 <__gethex+0x152>
 8010484:	4b5c      	ldr	r3, [pc, #368]	@ (80105f8 <__gethex+0x2b4>)
 8010486:	4602      	mov	r2, r0
 8010488:	21e4      	movs	r1, #228	@ 0xe4
 801048a:	485c      	ldr	r0, [pc, #368]	@ (80105fc <__gethex+0x2b8>)
 801048c:	f7fd f966 	bl	800d75c <__assert_func>
 8010490:	3101      	adds	r1, #1
 8010492:	105b      	asrs	r3, r3, #1
 8010494:	e7ef      	b.n	8010476 <__gethex+0x132>
 8010496:	f100 0a14 	add.w	sl, r0, #20
 801049a:	2300      	movs	r3, #0
 801049c:	4655      	mov	r5, sl
 801049e:	469b      	mov	fp, r3
 80104a0:	45b1      	cmp	r9, r6
 80104a2:	d337      	bcc.n	8010514 <__gethex+0x1d0>
 80104a4:	f845 bb04 	str.w	fp, [r5], #4
 80104a8:	eba5 050a 	sub.w	r5, r5, sl
 80104ac:	10ad      	asrs	r5, r5, #2
 80104ae:	6125      	str	r5, [r4, #16]
 80104b0:	4658      	mov	r0, fp
 80104b2:	f7fe f941 	bl	800e738 <__hi0bits>
 80104b6:	016d      	lsls	r5, r5, #5
 80104b8:	f8d8 6000 	ldr.w	r6, [r8]
 80104bc:	1a2d      	subs	r5, r5, r0
 80104be:	42b5      	cmp	r5, r6
 80104c0:	dd54      	ble.n	801056c <__gethex+0x228>
 80104c2:	1bad      	subs	r5, r5, r6
 80104c4:	4629      	mov	r1, r5
 80104c6:	4620      	mov	r0, r4
 80104c8:	f7fe fcd2 	bl	800ee70 <__any_on>
 80104cc:	4681      	mov	r9, r0
 80104ce:	b178      	cbz	r0, 80104f0 <__gethex+0x1ac>
 80104d0:	1e6b      	subs	r3, r5, #1
 80104d2:	1159      	asrs	r1, r3, #5
 80104d4:	f003 021f 	and.w	r2, r3, #31
 80104d8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80104dc:	f04f 0901 	mov.w	r9, #1
 80104e0:	fa09 f202 	lsl.w	r2, r9, r2
 80104e4:	420a      	tst	r2, r1
 80104e6:	d003      	beq.n	80104f0 <__gethex+0x1ac>
 80104e8:	454b      	cmp	r3, r9
 80104ea:	dc36      	bgt.n	801055a <__gethex+0x216>
 80104ec:	f04f 0902 	mov.w	r9, #2
 80104f0:	4629      	mov	r1, r5
 80104f2:	4620      	mov	r0, r4
 80104f4:	f7ff febf 	bl	8010276 <rshift>
 80104f8:	442f      	add	r7, r5
 80104fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80104fe:	42bb      	cmp	r3, r7
 8010500:	da42      	bge.n	8010588 <__gethex+0x244>
 8010502:	9801      	ldr	r0, [sp, #4]
 8010504:	4621      	mov	r1, r4
 8010506:	f7fe f865 	bl	800e5d4 <_Bfree>
 801050a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801050c:	2300      	movs	r3, #0
 801050e:	6013      	str	r3, [r2, #0]
 8010510:	25a3      	movs	r5, #163	@ 0xa3
 8010512:	e793      	b.n	801043c <__gethex+0xf8>
 8010514:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010518:	2a2e      	cmp	r2, #46	@ 0x2e
 801051a:	d012      	beq.n	8010542 <__gethex+0x1fe>
 801051c:	2b20      	cmp	r3, #32
 801051e:	d104      	bne.n	801052a <__gethex+0x1e6>
 8010520:	f845 bb04 	str.w	fp, [r5], #4
 8010524:	f04f 0b00 	mov.w	fp, #0
 8010528:	465b      	mov	r3, fp
 801052a:	7830      	ldrb	r0, [r6, #0]
 801052c:	9303      	str	r3, [sp, #12]
 801052e:	f7ff fef4 	bl	801031a <__hexdig_fun>
 8010532:	9b03      	ldr	r3, [sp, #12]
 8010534:	f000 000f 	and.w	r0, r0, #15
 8010538:	4098      	lsls	r0, r3
 801053a:	ea4b 0b00 	orr.w	fp, fp, r0
 801053e:	3304      	adds	r3, #4
 8010540:	e7ae      	b.n	80104a0 <__gethex+0x15c>
 8010542:	45b1      	cmp	r9, r6
 8010544:	d8ea      	bhi.n	801051c <__gethex+0x1d8>
 8010546:	492b      	ldr	r1, [pc, #172]	@ (80105f4 <__gethex+0x2b0>)
 8010548:	9303      	str	r3, [sp, #12]
 801054a:	2201      	movs	r2, #1
 801054c:	4630      	mov	r0, r6
 801054e:	f7fc ffa1 	bl	800d494 <strncmp>
 8010552:	9b03      	ldr	r3, [sp, #12]
 8010554:	2800      	cmp	r0, #0
 8010556:	d1e1      	bne.n	801051c <__gethex+0x1d8>
 8010558:	e7a2      	b.n	80104a0 <__gethex+0x15c>
 801055a:	1ea9      	subs	r1, r5, #2
 801055c:	4620      	mov	r0, r4
 801055e:	f7fe fc87 	bl	800ee70 <__any_on>
 8010562:	2800      	cmp	r0, #0
 8010564:	d0c2      	beq.n	80104ec <__gethex+0x1a8>
 8010566:	f04f 0903 	mov.w	r9, #3
 801056a:	e7c1      	b.n	80104f0 <__gethex+0x1ac>
 801056c:	da09      	bge.n	8010582 <__gethex+0x23e>
 801056e:	1b75      	subs	r5, r6, r5
 8010570:	4621      	mov	r1, r4
 8010572:	9801      	ldr	r0, [sp, #4]
 8010574:	462a      	mov	r2, r5
 8010576:	f7fe fa45 	bl	800ea04 <__lshift>
 801057a:	1b7f      	subs	r7, r7, r5
 801057c:	4604      	mov	r4, r0
 801057e:	f100 0a14 	add.w	sl, r0, #20
 8010582:	f04f 0900 	mov.w	r9, #0
 8010586:	e7b8      	b.n	80104fa <__gethex+0x1b6>
 8010588:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801058c:	42bd      	cmp	r5, r7
 801058e:	dd6f      	ble.n	8010670 <__gethex+0x32c>
 8010590:	1bed      	subs	r5, r5, r7
 8010592:	42ae      	cmp	r6, r5
 8010594:	dc34      	bgt.n	8010600 <__gethex+0x2bc>
 8010596:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801059a:	2b02      	cmp	r3, #2
 801059c:	d022      	beq.n	80105e4 <__gethex+0x2a0>
 801059e:	2b03      	cmp	r3, #3
 80105a0:	d024      	beq.n	80105ec <__gethex+0x2a8>
 80105a2:	2b01      	cmp	r3, #1
 80105a4:	d115      	bne.n	80105d2 <__gethex+0x28e>
 80105a6:	42ae      	cmp	r6, r5
 80105a8:	d113      	bne.n	80105d2 <__gethex+0x28e>
 80105aa:	2e01      	cmp	r6, #1
 80105ac:	d10b      	bne.n	80105c6 <__gethex+0x282>
 80105ae:	9a02      	ldr	r2, [sp, #8]
 80105b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80105b4:	6013      	str	r3, [r2, #0]
 80105b6:	2301      	movs	r3, #1
 80105b8:	6123      	str	r3, [r4, #16]
 80105ba:	f8ca 3000 	str.w	r3, [sl]
 80105be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80105c0:	2562      	movs	r5, #98	@ 0x62
 80105c2:	601c      	str	r4, [r3, #0]
 80105c4:	e73a      	b.n	801043c <__gethex+0xf8>
 80105c6:	1e71      	subs	r1, r6, #1
 80105c8:	4620      	mov	r0, r4
 80105ca:	f7fe fc51 	bl	800ee70 <__any_on>
 80105ce:	2800      	cmp	r0, #0
 80105d0:	d1ed      	bne.n	80105ae <__gethex+0x26a>
 80105d2:	9801      	ldr	r0, [sp, #4]
 80105d4:	4621      	mov	r1, r4
 80105d6:	f7fd fffd 	bl	800e5d4 <_Bfree>
 80105da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80105dc:	2300      	movs	r3, #0
 80105de:	6013      	str	r3, [r2, #0]
 80105e0:	2550      	movs	r5, #80	@ 0x50
 80105e2:	e72b      	b.n	801043c <__gethex+0xf8>
 80105e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d1f3      	bne.n	80105d2 <__gethex+0x28e>
 80105ea:	e7e0      	b.n	80105ae <__gethex+0x26a>
 80105ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d1dd      	bne.n	80105ae <__gethex+0x26a>
 80105f2:	e7ee      	b.n	80105d2 <__gethex+0x28e>
 80105f4:	080116a0 	.word	0x080116a0
 80105f8:	08011534 	.word	0x08011534
 80105fc:	08011711 	.word	0x08011711
 8010600:	1e6f      	subs	r7, r5, #1
 8010602:	f1b9 0f00 	cmp.w	r9, #0
 8010606:	d130      	bne.n	801066a <__gethex+0x326>
 8010608:	b127      	cbz	r7, 8010614 <__gethex+0x2d0>
 801060a:	4639      	mov	r1, r7
 801060c:	4620      	mov	r0, r4
 801060e:	f7fe fc2f 	bl	800ee70 <__any_on>
 8010612:	4681      	mov	r9, r0
 8010614:	117a      	asrs	r2, r7, #5
 8010616:	2301      	movs	r3, #1
 8010618:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801061c:	f007 071f 	and.w	r7, r7, #31
 8010620:	40bb      	lsls	r3, r7
 8010622:	4213      	tst	r3, r2
 8010624:	4629      	mov	r1, r5
 8010626:	4620      	mov	r0, r4
 8010628:	bf18      	it	ne
 801062a:	f049 0902 	orrne.w	r9, r9, #2
 801062e:	f7ff fe22 	bl	8010276 <rshift>
 8010632:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010636:	1b76      	subs	r6, r6, r5
 8010638:	2502      	movs	r5, #2
 801063a:	f1b9 0f00 	cmp.w	r9, #0
 801063e:	d047      	beq.n	80106d0 <__gethex+0x38c>
 8010640:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010644:	2b02      	cmp	r3, #2
 8010646:	d015      	beq.n	8010674 <__gethex+0x330>
 8010648:	2b03      	cmp	r3, #3
 801064a:	d017      	beq.n	801067c <__gethex+0x338>
 801064c:	2b01      	cmp	r3, #1
 801064e:	d109      	bne.n	8010664 <__gethex+0x320>
 8010650:	f019 0f02 	tst.w	r9, #2
 8010654:	d006      	beq.n	8010664 <__gethex+0x320>
 8010656:	f8da 3000 	ldr.w	r3, [sl]
 801065a:	ea49 0903 	orr.w	r9, r9, r3
 801065e:	f019 0f01 	tst.w	r9, #1
 8010662:	d10e      	bne.n	8010682 <__gethex+0x33e>
 8010664:	f045 0510 	orr.w	r5, r5, #16
 8010668:	e032      	b.n	80106d0 <__gethex+0x38c>
 801066a:	f04f 0901 	mov.w	r9, #1
 801066e:	e7d1      	b.n	8010614 <__gethex+0x2d0>
 8010670:	2501      	movs	r5, #1
 8010672:	e7e2      	b.n	801063a <__gethex+0x2f6>
 8010674:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010676:	f1c3 0301 	rsb	r3, r3, #1
 801067a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801067c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801067e:	2b00      	cmp	r3, #0
 8010680:	d0f0      	beq.n	8010664 <__gethex+0x320>
 8010682:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010686:	f104 0314 	add.w	r3, r4, #20
 801068a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801068e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010692:	f04f 0c00 	mov.w	ip, #0
 8010696:	4618      	mov	r0, r3
 8010698:	f853 2b04 	ldr.w	r2, [r3], #4
 801069c:	f1b2 3fff 	cmp.w	r2, #4294967295
 80106a0:	d01b      	beq.n	80106da <__gethex+0x396>
 80106a2:	3201      	adds	r2, #1
 80106a4:	6002      	str	r2, [r0, #0]
 80106a6:	2d02      	cmp	r5, #2
 80106a8:	f104 0314 	add.w	r3, r4, #20
 80106ac:	d13c      	bne.n	8010728 <__gethex+0x3e4>
 80106ae:	f8d8 2000 	ldr.w	r2, [r8]
 80106b2:	3a01      	subs	r2, #1
 80106b4:	42b2      	cmp	r2, r6
 80106b6:	d109      	bne.n	80106cc <__gethex+0x388>
 80106b8:	1171      	asrs	r1, r6, #5
 80106ba:	2201      	movs	r2, #1
 80106bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80106c0:	f006 061f 	and.w	r6, r6, #31
 80106c4:	fa02 f606 	lsl.w	r6, r2, r6
 80106c8:	421e      	tst	r6, r3
 80106ca:	d13a      	bne.n	8010742 <__gethex+0x3fe>
 80106cc:	f045 0520 	orr.w	r5, r5, #32
 80106d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80106d2:	601c      	str	r4, [r3, #0]
 80106d4:	9b02      	ldr	r3, [sp, #8]
 80106d6:	601f      	str	r7, [r3, #0]
 80106d8:	e6b0      	b.n	801043c <__gethex+0xf8>
 80106da:	4299      	cmp	r1, r3
 80106dc:	f843 cc04 	str.w	ip, [r3, #-4]
 80106e0:	d8d9      	bhi.n	8010696 <__gethex+0x352>
 80106e2:	68a3      	ldr	r3, [r4, #8]
 80106e4:	459b      	cmp	fp, r3
 80106e6:	db17      	blt.n	8010718 <__gethex+0x3d4>
 80106e8:	6861      	ldr	r1, [r4, #4]
 80106ea:	9801      	ldr	r0, [sp, #4]
 80106ec:	3101      	adds	r1, #1
 80106ee:	f7fd ff31 	bl	800e554 <_Balloc>
 80106f2:	4681      	mov	r9, r0
 80106f4:	b918      	cbnz	r0, 80106fe <__gethex+0x3ba>
 80106f6:	4b1a      	ldr	r3, [pc, #104]	@ (8010760 <__gethex+0x41c>)
 80106f8:	4602      	mov	r2, r0
 80106fa:	2184      	movs	r1, #132	@ 0x84
 80106fc:	e6c5      	b.n	801048a <__gethex+0x146>
 80106fe:	6922      	ldr	r2, [r4, #16]
 8010700:	3202      	adds	r2, #2
 8010702:	f104 010c 	add.w	r1, r4, #12
 8010706:	0092      	lsls	r2, r2, #2
 8010708:	300c      	adds	r0, #12
 801070a:	f7fd f812 	bl	800d732 <memcpy>
 801070e:	4621      	mov	r1, r4
 8010710:	9801      	ldr	r0, [sp, #4]
 8010712:	f7fd ff5f 	bl	800e5d4 <_Bfree>
 8010716:	464c      	mov	r4, r9
 8010718:	6923      	ldr	r3, [r4, #16]
 801071a:	1c5a      	adds	r2, r3, #1
 801071c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010720:	6122      	str	r2, [r4, #16]
 8010722:	2201      	movs	r2, #1
 8010724:	615a      	str	r2, [r3, #20]
 8010726:	e7be      	b.n	80106a6 <__gethex+0x362>
 8010728:	6922      	ldr	r2, [r4, #16]
 801072a:	455a      	cmp	r2, fp
 801072c:	dd0b      	ble.n	8010746 <__gethex+0x402>
 801072e:	2101      	movs	r1, #1
 8010730:	4620      	mov	r0, r4
 8010732:	f7ff fda0 	bl	8010276 <rshift>
 8010736:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801073a:	3701      	adds	r7, #1
 801073c:	42bb      	cmp	r3, r7
 801073e:	f6ff aee0 	blt.w	8010502 <__gethex+0x1be>
 8010742:	2501      	movs	r5, #1
 8010744:	e7c2      	b.n	80106cc <__gethex+0x388>
 8010746:	f016 061f 	ands.w	r6, r6, #31
 801074a:	d0fa      	beq.n	8010742 <__gethex+0x3fe>
 801074c:	4453      	add	r3, sl
 801074e:	f1c6 0620 	rsb	r6, r6, #32
 8010752:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010756:	f7fd ffef 	bl	800e738 <__hi0bits>
 801075a:	42b0      	cmp	r0, r6
 801075c:	dbe7      	blt.n	801072e <__gethex+0x3ea>
 801075e:	e7f0      	b.n	8010742 <__gethex+0x3fe>
 8010760:	08011534 	.word	0x08011534

08010764 <L_shift>:
 8010764:	f1c2 0208 	rsb	r2, r2, #8
 8010768:	0092      	lsls	r2, r2, #2
 801076a:	b570      	push	{r4, r5, r6, lr}
 801076c:	f1c2 0620 	rsb	r6, r2, #32
 8010770:	6843      	ldr	r3, [r0, #4]
 8010772:	6804      	ldr	r4, [r0, #0]
 8010774:	fa03 f506 	lsl.w	r5, r3, r6
 8010778:	432c      	orrs	r4, r5
 801077a:	40d3      	lsrs	r3, r2
 801077c:	6004      	str	r4, [r0, #0]
 801077e:	f840 3f04 	str.w	r3, [r0, #4]!
 8010782:	4288      	cmp	r0, r1
 8010784:	d3f4      	bcc.n	8010770 <L_shift+0xc>
 8010786:	bd70      	pop	{r4, r5, r6, pc}

08010788 <__match>:
 8010788:	b530      	push	{r4, r5, lr}
 801078a:	6803      	ldr	r3, [r0, #0]
 801078c:	3301      	adds	r3, #1
 801078e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010792:	b914      	cbnz	r4, 801079a <__match+0x12>
 8010794:	6003      	str	r3, [r0, #0]
 8010796:	2001      	movs	r0, #1
 8010798:	bd30      	pop	{r4, r5, pc}
 801079a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801079e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80107a2:	2d19      	cmp	r5, #25
 80107a4:	bf98      	it	ls
 80107a6:	3220      	addls	r2, #32
 80107a8:	42a2      	cmp	r2, r4
 80107aa:	d0f0      	beq.n	801078e <__match+0x6>
 80107ac:	2000      	movs	r0, #0
 80107ae:	e7f3      	b.n	8010798 <__match+0x10>

080107b0 <__hexnan>:
 80107b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107b4:	680b      	ldr	r3, [r1, #0]
 80107b6:	6801      	ldr	r1, [r0, #0]
 80107b8:	115e      	asrs	r6, r3, #5
 80107ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80107be:	f013 031f 	ands.w	r3, r3, #31
 80107c2:	b087      	sub	sp, #28
 80107c4:	bf18      	it	ne
 80107c6:	3604      	addne	r6, #4
 80107c8:	2500      	movs	r5, #0
 80107ca:	1f37      	subs	r7, r6, #4
 80107cc:	4682      	mov	sl, r0
 80107ce:	4690      	mov	r8, r2
 80107d0:	9301      	str	r3, [sp, #4]
 80107d2:	f846 5c04 	str.w	r5, [r6, #-4]
 80107d6:	46b9      	mov	r9, r7
 80107d8:	463c      	mov	r4, r7
 80107da:	9502      	str	r5, [sp, #8]
 80107dc:	46ab      	mov	fp, r5
 80107de:	784a      	ldrb	r2, [r1, #1]
 80107e0:	1c4b      	adds	r3, r1, #1
 80107e2:	9303      	str	r3, [sp, #12]
 80107e4:	b342      	cbz	r2, 8010838 <__hexnan+0x88>
 80107e6:	4610      	mov	r0, r2
 80107e8:	9105      	str	r1, [sp, #20]
 80107ea:	9204      	str	r2, [sp, #16]
 80107ec:	f7ff fd95 	bl	801031a <__hexdig_fun>
 80107f0:	2800      	cmp	r0, #0
 80107f2:	d151      	bne.n	8010898 <__hexnan+0xe8>
 80107f4:	9a04      	ldr	r2, [sp, #16]
 80107f6:	9905      	ldr	r1, [sp, #20]
 80107f8:	2a20      	cmp	r2, #32
 80107fa:	d818      	bhi.n	801082e <__hexnan+0x7e>
 80107fc:	9b02      	ldr	r3, [sp, #8]
 80107fe:	459b      	cmp	fp, r3
 8010800:	dd13      	ble.n	801082a <__hexnan+0x7a>
 8010802:	454c      	cmp	r4, r9
 8010804:	d206      	bcs.n	8010814 <__hexnan+0x64>
 8010806:	2d07      	cmp	r5, #7
 8010808:	dc04      	bgt.n	8010814 <__hexnan+0x64>
 801080a:	462a      	mov	r2, r5
 801080c:	4649      	mov	r1, r9
 801080e:	4620      	mov	r0, r4
 8010810:	f7ff ffa8 	bl	8010764 <L_shift>
 8010814:	4544      	cmp	r4, r8
 8010816:	d952      	bls.n	80108be <__hexnan+0x10e>
 8010818:	2300      	movs	r3, #0
 801081a:	f1a4 0904 	sub.w	r9, r4, #4
 801081e:	f844 3c04 	str.w	r3, [r4, #-4]
 8010822:	f8cd b008 	str.w	fp, [sp, #8]
 8010826:	464c      	mov	r4, r9
 8010828:	461d      	mov	r5, r3
 801082a:	9903      	ldr	r1, [sp, #12]
 801082c:	e7d7      	b.n	80107de <__hexnan+0x2e>
 801082e:	2a29      	cmp	r2, #41	@ 0x29
 8010830:	d157      	bne.n	80108e2 <__hexnan+0x132>
 8010832:	3102      	adds	r1, #2
 8010834:	f8ca 1000 	str.w	r1, [sl]
 8010838:	f1bb 0f00 	cmp.w	fp, #0
 801083c:	d051      	beq.n	80108e2 <__hexnan+0x132>
 801083e:	454c      	cmp	r4, r9
 8010840:	d206      	bcs.n	8010850 <__hexnan+0xa0>
 8010842:	2d07      	cmp	r5, #7
 8010844:	dc04      	bgt.n	8010850 <__hexnan+0xa0>
 8010846:	462a      	mov	r2, r5
 8010848:	4649      	mov	r1, r9
 801084a:	4620      	mov	r0, r4
 801084c:	f7ff ff8a 	bl	8010764 <L_shift>
 8010850:	4544      	cmp	r4, r8
 8010852:	d936      	bls.n	80108c2 <__hexnan+0x112>
 8010854:	f1a8 0204 	sub.w	r2, r8, #4
 8010858:	4623      	mov	r3, r4
 801085a:	f853 1b04 	ldr.w	r1, [r3], #4
 801085e:	f842 1f04 	str.w	r1, [r2, #4]!
 8010862:	429f      	cmp	r7, r3
 8010864:	d2f9      	bcs.n	801085a <__hexnan+0xaa>
 8010866:	1b3b      	subs	r3, r7, r4
 8010868:	f023 0303 	bic.w	r3, r3, #3
 801086c:	3304      	adds	r3, #4
 801086e:	3401      	adds	r4, #1
 8010870:	3e03      	subs	r6, #3
 8010872:	42b4      	cmp	r4, r6
 8010874:	bf88      	it	hi
 8010876:	2304      	movhi	r3, #4
 8010878:	4443      	add	r3, r8
 801087a:	2200      	movs	r2, #0
 801087c:	f843 2b04 	str.w	r2, [r3], #4
 8010880:	429f      	cmp	r7, r3
 8010882:	d2fb      	bcs.n	801087c <__hexnan+0xcc>
 8010884:	683b      	ldr	r3, [r7, #0]
 8010886:	b91b      	cbnz	r3, 8010890 <__hexnan+0xe0>
 8010888:	4547      	cmp	r7, r8
 801088a:	d128      	bne.n	80108de <__hexnan+0x12e>
 801088c:	2301      	movs	r3, #1
 801088e:	603b      	str	r3, [r7, #0]
 8010890:	2005      	movs	r0, #5
 8010892:	b007      	add	sp, #28
 8010894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010898:	3501      	adds	r5, #1
 801089a:	2d08      	cmp	r5, #8
 801089c:	f10b 0b01 	add.w	fp, fp, #1
 80108a0:	dd06      	ble.n	80108b0 <__hexnan+0x100>
 80108a2:	4544      	cmp	r4, r8
 80108a4:	d9c1      	bls.n	801082a <__hexnan+0x7a>
 80108a6:	2300      	movs	r3, #0
 80108a8:	f844 3c04 	str.w	r3, [r4, #-4]
 80108ac:	2501      	movs	r5, #1
 80108ae:	3c04      	subs	r4, #4
 80108b0:	6822      	ldr	r2, [r4, #0]
 80108b2:	f000 000f 	and.w	r0, r0, #15
 80108b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80108ba:	6020      	str	r0, [r4, #0]
 80108bc:	e7b5      	b.n	801082a <__hexnan+0x7a>
 80108be:	2508      	movs	r5, #8
 80108c0:	e7b3      	b.n	801082a <__hexnan+0x7a>
 80108c2:	9b01      	ldr	r3, [sp, #4]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d0dd      	beq.n	8010884 <__hexnan+0xd4>
 80108c8:	f1c3 0320 	rsb	r3, r3, #32
 80108cc:	f04f 32ff 	mov.w	r2, #4294967295
 80108d0:	40da      	lsrs	r2, r3
 80108d2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80108d6:	4013      	ands	r3, r2
 80108d8:	f846 3c04 	str.w	r3, [r6, #-4]
 80108dc:	e7d2      	b.n	8010884 <__hexnan+0xd4>
 80108de:	3f04      	subs	r7, #4
 80108e0:	e7d0      	b.n	8010884 <__hexnan+0xd4>
 80108e2:	2004      	movs	r0, #4
 80108e4:	e7d5      	b.n	8010892 <__hexnan+0xe2>

080108e6 <__ascii_mbtowc>:
 80108e6:	b082      	sub	sp, #8
 80108e8:	b901      	cbnz	r1, 80108ec <__ascii_mbtowc+0x6>
 80108ea:	a901      	add	r1, sp, #4
 80108ec:	b142      	cbz	r2, 8010900 <__ascii_mbtowc+0x1a>
 80108ee:	b14b      	cbz	r3, 8010904 <__ascii_mbtowc+0x1e>
 80108f0:	7813      	ldrb	r3, [r2, #0]
 80108f2:	600b      	str	r3, [r1, #0]
 80108f4:	7812      	ldrb	r2, [r2, #0]
 80108f6:	1e10      	subs	r0, r2, #0
 80108f8:	bf18      	it	ne
 80108fa:	2001      	movne	r0, #1
 80108fc:	b002      	add	sp, #8
 80108fe:	4770      	bx	lr
 8010900:	4610      	mov	r0, r2
 8010902:	e7fb      	b.n	80108fc <__ascii_mbtowc+0x16>
 8010904:	f06f 0001 	mvn.w	r0, #1
 8010908:	e7f8      	b.n	80108fc <__ascii_mbtowc+0x16>

0801090a <_realloc_r>:
 801090a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801090e:	4680      	mov	r8, r0
 8010910:	4615      	mov	r5, r2
 8010912:	460c      	mov	r4, r1
 8010914:	b921      	cbnz	r1, 8010920 <_realloc_r+0x16>
 8010916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801091a:	4611      	mov	r1, r2
 801091c:	f7fd bd8e 	b.w	800e43c <_malloc_r>
 8010920:	b92a      	cbnz	r2, 801092e <_realloc_r+0x24>
 8010922:	f7fd fd17 	bl	800e354 <_free_r>
 8010926:	2400      	movs	r4, #0
 8010928:	4620      	mov	r0, r4
 801092a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801092e:	f000 f86b 	bl	8010a08 <_malloc_usable_size_r>
 8010932:	4285      	cmp	r5, r0
 8010934:	4606      	mov	r6, r0
 8010936:	d802      	bhi.n	801093e <_realloc_r+0x34>
 8010938:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801093c:	d8f4      	bhi.n	8010928 <_realloc_r+0x1e>
 801093e:	4629      	mov	r1, r5
 8010940:	4640      	mov	r0, r8
 8010942:	f7fd fd7b 	bl	800e43c <_malloc_r>
 8010946:	4607      	mov	r7, r0
 8010948:	2800      	cmp	r0, #0
 801094a:	d0ec      	beq.n	8010926 <_realloc_r+0x1c>
 801094c:	42b5      	cmp	r5, r6
 801094e:	462a      	mov	r2, r5
 8010950:	4621      	mov	r1, r4
 8010952:	bf28      	it	cs
 8010954:	4632      	movcs	r2, r6
 8010956:	f7fc feec 	bl	800d732 <memcpy>
 801095a:	4621      	mov	r1, r4
 801095c:	4640      	mov	r0, r8
 801095e:	f7fd fcf9 	bl	800e354 <_free_r>
 8010962:	463c      	mov	r4, r7
 8010964:	e7e0      	b.n	8010928 <_realloc_r+0x1e>

08010966 <__ascii_wctomb>:
 8010966:	4603      	mov	r3, r0
 8010968:	4608      	mov	r0, r1
 801096a:	b141      	cbz	r1, 801097e <__ascii_wctomb+0x18>
 801096c:	2aff      	cmp	r2, #255	@ 0xff
 801096e:	d904      	bls.n	801097a <__ascii_wctomb+0x14>
 8010970:	228a      	movs	r2, #138	@ 0x8a
 8010972:	601a      	str	r2, [r3, #0]
 8010974:	f04f 30ff 	mov.w	r0, #4294967295
 8010978:	4770      	bx	lr
 801097a:	700a      	strb	r2, [r1, #0]
 801097c:	2001      	movs	r0, #1
 801097e:	4770      	bx	lr

08010980 <_raise_r>:
 8010980:	291f      	cmp	r1, #31
 8010982:	b538      	push	{r3, r4, r5, lr}
 8010984:	4605      	mov	r5, r0
 8010986:	460c      	mov	r4, r1
 8010988:	d904      	bls.n	8010994 <_raise_r+0x14>
 801098a:	2316      	movs	r3, #22
 801098c:	6003      	str	r3, [r0, #0]
 801098e:	f04f 30ff 	mov.w	r0, #4294967295
 8010992:	bd38      	pop	{r3, r4, r5, pc}
 8010994:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010996:	b112      	cbz	r2, 801099e <_raise_r+0x1e>
 8010998:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801099c:	b94b      	cbnz	r3, 80109b2 <_raise_r+0x32>
 801099e:	4628      	mov	r0, r5
 80109a0:	f000 f830 	bl	8010a04 <_getpid_r>
 80109a4:	4622      	mov	r2, r4
 80109a6:	4601      	mov	r1, r0
 80109a8:	4628      	mov	r0, r5
 80109aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80109ae:	f000 b817 	b.w	80109e0 <_kill_r>
 80109b2:	2b01      	cmp	r3, #1
 80109b4:	d00a      	beq.n	80109cc <_raise_r+0x4c>
 80109b6:	1c59      	adds	r1, r3, #1
 80109b8:	d103      	bne.n	80109c2 <_raise_r+0x42>
 80109ba:	2316      	movs	r3, #22
 80109bc:	6003      	str	r3, [r0, #0]
 80109be:	2001      	movs	r0, #1
 80109c0:	e7e7      	b.n	8010992 <_raise_r+0x12>
 80109c2:	2100      	movs	r1, #0
 80109c4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80109c8:	4620      	mov	r0, r4
 80109ca:	4798      	blx	r3
 80109cc:	2000      	movs	r0, #0
 80109ce:	e7e0      	b.n	8010992 <_raise_r+0x12>

080109d0 <raise>:
 80109d0:	4b02      	ldr	r3, [pc, #8]	@ (80109dc <raise+0xc>)
 80109d2:	4601      	mov	r1, r0
 80109d4:	6818      	ldr	r0, [r3, #0]
 80109d6:	f7ff bfd3 	b.w	8010980 <_raise_r>
 80109da:	bf00      	nop
 80109dc:	2000025c 	.word	0x2000025c

080109e0 <_kill_r>:
 80109e0:	b538      	push	{r3, r4, r5, lr}
 80109e2:	4d07      	ldr	r5, [pc, #28]	@ (8010a00 <_kill_r+0x20>)
 80109e4:	2300      	movs	r3, #0
 80109e6:	4604      	mov	r4, r0
 80109e8:	4608      	mov	r0, r1
 80109ea:	4611      	mov	r1, r2
 80109ec:	602b      	str	r3, [r5, #0]
 80109ee:	f7f2 feb5 	bl	800375c <_kill>
 80109f2:	1c43      	adds	r3, r0, #1
 80109f4:	d102      	bne.n	80109fc <_kill_r+0x1c>
 80109f6:	682b      	ldr	r3, [r5, #0]
 80109f8:	b103      	cbz	r3, 80109fc <_kill_r+0x1c>
 80109fa:	6023      	str	r3, [r4, #0]
 80109fc:	bd38      	pop	{r3, r4, r5, pc}
 80109fe:	bf00      	nop
 8010a00:	20004bb8 	.word	0x20004bb8

08010a04 <_getpid_r>:
 8010a04:	f7f2 bea2 	b.w	800374c <_getpid>

08010a08 <_malloc_usable_size_r>:
 8010a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a0c:	1f18      	subs	r0, r3, #4
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	bfbc      	itt	lt
 8010a12:	580b      	ldrlt	r3, [r1, r0]
 8010a14:	18c0      	addlt	r0, r0, r3
 8010a16:	4770      	bx	lr

08010a18 <_init>:
 8010a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a1a:	bf00      	nop
 8010a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a1e:	bc08      	pop	{r3}
 8010a20:	469e      	mov	lr, r3
 8010a22:	4770      	bx	lr

08010a24 <_fini>:
 8010a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a26:	bf00      	nop
 8010a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a2a:	bc08      	pop	{r3}
 8010a2c:	469e      	mov	lr, r3
 8010a2e:	4770      	bx	lr
